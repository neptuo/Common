/* Generated by SharpKit 5 v5.4.4 */
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}

if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}


if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var Neptuo$Bootstrap$AutomaticBootstrapper = {
    fullname: "Neptuo.Bootstrap.AutomaticBootstrapper",
    baseTypeName: "Neptuo.Bootstrap.BootstrapperBase",
    assemblyName: "Neptuo.Bootstrap",
    interfaceNames: ["Neptuo.Bootstrap.IBootstrapper"],
    Kind: "Class",
    definition: {
        ctor$$Func$2$Type$IBootstrapTask$$IBootstrapConstraintProvider: function (factory, provider){
            this.types = null;
            Neptuo.Bootstrap.BootstrapperBase.ctor.call(this, factory, provider);
        },
        ctor$$Func$2$Type$IBootstrapTask$$IEnumerable$1$Type$$IBootstrapConstraintProvider: function (factory, types, provider){
            this.types = null;
            Neptuo.Bootstrap.BootstrapperBase.ctor.call(this, factory, provider);
            this.types = this.AddSupportedTypes(new System.Collections.Generic.List$1.ctor(System.Type.ctor), types);
        },
        Initialize: function (){
            if (this.types == null)
                this.types = this.FindTypes();
            var $it1 = this.types.GetEnumerator();
            while ($it1.MoveNext()){
                var type = $it1.get_Current();
                var instance = this.CreateInstance$$Type(type);
                if (this.AreConstraintsSatisfied(instance))
                    this.get_Tasks().Add(instance);
            }
            var $it2 = this.get_Tasks().GetEnumerator();
            while ($it2.MoveNext()){
                var task = $it2.get_Current();
                task.Initialize();
            }
        },
        FindTypes: function (){
            var types = new System.Collections.Generic.List$1.ctor(System.Type.ctor);
            this.SearchAssemblies(types);
            return types;
        },
        SearchAssemblies: function (types){
            var $it3 = System.AppDomain.get_CurrentDomain().GetAssemblies().GetEnumerator();
            while ($it3.MoveNext()){
                var assembly = $it3.get_Current();
                try{
                    this.AddSupportedTypes(types, assembly.GetTypes());
                }
                catch($$e1){
                }
            }
            return types;
        },
        AddSupportedTypes: function (target, sourceTypes){
            if (target == null)
                target = new System.Collections.Generic.List$1.ctor(System.Type.ctor);
            var bootstrapInterfaceType = Typeof(Neptuo.Bootstrap.IBootstrapTask.ctor);
            var $it4 = sourceTypes.GetEnumerator();
            while ($it4.MoveNext()){
                var type = $it4.get_Current();
                if (bootstrapInterfaceType.IsAssignableFrom(type) && System.Type.op_Inequality$$Type$$Type(bootstrapInterfaceType, type) && !type.get_IsAbstract() && !type.get_IsInterface())
                    target.Add(type);
            }
            return target;
        }
    },
    ctors: [{
        name: "ctor$$Func$$IBootstrapConstraintProvider",
        parameters: ["System.Func", "Neptuo.Bootstrap.Constraints.IBootstrapConstraintProvider"]
    }, {
        name: "ctor$$Func$$IEnumerable$$IBootstrapConstraintProvider",
        parameters: ["System.Func", "System.Collections.Generic.IEnumerable", "Neptuo.Bootstrap.Constraints.IBootstrapConstraintProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Bootstrap$AutomaticBootstrapper);
var Neptuo$Bootstrap$BootstrapperBase = {
    fullname: "Neptuo.Bootstrap.BootstrapperBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Bootstrap",
    interfaceNames: ["Neptuo.Bootstrap.IBootstrapper"],
    Kind: "Class",
    definition: {
        ctor: function (factory, provider){
            this.provider = null;
            this.factory = null;
            this._Tasks = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(factory, "factory");
            this.factory = factory;
            this.provider = (provider != null ? provider : new Neptuo.Bootstrap.Constraints.Providers.NullObjectConstrainProvider.ctor());
            this.set_Tasks(new System.Collections.Generic.List$1.ctor(Neptuo.Bootstrap.IBootstrapTask.ctor));
        },
        Tasks$$: "System.Collections.Generic.List`1[[Neptuo.Bootstrap.IBootstrapTask]]",
        get_Tasks: function (){
            return this._Tasks;
        },
        set_Tasks: function (value){
            this._Tasks = value;
        },
        CreateInstance$$Type: function (type){
            return this.factory(type);
        },
        CreateInstance$1: function (T){
            return this.factory(Typeof(T));
        },
        AreConstraintsSatisfied: function (task){
            var context = new Neptuo.Bootstrap.Constraints.DefaultBootstrapConstraintContext.ctor(this);
            return Neptuo.Bootstrap.Constraints.IEnumerableConstraintExtensions.IsSatisfied(this.provider.GetConstraints(task.GetType()), task, context);
        },
        Initialize: function (){
            var context = new Neptuo.Bootstrap.Constraints.DefaultBootstrapConstraintContext.ctor(this);
            var $it5 = this.get_Tasks().GetEnumerator();
            while ($it5.MoveNext()){
                var task = $it5.get_Current();
                if (Neptuo.Bootstrap.Constraints.IEnumerableConstraintExtensions.IsSatisfied(this.provider.GetConstraints(task.GetType()), task, context))
                    this.InitializeTask(task);
            }
        },
        InitializeTask: function (task){
            task.Initialize();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Func", "Neptuo.Bootstrap.Constraints.IBootstrapConstraintProvider"]
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$Bootstrap$BootstrapperBase);
var Neptuo$Bootstrap$Constraints$ConstraintAttribute = {
    fullname: "Neptuo.Bootstrap.Constraints.ConstraintAttribute",
    baseTypeName: "System.Attribute",
    assemblyName: "Neptuo.Bootstrap",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._Type = null;
            System.Attribute.ctor.call(this);
        },
        Type$$: "System.Type",
        get_Type: function (){
            return this._Type;
        },
        set_Type: function (value){
            this._Type = value;
        },
        ctor$$Type: function (type){
            this._Type = null;
            System.Attribute.ctor.call(this);
            this.set_Type(type);
        },
        GetConstraintType: function (){
            if (System.Type.op_Inequality$$Type$$Type(this.get_Type(), null))
                return this.get_Type();
            throw $CreateException(new System.ArgumentNullException.ctor$$String("Type"), new Error());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }, {
        name: "ctor$$Type",
        parameters: ["System.Type"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Bootstrap$Constraints$ConstraintAttribute);
var Neptuo$Bootstrap$Constraints$Providers$AttributeConstraintProvider = {
    fullname: "Neptuo.Bootstrap.Constraints.Providers.AttributeConstraintProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Bootstrap",
    interfaceNames: ["Neptuo.Bootstrap.Constraints.IBootstrapConstraintProvider"],
    Kind: "Class",
    definition: {
        ctor: function (factory){
            this.factory = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(factory, "factory");
            this.factory = factory;
        },
        GetConstraints: function (bootstrapTask){
            var result = new System.Collections.Generic.List$1.ctor(Neptuo.Bootstrap.Constraints.IBootstrapConstraint.ctor);
            var $it6 = bootstrapTask.GetCustomAttributes$$Boolean(true).GetEnumerator();
            while ($it6.MoveNext()){
                var attribute = $it6.get_Current();
                if (Is(attribute, Neptuo.Bootstrap.Constraints.ConstraintAttribute.ctor)){
                    var constraint = null;
                    if (Is(attribute, Neptuo.Bootstrap.Constraints.IBootstrapConstraint.ctor))
                        constraint = Cast(attribute, Neptuo.Bootstrap.Constraints.IBootstrapConstraint.ctor);
                    else
                        constraint = this.CreateInstance((Cast(attribute, Neptuo.Bootstrap.Constraints.ConstraintAttribute.ctor)).GetConstraintType());
                    if (constraint != null)
                        result.Add(constraint);
                }
            }
            return result;
        },
        CreateInstance: function (type){
            return this.factory(type);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Func"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Bootstrap$Constraints$Providers$AttributeConstraintProvider);
var Neptuo$Bootstrap$Constraints$Providers$CachingConstraintProvider = {
    fullname: "Neptuo.Bootstrap.Constraints.Providers.CachingConstraintProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Bootstrap",
    interfaceNames: ["Neptuo.Bootstrap.Constraints.IBootstrapConstraintProvider"],
    Kind: "Class",
    definition: {
        ctor: function (provider){
            this.cache = new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, System.Collections.Generic.IEnumerable$1.ctor);
            this.provider = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(provider, "provider");
            this.provider = provider;
        },
        GetConstraints: function (bootstrapTask){
            if (this.cache.ContainsKey(bootstrapTask))
                return this.cache.get_Item$$TKey(bootstrapTask);
            var constraints = this.provider.GetConstraints(bootstrapTask);
            this.cache.set_Item$$TKey(bootstrapTask, constraints);
            return constraints;
        },
        ClearCache: function (){
            this.cache.Clear();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Bootstrap.Constraints.IBootstrapConstraintProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Bootstrap$Constraints$Providers$CachingConstraintProvider);
var Neptuo$Bootstrap$Constraints$DefaultBootstrapConstraintContext = {
    fullname: "Neptuo.Bootstrap.Constraints.DefaultBootstrapConstraintContext",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Bootstrap",
    interfaceNames: ["Neptuo.Bootstrap.Constraints.IBootstrapConstraintContext"],
    Kind: "Class",
    definition: {
        ctor: function (bootstrapper){
            this._Bootstrapper = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(bootstrapper, "bootstrapper");
            this.set_Bootstrapper(bootstrapper);
        },
        Bootstrapper$$: "Neptuo.Bootstrap.IBootstrapper",
        get_Bootstrapper: function (){
            return this._Bootstrapper;
        },
        set_Bootstrapper: function (value){
            this._Bootstrapper = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Bootstrap.IBootstrapper"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Bootstrap$Constraints$DefaultBootstrapConstraintContext);
var Neptuo$Bootstrap$Constraints$IBootstrapConstraint = {
    fullname: "Neptuo.Bootstrap.Constraints.IBootstrapConstraint",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Bootstrap",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Bootstrap$Constraints$IBootstrapConstraint);
var Neptuo$Bootstrap$Constraints$IBootstrapConstraintContext = {
    fullname: "Neptuo.Bootstrap.Constraints.IBootstrapConstraintContext",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Bootstrap",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Bootstrap$Constraints$IBootstrapConstraintContext);
var Neptuo$Bootstrap$Constraints$IBootstrapConstraintProvider = {
    fullname: "Neptuo.Bootstrap.Constraints.IBootstrapConstraintProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Bootstrap",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Bootstrap$Constraints$IBootstrapConstraintProvider);
var Neptuo$Bootstrap$Constraints$IEnumerableConstraintExtensions = {
    fullname: "Neptuo.Bootstrap.Constraints.IEnumerableConstraintExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        IsSatisfied: function (constraints, bootstrapTask, context){
            var $it7 = constraints.GetEnumerator();
            while ($it7.MoveNext()){
                var constraint = $it7.get_Current();
                if (!constraint.IsSatisfied(bootstrapTask, context))
                    return false;
            }
            return true;
        }
    },
    assemblyName: "Neptuo.Bootstrap",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Bootstrap$Constraints$IEnumerableConstraintExtensions);
var Neptuo$Bootstrap$Constraints$Providers$NullObjectConstrainProvider = {
    fullname: "Neptuo.Bootstrap.Constraints.Providers.NullObjectConstrainProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Bootstrap",
    interfaceNames: ["Neptuo.Bootstrap.Constraints.IBootstrapConstraintProvider"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.result = new System.Collections.Generic.List$1.ctor(Neptuo.Bootstrap.Constraints.IBootstrapConstraint.ctor);
            System.Object.ctor.call(this);
        },
        GetConstraints: function (bootstrapTask){
            return this.result;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Bootstrap$Constraints$Providers$NullObjectConstrainProvider);
var Neptuo$Bootstrap$Dependencies$ExportAttribute = {
    fullname: "Neptuo.Bootstrap.Dependencies.ExportAttribute",
    baseTypeName: "System.Attribute",
    assemblyName: "Neptuo.Bootstrap",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Attribute.ctor.call(this);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Bootstrap$Dependencies$ExportAttribute);
var Neptuo$Bootstrap$Dependencies$ImportAttribute = {
    fullname: "Neptuo.Bootstrap.Dependencies.ImportAttribute",
    baseTypeName: "System.Attribute",
    assemblyName: "Neptuo.Bootstrap",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Attribute.ctor.call(this);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Bootstrap$Dependencies$ImportAttribute);
var Neptuo$Bootstrap$Dependencies$ITaskDependency = {
    fullname: "Neptuo.Bootstrap.Dependencies.ITaskDependency",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Bootstrap",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Bootstrap$Dependencies$ITaskDependency);
var Neptuo$Bootstrap$Dependencies$ITaskDependencyProvider = {
    fullname: "Neptuo.Bootstrap.Dependencies.ITaskDependencyProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Bootstrap",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Bootstrap$Dependencies$ITaskDependencyProvider);
var Neptuo$Bootstrap$Dependencies$ITaskExecutor = {
    fullname: "Neptuo.Bootstrap.Dependencies.ITaskExecutor",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Bootstrap",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Bootstrap$Dependencies$ITaskExecutor);
var Neptuo$Bootstrap$Dependencies$ITaskDescriptor = {
    fullname: "Neptuo.Bootstrap.Dependencies.ITaskDescriptor",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Bootstrap",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Bootstrap$Dependencies$ITaskDescriptor);
var Neptuo$Bootstrap$Dependencies$PropertyTaskDependency = {
    fullname: "Neptuo.Bootstrap.Dependencies.PropertyTaskDependency",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Bootstrap",
    interfaceNames: ["Neptuo.Bootstrap.Dependencies.ITaskDependency"],
    Kind: "Class",
    definition: {
        ctor: function (targetType, targetProperty){
            this._TargetType = null;
            this._TargetProperty = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(targetType, "targetType");
            Neptuo.Guard.NotNull$$Object$$String(targetProperty, "targetProperty");
            this.set_TargetType(targetType);
            this.set_TargetProperty(targetProperty);
        },
        TargetType$$: "System.Type",
        get_TargetType: function (){
            return this._TargetType;
        },
        set_TargetType: function (value){
            this._TargetType = value;
        },
        TargetProperty$$: "System.Reflection.PropertyInfo",
        get_TargetProperty: function (){
            return this._TargetProperty;
        },
        set_TargetProperty: function (value){
            this._TargetProperty = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Type", "System.Reflection.PropertyInfo"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Bootstrap$Dependencies$PropertyTaskDependency);
var Neptuo$Bootstrap$HierarchicalBootstrapper = {
    fullname: "Neptuo.Bootstrap.HierarchicalBootstrapper",
    baseTypeName: "Neptuo.Bootstrap.BootstrapperBase",
    assemblyName: "Neptuo.Bootstrap",
    interfaceNames: ["Neptuo.Bootstrap.IBootstrapper", "Neptuo.Bootstrap.IBootstrapTaskRegistry", "Neptuo.Bootstrap.Dependencies.ITaskExecutor"],
    Kind: "Class",
    definition: {
        ctor: function (context){
            this.context = null;
            this.descriptors = new System.Collections.Generic.List$1.ctor(Neptuo.Bootstrap.HierarchicalBootstrapper.BootstrapTaskDescriptor.ctor);
            Neptuo.Bootstrap.BootstrapperBase.ctor.call(this, context.get_Activator(), context.get_ConstraintProvider());
            Neptuo.Guard.NotNull$$Object$$String(context, "context");
            this.context = context;
        },
        Register$$IBootstrapTask: function (task){
            Neptuo.Guard.NotNull$$Object$$String(task, "task");
            var descriptor = new Neptuo.Bootstrap.HierarchicalBootstrapper.BootstrapTaskDescriptor.ctor(task.GetType());
            descriptor.set_Instance(task);
        },
        Register$1: function (T){
            var descriptor = new Neptuo.Bootstrap.HierarchicalBootstrapper.BootstrapTaskDescriptor.ctor(Typeof(T));
            descriptor.set_Instance(this.CreateInstance$1(T));
            this.descriptors.Add(descriptor);
        },
        Initialize: function (){
            var $it8 = this.descriptors.GetEnumerator();
            while ($it8.MoveNext()){
                var descriptor = $it8.get_Current();
                this.ExecuteDescriptor(descriptor);
            }
        },
        ExecuteDescriptor: function (descriptor){
            if (descriptor.get_IsExecuted())
                return;
            var dependencies = this.context.get_DependencyProvider().GetDependencies$$IBootstrapTask(descriptor.get_Instance());
            if (this.AreConstraintsSatisfied(descriptor.get_Instance())){
                descriptor.get_Instance().Initialize();
            }
            descriptor.set_IsExecuted(true);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Bootstrap.HierarchicalContext"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Bootstrap$HierarchicalBootstrapper);
var Neptuo$Bootstrap$HierarchicalBootstrapper$BootstrapTaskDescriptor = {
    fullname: "Neptuo.Bootstrap.HierarchicalBootstrapper.BootstrapTaskDescriptor",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Bootstrap",
    interfaceNames: ["Neptuo.Bootstrap.Dependencies.ITaskDescriptor"],
    Kind: "Class",
    definition: {
        ctor: function (type){
            this._Type = null;
            this._Instance = null;
            this._Imports = null;
            this._Exports = null;
            this._IsExecuted = false;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(type, "type");
            this.set_Type(type);
            this.set_Imports(new System.Collections.Generic.List$1.ctor(System.Type.ctor));
            this.set_Exports(new System.Collections.Generic.List$1.ctor(System.Type.ctor));
        },
        Type$$: "System.Type",
        get_Type: function (){
            return this._Type;
        },
        set_Type: function (value){
            this._Type = value;
        },
        Instance$$: "Neptuo.Bootstrap.IBootstrapTask",
        get_Instance: function (){
            return this._Instance;
        },
        set_Instance: function (value){
            this._Instance = value;
        },
        Imports$$: "System.Collections.Generic.List`1[[System.Type]]",
        get_Imports: function (){
            return this._Imports;
        },
        set_Imports: function (value){
            this._Imports = value;
        },
        Exports$$: "System.Collections.Generic.List`1[[System.Type]]",
        get_Exports: function (){
            return this._Exports;
        },
        set_Exports: function (value){
            this._Exports = value;
        },
        IsExecuted$$: "System.Boolean",
        get_IsExecuted: function (){
            return this._IsExecuted;
        },
        set_IsExecuted: function (value){
            this._IsExecuted = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Type"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Bootstrap$HierarchicalBootstrapper$BootstrapTaskDescriptor);
var Neptuo$Bootstrap$HierarchicalContext = {
    fullname: "Neptuo.Bootstrap.HierarchicalContext",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Bootstrap",
    Kind: "Class",
    definition: {
        ctor: function (activator, constraintProvider, dependencyProvider){
            this._Activator = null;
            this._ConstraintProvider = null;
            this._DependencyProvider = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(activator, "activator");
            Neptuo.Guard.NotNull$$Object$$String(constraintProvider, "constraintProvider");
            Neptuo.Guard.NotNull$$Object$$String(dependencyProvider, "dependencyProvider");
            this.set_Activator(activator);
            this.set_ConstraintProvider(constraintProvider);
            this.set_DependencyProvider(dependencyProvider);
        },
        Activator$$: "System.Func`2[[System.Type],[Neptuo.Bootstrap.IBootstrapTask]]",
        get_Activator: function (){
            return this._Activator;
        },
        set_Activator: function (value){
            this._Activator = value;
        },
        ConstraintProvider$$: "Neptuo.Bootstrap.Constraints.IBootstrapConstraintProvider",
        get_ConstraintProvider: function (){
            return this._ConstraintProvider;
        },
        set_ConstraintProvider: function (value){
            this._ConstraintProvider = value;
        },
        DependencyProvider$$: "Neptuo.Bootstrap.Dependencies.ITaskDependencyProvider",
        get_DependencyProvider: function (){
            return this._DependencyProvider;
        },
        set_DependencyProvider: function (value){
            this._DependencyProvider = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Func", "Neptuo.Bootstrap.Constraints.IBootstrapConstraintProvider", "Neptuo.Bootstrap.Dependencies.ITaskDependencyProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Bootstrap$HierarchicalContext);
var Neptuo$Bootstrap$IBootstrapper = {
    fullname: "Neptuo.Bootstrap.IBootstrapper",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Bootstrap",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Bootstrap$IBootstrapper);
var Neptuo$Bootstrap$IBootstrapTaskRegistry = {
    fullname: "Neptuo.Bootstrap.IBootstrapTaskRegistry",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Bootstrap",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Bootstrap$IBootstrapTaskRegistry);
var Neptuo$Bootstrap$IBootstrapTask = {
    fullname: "Neptuo.Bootstrap.IBootstrapTask",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Bootstrap",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Bootstrap$IBootstrapTask);
var Neptuo$Bootstrap$Constraints$IgnoreAutomaticConstraintAttribute = {
    fullname: "Neptuo.Bootstrap.Constraints.IgnoreAutomaticConstraintAttribute",
    baseTypeName: "Neptuo.Bootstrap.Constraints.ConstraintAttribute",
    assemblyName: "Neptuo.Bootstrap",
    interfaceNames: ["Neptuo.Bootstrap.Constraints.IBootstrapConstraint"],
    Kind: "Class",
    definition: {
        ctor: function (){
            Neptuo.Bootstrap.Constraints.ConstraintAttribute.ctor.call(this);
        },
        IsSatisfied: function (task, context){
            return !(Is(context.get_Bootstrapper(), Neptuo.Bootstrap.AutomaticBootstrapper.ctor));
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Bootstrap$Constraints$IgnoreAutomaticConstraintAttribute);
var Neptuo$Bootstrap$ManualBootstrapper = {
    fullname: "Neptuo.Bootstrap.ManualBootstrapper",
    baseTypeName: "Neptuo.Bootstrap.BootstrapperBase",
    assemblyName: "Neptuo.Bootstrap",
    interfaceNames: ["Neptuo.Bootstrap.IBootstrapper", "Neptuo.Bootstrap.IBootstrapTaskRegistry"],
    Kind: "Class",
    definition: {
        ctor: function (factory){
            Neptuo.Bootstrap.BootstrapperBase.ctor.call(this, factory, null);
        },
        Register$$Type: function (type){
            this.Register$$IBootstrapTask(this.CreateInstance$$Type(type));
        },
        Register$1: function (T){
            this.Register$$Type(Typeof(T));
        },
        Register$$IBootstrapTask: function (task){
            if (task != null)
                this.get_Tasks().Add(task);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Func"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Bootstrap$ManualBootstrapper);
var Neptuo$Bootstrap$VersionInfo = {
    fullname: "Neptuo.Bootstrap.VersionInfo",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.Bootstrap.VersionInfo.Version = "3.4.0";
        },
        GetVersion: function (){
            return new System.Version.ctor$$String("3.4.0");
        }
    },
    assemblyName: "Neptuo.Bootstrap",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Bootstrap$VersionInfo);
var Neptuo$Bootstrap$ProxyBootstrapTask = {
    fullname: "Neptuo.Bootstrap.ProxyBootstrapTask",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Bootstrap",
    customAttributes: [{
        targetType: "type",
        typeName: "Neptuo.Bootstrap.Constraints.IgnoreAutomaticConstraintAttribute",
        ctorName: "ctor"
    }
    ],
    interfaceNames: ["Neptuo.Bootstrap.IBootstrapTask"],
    Kind: "Class",
    definition: {
        ctor: function (factory){
            this.factory = null;
            System.Object.ctor.call(this);
            if (System.MulticastDelegate.op_Equality$$MulticastDelegate$$MulticastDelegate(factory, null))
                throw $CreateException(new System.ArgumentNullException.ctor$$String("factory"), new Error());
            this.factory = factory;
        },
        Initialize: function (){
            var task = this.factory();
            if (task != null)
                task.Initialize();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Func"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Bootstrap$ProxyBootstrapTask);
var Neptuo$Bootstrap$SequenceBootstrapper = {
    fullname: "Neptuo.Bootstrap.SequenceBootstrapper",
    baseTypeName: "Neptuo.Bootstrap.ManualBootstrapper",
    assemblyName: "Neptuo.Bootstrap",
    Kind: "Class",
    definition: {
        ctor: function (factory){
            Neptuo.Bootstrap.ManualBootstrapper.ctor.call(this, factory);
        },
        Register$$Type: function (type){
            Neptuo.Bootstrap.ManualBootstrapper.commonPrototype.Register$$IBootstrapTask.call(this, new Neptuo.Bootstrap.ProxyBootstrapTask.ctor($CreateAnonymousDelegate(this, function (){
                return this.CreateInstance$$Type(type);
            })));
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Func"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Bootstrap$SequenceBootstrapper);

