/* Generated by SharpKit 5 v5.3.6 */
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}

if (typeof($CreateDelegate)=='undefined'){
    if(typeof($iKey)=='undefined') var $iKey = 0;
    if(typeof($pKey)=='undefined') var $pKey = String.fromCharCode(1);
    var $CreateDelegate = function(target, func){
        if (target == null || func == null) 
            return func;
        if(func.target==target && func.func==func)
            return func;
        if (target.$delegateCache == null)
            target.$delegateCache = {};
        if (func.$key == null)
            func.$key = $pKey + String(++$iKey);
        var delegate;
        if(target.$delegateCache!=null)
            delegate = target.$delegateCache[func.$key];
        if (delegate == null){
            delegate = function(){
                return func.apply(target, arguments);
            };
            delegate.func = func;
            delegate.target = target;
            delegate.isDelegate = true;
            if(target.$delegateCache!=null)
                target.$delegateCache[func.$key] = delegate;
        }
        return delegate;
    }
}

function $CombineDelegates(del1,del2)
{
    if(del1 == null)
        return del2;
    if(del2 == null)
        return del1;
    var del=$CreateMulticastDelegateFunction();
    del.delegates = [];
    if(del1.isMulticastDelegate)
    {
        for(var i=0;i < del1.delegates.length;i++)
            del.delegates.push(del1.delegates[i]);
    }
    else
    {
        del.delegates.push(del1);
    }
    if(del2.isMulticastDelegate)
    {
        for(var i=0;i < del2.delegates.length;i++)
            del.delegates.push(del2.delegates[i]);
    }
    else
    {
        del.delegates.push(del2);
    }
    return del;
};

function $CreateMulticastDelegateFunction()
{
    var del2 = null;
    
    var del=function()
    {
        var x=undefined;
        for(var i=0;i < del2.delegates.length;i++)
        {
            var del3=del2.delegates[i];
            x = del3.apply(null,arguments);
        }
        return x;
    };
    del.isMulticastDelegate = true;
    del2 = del;   
    
    return del;
};

function $RemoveDelegate(delOriginal,delToRemove)
{
    if(delToRemove == null || delOriginal == null)
        return delOriginal;
    if(delOriginal.isMulticastDelegate)
    {
        if(delToRemove.isMulticastDelegate)
            throw new Error("Multicast to multicast delegate removal is not implemented yet");
        var del=$CreateMulticastDelegateFunction();
        for(var i=0;i < delOriginal.delegates.length;i++)
        {
            var del2=delOriginal.delegates[i];
            if(del2 != delToRemove)
            {
                if(del.delegates == null)
                    del.delegates = [];
                del.delegates.push(del2);
            }
        }
        if(del.delegates == null)
            return null;
        if(del.delegates.length == 1)
            return del.delegates[0];
        return del;
    }
    else
    {
        if(delToRemove.isMulticastDelegate)
            throw new Error("single to multicast delegate removal is not supported");
        if(delOriginal == delToRemove)
            return null;
        return delOriginal;
    }
};

if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}


if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var Neptuo$Commands$CommandDispatcherException = {
    fullname: "Neptuo.Commands.CommandDispatcherException",
    baseTypeName: "Neptuo.Commands.CommandException",
    assemblyName: "Neptuo.Commands",
    Kind: "Class",
    definition: {
        ctor$$String$$Exception: function (message, inner){
            Neptuo.Commands.CommandException.ctor$$String$$Exception.call(this, message, inner);
        },
        ctor$$SerializationInfo$$StreamingContext: function (info, context){
            Neptuo.Commands.CommandException.ctor$$SerializationInfo$$StreamingContext.call(this, info, context);
        }
    },
    ctors: [{
        name: "ctor$$String$$Exception",
        parameters: ["System.String", "System.Exception"]
    }, {
        name: "ctor$$SerializationInfo$$StreamingContext",
        parameters: ["System.Runtime.Serialization.SerializationInfo", "System.Runtime.Serialization.StreamingContext"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Commands$CommandDispatcherException);
var Neptuo$Commands$CommandException = {
    fullname: "Neptuo.Commands.CommandException",
    baseTypeName: "System.Exception",
    assemblyName: "Neptuo.Commands",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Exception.ctor.call(this);
        },
        ctor$$String: function (message){
            System.Exception.ctor$$String.call(this, message);
        },
        ctor$$String$$Exception: function (message, inner){
            System.Exception.ctor$$String$$Exception.call(this, message, inner);
        },
        ctor$$SerializationInfo$$StreamingContext: function (info, context){
            System.Exception.ctor$$SerializationInfo$$StreamingContext.call(this, info, context);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }, {
        name: "ctor$$String",
        parameters: ["System.String"]
    }, {
        name: "ctor$$String$$Exception",
        parameters: ["System.String", "System.Exception"]
    }, {
        name: "ctor$$SerializationInfo$$StreamingContext",
        parameters: ["System.Runtime.Serialization.SerializationInfo", "System.Runtime.Serialization.StreamingContext"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Commands$CommandException);
var Neptuo$Commands$DependencyCommandDispatcher = {
    fullname: "Neptuo.Commands.DependencyCommandDispatcher",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Commands",
    interfaceNames: ["Neptuo.Commands.ICommandDispatcher"],
    Kind: "Class",
    definition: {
        ctor: function (dependencyProvider, eventDispatcher){
            this.dependencyProvider = null;
            this.eventDispatcher = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(dependencyProvider, "dependencyProvider");
            Neptuo.Guard.NotNull$$Object$$String(eventDispatcher, "eventDispatcher");
            this.dependencyProvider = dependencyProvider;
            this.eventDispatcher = eventDispatcher;
        },
        Handle: function (command){
            Neptuo.Guard.NotNull$$Object$$String(command, "command");
            this.HandleInternal(command, true);
        },
        HandleInternal: function (command, handleException){
            var executor = null;
            try{
                var executorFactory = Neptuo.DependencyProviderExtensions.Resolve$1$$IDependencyProvider(Neptuo.Commands.Execution.ICommandExecutorFactory.ctor, this.dependencyProvider);
                executor = executorFactory.CreateExecutor(command);
                executor.add_OnCommandHandled($CreateDelegate(this, this.OnCommandHandled));
                executor.Handle(command);
            }
            catch(e){
                if (handleException){
                    this.HandleException(e);
                    return;
                }
                var commandException = As(command, System.Exception.ctor);
                if (commandException != null)
                    throw $CreateException(new Neptuo.Commands.CommandDispatcherException.ctor$$String$$Exception("Unahandled exception during command execution.", commandException), new Error());
                throw $CreateException(new Neptuo.Commands.CommandDispatcherException.ctor$$String$$Exception("Unahandled exception during command execution.", e), new Error());
            }
            finally{
                var disposable = As(executor, System.IDisposable.ctor);
                if (disposable != null)
                    disposable.Dispose();
            }
        },
        OnCommandHandled: function (executor, command){
            executor.remove_OnCommandHandled($CreateDelegate(this, this.OnCommandHandled));
            var guidCommand = As(command, Neptuo.Commands.ICommand.ctor);
            if (guidCommand != null)
                this.eventDispatcher.Publish$1(Neptuo.Commands.Events.CommandHandled.ctor, new Neptuo.Commands.Events.CommandHandled.ctor$$ICommand(guidCommand));
            else
                this.eventDispatcher.Publish$1(Neptuo.Commands.Events.CommandHandled.ctor, new Neptuo.Commands.Events.CommandHandled.ctor$$Object(command));
        },
        HandleException: function (exception){
            Neptuo.Guard.NotNull$$Object$$String(exception, "exception");
            this.HandleInternal(exception, false);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.IDependencyProvider", "Neptuo.Events.IEventDispatcher"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Commands$DependencyCommandDispatcher);
var Neptuo$Commands$Events$Handlers$CommandHandlerFactory = {
    fullname: "Neptuo.Commands.Events.Handlers.CommandHandlerFactory",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Commands",
    interfaceNames: ["Neptuo.Events.Handlers.IEventHandlerFactory$1"],
    Kind: "Class",
    definition: {
        ctor: function (command, innerFactory){
            this.command = null;
            this.innerFactory = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(command, "command");
            Neptuo.Guard.NotNull$$Object$$String(innerFactory, "innerFactory");
            this.command = command;
            this.innerFactory = innerFactory;
        },
        CreateHandler: function (eventData, currentManager){
            if (eventData.get_Command() == this.command){
                currentManager.UnSubscribe$1$$IEventHandlerFactory$1(Neptuo.Commands.Events.CommandHandled.ctor, this);
                return this.innerFactory.CreateHandler(eventData, currentManager);
            }
            return null;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Object", "Neptuo.Events.Handlers.IEventHandlerFactory"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Commands$Events$Handlers$CommandHandlerFactory);
var Neptuo$Commands$Execution$IPoolCommandExecutorContext = {
    fullname: "Neptuo.Commands.Execution.IPoolCommandExecutorContext",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Commands",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Commands$Execution$IPoolCommandExecutorContext);
var Neptuo$Commands$Interception$AttributeInterceptorProvider = {
    fullname: "Neptuo.Commands.Interception.AttributeInterceptorProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Commands",
    interfaceNames: ["Neptuo.Commands.Interception.IInterceptorProvider"],
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        GetInterceptors: function (commandHandler, command, commandHandlerMethod){
            Neptuo.Guard.NotNull$$Object$$String(commandHandler, "commandHandler");
            var result = new System.Collections.Generic.List$1.ctor(Neptuo.Commands.Interception.IDecoratedInvoke.ctor);
            this.AppendInterceptors(commandHandler.GetType(), result);
            this.AppendInterceptors(commandHandlerMethod, result);
            return result;
        },
        AppendInterceptors: function (source, result){
            var $it1 = source.GetCustomAttributes$$Boolean(true).GetEnumerator();
            while ($it1.MoveNext()){
                var attribute = $it1.get_Current();
                var interceptor = As(attribute, Neptuo.Commands.Interception.IDecoratedInvoke.ctor);
                if (interceptor != null)
                    result.Add(interceptor);
            }
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Commands$Interception$AttributeInterceptorProvider);
var Neptuo$Commands$Execution$CommandExecutorException = {
    fullname: "Neptuo.Commands.Execution.CommandExecutorException",
    baseTypeName: "Neptuo.Commands.CommandException",
    assemblyName: "Neptuo.Commands",
    Kind: "Class",
    definition: {
        ctor: function (){
            Neptuo.Commands.CommandException.ctor.call(this);
        },
        ctor$$String: function (message){
            Neptuo.Commands.CommandException.ctor$$String.call(this, message);
        },
        ctor$$String$$Exception: function (message, inner){
            Neptuo.Commands.CommandException.ctor$$String$$Exception.call(this, message, inner);
        },
        ctor$$SerializationInfo$$StreamingContext: function (info, context){
            Neptuo.Commands.CommandException.ctor$$SerializationInfo$$StreamingContext.call(this, info, context);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }, {
        name: "ctor$$String",
        parameters: ["System.String"]
    }, {
        name: "ctor$$String$$Exception",
        parameters: ["System.String", "System.Exception"]
    }, {
        name: "ctor$$SerializationInfo$$StreamingContext",
        parameters: ["System.Runtime.Serialization.SerializationInfo", "System.Runtime.Serialization.StreamingContext"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Commands$Execution$CommandExecutorException);
var Neptuo$Commands$Execution$DependencyCommandExecutorFactory = {
    fullname: "Neptuo.Commands.Execution.DependencyCommandExecutorFactory",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Commands",
    interfaceNames: ["Neptuo.Commands.Execution.ICommandExecutorFactory"],
    Kind: "Class",
    definition: {
        ctor$$IDependencyProvider: function (dependencyProvider){
            this.dependencyProvider = null;
            this.interceptorProvider = null;
            Neptuo.Commands.Execution.DependencyCommandExecutorFactory.ctor$$IDependencyProvider$$IInterceptorProvider.call(this, dependencyProvider, new Neptuo.Commands.Interception.ManualInterceptorProvider.ctor(dependencyProvider));
        },
        ctor$$IDependencyProvider$$IInterceptorProvider: function (dependencyProvider, interceptorProvider){
            this.dependencyProvider = null;
            this.interceptorProvider = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(dependencyProvider, "dependencyProvider");
            Neptuo.Guard.NotNull$$Object$$String(interceptorProvider, "interceptorProvider");
            this.dependencyProvider = dependencyProvider;
            this.interceptorProvider = interceptorProvider;
        },
        CreateExecutor: function (command){
            return new Neptuo.Commands.Execution.DependencyCommandExecutor.ctor(this.dependencyProvider, this.interceptorProvider);
        }
    },
    ctors: [{
        name: "ctor$$IDependencyProvider",
        parameters: ["Neptuo.IDependencyProvider"]
    }, {
        name: "ctor$$IDependencyProvider$$IInterceptorProvider",
        parameters: ["Neptuo.IDependencyProvider", "Neptuo.Commands.Interception.IInterceptorProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Commands$Execution$DependencyCommandExecutorFactory);
var Neptuo$Commands$Execution$DispatchingCommandExecutorFactory = {
    fullname: "Neptuo.Commands.Execution.DispatchingCommandExecutorFactory",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Commands",
    interfaceNames: ["Neptuo.Commands.Execution.ICommandExecutorFactory"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.OnSearchFactory = null;
            this._Factories = null;
            System.Object.ctor.call(this);
            this.set_Factories(new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, Neptuo.Commands.Execution.ICommandExecutorFactory.ctor));
        },
        Factories$$: "System.Collections.Generic.Dictionary`2[[System.Type],[Neptuo.Commands.Execution.ICommandExecutorFactory]]",
        get_Factories: function (){
            return this._Factories;
        },
        set_Factories: function (value){
            this._Factories = value;
        },
        AddFactory: function (commandType, factory){
            Neptuo.Guard.NotNull$$Object$$String(commandType, "commandType");
            Neptuo.Guard.NotNull$$Object$$String(factory, "factory");
            this.get_Factories().set_Item$$TKey(commandType, factory);
            return this;
        },
        CreateExecutor: function (command){
            Neptuo.Guard.NotNull$$Object$$String(command, "command");
            var commandType = command.GetType();
            var factory;
            if ((function (){
                var $1 = {
                    Value: factory
                };
                var $res = this.get_Factories().TryGetValue(commandType, $1);
                factory = $1.Value;
                return $res;
            }).call(this))
                return factory.CreateExecutor(command);
            if (System.MulticastDelegate.op_Inequality$$MulticastDelegate$$MulticastDelegate(this.OnSearchFactory, null)){
                factory = this.OnSearchFactory(command);
                if (factory != null)
                    return factory.CreateExecutor(command);
            }
            throw $CreateException(new Neptuo.Commands.Execution.CommandExecutorException.ctor$$String(System.String.Format$$String$$Object("Unnable to find factory for command of type \'{0}\'.", commandType.get_FullName())), new Error());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Commands$Execution$DispatchingCommandExecutorFactory);
var Neptuo$Commands$Execution$ICommandHandlerAware = {
    fullname: "Neptuo.Commands.Execution.ICommandHandlerAware",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Commands",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Commands$Execution$ICommandHandlerAware);
var Neptuo$Commands$Execution$PoolCommandExecutor = {
    fullname: "Neptuo.Commands.Execution.PoolCommandExecutor",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Commands",
    interfaceNames: ["Neptuo.Commands.Execution.ICommandExecutor"],
    Kind: "Class",
    definition: {
        ctor: function (poolContext){
            this.OnCommandHandled = null;
            this._PoolContext = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(poolContext, "poolContext");
            this.set_PoolContext(poolContext);
        },
        PoolContext$$: "Neptuo.Commands.Execution.IPoolCommandExecutorContext",
        get_PoolContext: function (){
            return this._PoolContext;
        },
        set_PoolContext: function (value){
            this._PoolContext = value;
        },
        add_OnCommandHandled: function (value){
            this.OnCommandHandled = $CombineDelegates(this.OnCommandHandled, value);
        },
        remove_OnCommandHandled: function (value){
            this.OnCommandHandled = $RemoveDelegate(this.OnCommandHandled, value);
        },
        Handle: function (command){
            this.get_PoolContext().AddCommand(command);
            this.HandleCommandIfPossible();
        },
        HandleCommandIfPossible: function (){
            if (this.get_PoolContext().get_IsNextAvailable()){
                this.get_PoolContext().ExecuteLocked($CreateAnonymousDelegate(this, function (){
                    if (this.get_PoolContext().get_IsNextAvailable()){
                        var command = this.get_PoolContext().NextCommand();
                        var executor = this.get_PoolContext().CreateInnerExecutor(command);
                        executor.add_OnCommandHandled($CreateDelegate(this, this.OnExecutorCommandHandled));
                        this.DoHandleCommand(executor, command);
                    }
                }));
            }
        },
        DoHandleCommand: function (executor, command){
            executor.Handle(command);
        },
        OnExecutorCommandHandled: function (executor, command){
            if (System.MulticastDelegate.op_Inequality$$MulticastDelegate$$MulticastDelegate(this.OnCommandHandled, null))
                this.OnCommandHandled(this, command);
            this.get_PoolContext().RemoveDoneExecutor(executor);
            this.HandleCommandIfPossible();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Commands.Execution.IPoolCommandExecutorContext"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Commands$Execution$PoolCommandExecutor);
var Neptuo$Commands$Execution$PoolCommandExecutorFactory = {
    fullname: "Neptuo.Commands.Execution.PoolCommandExecutorFactory",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Commands",
    interfaceNames: ["Neptuo.Commands.Execution.ICommandExecutorFactory", "Neptuo.Commands.Execution.IPoolCommandExecutorContext"],
    Kind: "Class",
    definition: {
        ctor$$ICommandExecutorFactory$$Boolean: function (innerFactory, isUseLocking){
            this._CommandQueue = null;
            this._PoolSize = null;
            this._InnerFactory = null;
            this._InnerExecutors = null;
            this._IsUseLocking = false;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(innerFactory, "innerFactory");
            this.set_PoolSize(null);
            this.set_InnerFactory(innerFactory);
            this.set_CommandQueue(new System.Collections.Generic.Queue$1.ctor(System.Object.ctor));
            this.set_InnerExecutors(new System.Collections.Generic.HashSet$1.ctor(Neptuo.Commands.Execution.ICommandExecutor.ctor));
            this.set_IsUseLocking(isUseLocking);
        },
        CommandQueue$$: "System.Collections.Generic.Queue`1[[System.Object]]",
        get_CommandQueue: function (){
            return this._CommandQueue;
        },
        set_CommandQueue: function (value){
            this._CommandQueue = value;
        },
        PoolSize$$: "System.Nullable`1[[System.Int32]]",
        get_PoolSize: function (){
            return this._PoolSize;
        },
        set_PoolSize: function (value){
            this._PoolSize = value;
        },
        InnerFactory$$: "Neptuo.Commands.Execution.ICommandExecutorFactory",
        get_InnerFactory: function (){
            return this._InnerFactory;
        },
        set_InnerFactory: function (value){
            this._InnerFactory = value;
        },
        InnerExecutors$$: "System.Collections.Generic.HashSet`1[[Neptuo.Commands.Execution.ICommandExecutor]]",
        get_InnerExecutors: function (){
            return this._InnerExecutors;
        },
        set_InnerExecutors: function (value){
            this._InnerExecutors = value;
        },
        IsUseLocking$$: "System.Boolean",
        get_IsUseLocking: function (){
            return this._IsUseLocking;
        },
        set_IsUseLocking: function (value){
            this._IsUseLocking = value;
        },
        HasNextCommand$$: "System.Boolean",
        get_HasNextCommand: function (){
            return this.get_CommandQueue().get_Count() > 0;
        },
        ctor$$Int32$$ICommandExecutorFactory$$Boolean: function (poolSize, innerFactory, isUseLocking){
            this._CommandQueue = null;
            this._PoolSize = null;
            this._InnerFactory = null;
            this._InnerExecutors = null;
            this._IsUseLocking = false;
            Neptuo.Commands.Execution.PoolCommandExecutorFactory.ctor$$ICommandExecutorFactory$$Boolean.call(this, innerFactory, isUseLocking);
            Neptuo.Guard.Positive(poolSize, "poolSize");
            this.set_PoolSize(poolSize);
        },
        CreateExecutor: function (command){
            return this.CreatePoolExecutor(command);
        },
        CreatePoolExecutor: function (command){
            return new Neptuo.Commands.Execution.PoolCommandExecutor.ctor(this);
        },
        IsNextAvailable$$: "System.Boolean",
        get_IsNextAvailable: function (){
            var hasCommands = this.get_HasNextCommand();
            if (this.get_PoolSize() == null)
                return hasCommands;
            return this.get_InnerExecutors().get_Count() < this.get_PoolSize() && hasCommands;
        },
        AddCommand: function (command){
            Neptuo.Guard.NotNull$$Object$$String(command, "command");
            this.get_CommandQueue().Enqueue(command);
        },
        NextCommand: function (){
            if (!this.get_HasNextCommand())
                throw $CreateException(new System.InvalidOperationException.ctor$$String("Command queue is empty."), new Error());
            return this.get_CommandQueue().Dequeue();
        },
        CreateInnerExecutor: function (command){
            var executor = this.get_InnerFactory().CreateExecutor(command);
            this.get_InnerExecutors().Add(executor);
            return executor;
        },
        RemoveDoneExecutor: function (executor){
            this.get_InnerExecutors().Remove(executor);
        },
        ExecuteLocked: function (action){
            Neptuo.Guard.NotNull$$Object$$String(action, "action");
            if (this.get_IsUseLocking()){
                action();
            }
            else {
                action();
            }
        }
    },
    ctors: [{
        name: "ctor$$ICommandExecutorFactory$$Boolean",
        parameters: ["Neptuo.Commands.Execution.ICommandExecutorFactory", "System.Boolean"]
    }, {
        name: "ctor$$Int32$$ICommandExecutorFactory$$Boolean",
        parameters: ["System.Int32", "Neptuo.Commands.Execution.ICommandExecutorFactory", "System.Boolean"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Commands$Execution$PoolCommandExecutorFactory);
var Neptuo$Commands$Execution$ThreadPoolCommandExecutor = {
    fullname: "Neptuo.Commands.Execution.ThreadPoolCommandExecutor",
    baseTypeName: "Neptuo.Commands.Execution.PoolCommandExecutor",
    assemblyName: "Neptuo.Commands",
    Kind: "Class",
    definition: {
        ctor: function (poolFactory){
            Neptuo.Commands.Execution.PoolCommandExecutor.ctor.call(this, poolFactory);
        },
        DoHandleCommand: function (executor, command){
            var thread = new System.Threading.Thread.ctor$$ParameterizedThreadStart($CreateDelegate(executor, executor.Handle));
            thread.Start$$Object(command);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Commands.Execution.ThreadPoolCommandExecutorFactory"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Commands$Execution$ThreadPoolCommandExecutor);
var Neptuo$Commands$Execution$ThreadPoolCommandExecutorFactory = {
    fullname: "Neptuo.Commands.Execution.ThreadPoolCommandExecutorFactory",
    baseTypeName: "Neptuo.Commands.Execution.PoolCommandExecutorFactory",
    assemblyName: "Neptuo.Commands",
    Kind: "Class",
    definition: {
        ctor$$ICommandExecutorFactory: function (innerFactory){
            Neptuo.Commands.Execution.PoolCommandExecutorFactory.ctor$$ICommandExecutorFactory$$Boolean.call(this, innerFactory, true);
        },
        ctor$$Int32$$ICommandExecutorFactory: function (poolSize, innerFactory){
            Neptuo.Commands.Execution.PoolCommandExecutorFactory.ctor$$Int32$$ICommandExecutorFactory$$Boolean.call(this, poolSize, innerFactory, true);
        },
        CreatePoolExecutor: function (command){
            return new Neptuo.Commands.Execution.ThreadPoolCommandExecutor.ctor(this);
        }
    },
    ctors: [{
        name: "ctor$$ICommandExecutorFactory",
        parameters: ["Neptuo.Commands.Execution.ICommandExecutorFactory"]
    }, {
        name: "ctor$$Int32$$ICommandExecutorFactory",
        parameters: ["System.Int32", "Neptuo.Commands.Execution.ICommandExecutorFactory"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Commands$Execution$ThreadPoolCommandExecutorFactory);
var Neptuo$Commands$Handlers$ICommandHandler$1 = {
    fullname: "Neptuo.Commands.Handlers.ICommandHandler$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Commands",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Commands$Handlers$ICommandHandler$1);
var Neptuo$Commands$ICommand = {
    fullname: "Neptuo.Commands.ICommand",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Commands",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Commands$ICommand);
var Neptuo$Commands$ICommandDispatcher = {
    fullname: "Neptuo.Commands.ICommandDispatcher",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Commands",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Commands$ICommandDispatcher);
var Neptuo$Commands$Events$CommandHandled = {
    fullname: "Neptuo.Commands.Events.CommandHandled",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Commands",
    Kind: "Class",
    definition: {
        ctor$$String$$Object: function (commandGuid, command){
            this._CommandGuid = null;
            this._Command = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNullOrEmpty(commandGuid, "commandGuid");
            Neptuo.Guard.NotNull$$Object$$String(command, "command");
            this.set_CommandGuid(commandGuid);
            this.set_Command(command);
        },
        CommandGuid$$: "System.String",
        get_CommandGuid: function (){
            return this._CommandGuid;
        },
        set_CommandGuid: function (value){
            this._CommandGuid = value;
        },
        Command$$: "System.Object",
        get_Command: function (){
            return this._Command;
        },
        set_Command: function (value){
            this._Command = value;
        },
        ctor$$Object: function (command){
            this._CommandGuid = null;
            this._Command = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(command, "command");
            this.set_Command(command);
        },
        ctor$$ICommand: function (command){
            this._CommandGuid = null;
            this._Command = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(command, "command");
            this.set_CommandGuid(command.get_Guid());
            this.set_Command(command);
        }
    },
    ctors: [{
        name: "ctor$$String$$Object",
        parameters: ["System.String", "System.Object"]
    }, {
        name: "ctor$$Object",
        parameters: ["System.Object"]
    }, {
        name: "ctor$$ICommand",
        parameters: ["Neptuo.Commands.ICommand"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Commands$Events$CommandHandled);
var Neptuo$Commands$Execution$ICommandExecutor = {
    fullname: "Neptuo.Commands.Execution.ICommandExecutor",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Commands",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Commands$Execution$ICommandExecutor);
var Neptuo$Commands$Execution$ICommandExecutorFactory = {
    fullname: "Neptuo.Commands.Execution.ICommandExecutorFactory",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Commands",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Commands$Execution$ICommandExecutorFactory);
var Neptuo$Commands$Interception$DiscardExceptionAttribute = {
    fullname: "Neptuo.Commands.Interception.DiscardExceptionAttribute",
    baseTypeName: "System.Attribute",
    assemblyName: "Neptuo.Commands",
    interfaceNames: ["Neptuo.Commands.Interception.IDecoratedInvoke"],
    Kind: "Class",
    definition: {
        ctor: function (execeptions){
            this._Exceptions = null;
            System.Attribute.ctor.call(this);
            this.set_Exceptions((execeptions != null ? execeptions : System.Linq.Enumerable.Empty$1(System.Type.ctor)));
        },
        Exceptions$$: "System.Collections.Generic.IEnumerable`1[[System.Type]]",
        get_Exceptions: function (){
            return this._Exceptions;
        },
        set_Exceptions: function (value){
            this._Exceptions = value;
        },
        OnInvoke: function (context){
            context.Next();
            if (context.get_Exception() != null && System.Linq.Enumerable.Contains$1$$IEnumerable$1$$TSource(System.Type.ctor, this.get_Exceptions(), context.get_Exception().GetType()))
                context.set_Exception(null);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Type[]"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Commands$Interception$DiscardExceptionAttribute);
var Neptuo$Commands$Interception$IDecoratedInvoke = {
    fullname: "Neptuo.Commands.Interception.IDecoratedInvoke",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Commands",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Commands$Interception$IDecoratedInvoke);
var Neptuo$Commands$Interception$IDecoratedInvokeContext = {
    fullname: "Neptuo.Commands.Interception.IDecoratedInvokeContext",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Commands",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Commands$Interception$IDecoratedInvokeContext);
var Neptuo$Commands$Execution$InterceptorExectionContext = {
    fullname: "Neptuo.Commands.Execution.InterceptorExectionContext",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Commands",
    interfaceNames: ["Neptuo.Commands.Interception.IDecoratedInvokeContext", "Neptuo.Commands.Execution.ICommandHandlerAware"],
    Kind: "Class",
    definition: {
        ctor: function (interceptors, commandHandler, command){
            this._Interceptors = null;
            this._InterceptorEnumerator = null;
            this._CommandHandler = null;
            this._Command = null;
            this._Exception = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(interceptors, "interceptors");
            Neptuo.Guard.NotNull$$Object$$String(commandHandler, "commandHandler");
            Neptuo.Guard.NotNull$$Object$$String(command, "command");
            this.set_Interceptors(interceptors);
            this.set_InterceptorEnumerator(interceptors.GetEnumerator());
            this.set_CommandHandler(commandHandler);
            this.set_Command(command);
        },
        Interceptors$$: "System.Collections.Generic.IEnumerable`1[[Neptuo.Commands.Interception.IDecoratedInvoke]]",
        get_Interceptors: function (){
            return this._Interceptors;
        },
        set_Interceptors: function (value){
            this._Interceptors = value;
        },
        InterceptorEnumerator$$: "System.Collections.Generic.IEnumerator`1[[Neptuo.Commands.Interception.IDecoratedInvoke]]",
        get_InterceptorEnumerator: function (){
            return this._InterceptorEnumerator;
        },
        set_InterceptorEnumerator: function (value){
            this._InterceptorEnumerator = value;
        },
        CommandHandler$$: "System.Object",
        get_CommandHandler: function (){
            return this._CommandHandler;
        },
        set_CommandHandler: function (value){
            this._CommandHandler = value;
        },
        Command$$: "System.Object",
        get_Command: function (){
            return this._Command;
        },
        set_Command: function (value){
            this._Command = value;
        },
        Exception$$: "System.Exception",
        get_Exception: function (){
            return this._Exception;
        },
        set_Exception: function (value){
            this._Exception = value;
        },
        Next: function (){
            if (this.get_InterceptorEnumerator().MoveNext())
                this.get_InterceptorEnumerator().get_Current().OnInvoke(this);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Collections.Generic.IEnumerable", "System.Object", "System.Object"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Commands$Execution$InterceptorExectionContext);
var Neptuo$Commands$Interception$IInterceptorProvider = {
    fullname: "Neptuo.Commands.Interception.IInterceptorProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Commands",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Commands$Interception$IInterceptorProvider);
var Neptuo$Commands$Interception$ManualInterceptorProvider = {
    fullname: "Neptuo.Commands.Interception.ManualInterceptorProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.Commands",
    interfaceNames: ["Neptuo.Commands.Interception.IInterceptorProvider"],
    Kind: "Class",
    definition: {
        ctor: function (dependencyProvider){
            this.dependencyProvider = null;
            this._Storage = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(dependencyProvider, "dependencyProvider");
            this.dependencyProvider = dependencyProvider;
            this.set_Storage(new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, System.Collections.Generic.List$1.ctor));
        },
        Storage$$: "System.Collections.Generic.Dictionary`2[[System.Type],[System.Collections.Generic.List`1[[System.Func`2[[Neptuo.IDependencyProvider],[Neptuo.Commands.Interception.IDecoratedInvoke]]]]]]",
        get_Storage: function (){
            return this._Storage;
        },
        set_Storage: function (value){
            this._Storage = value;
        },
        AddInterceptorType: function (commandHandlerType, interceptorType){
            Neptuo.Guard.NotNull$$Object$$String(commandHandlerType, "commandHandlerType");
            Neptuo.Guard.NotNull$$Object$$String(interceptorType, "interceptorType");
            return this.AddInterceptorFactory(commandHandlerType, $CreateAnonymousDelegate(this, function (provider){
                return Cast(Neptuo.DependencyProviderExtensions.Resolve$$IDependencyProvider$$Type(provider, interceptorType), Neptuo.Commands.Interception.IDecoratedInvoke.ctor);
            }));
        },
        AddInterceptorFactory: function (commandHandlerType, factory){
            Neptuo.Guard.NotNull$$Object$$String(commandHandlerType, "commandHandlerType");
            Neptuo.Guard.NotNull$$Object$$String(factory, "factory");
            var interceptorTypes;
            if (!(function (){
                var $1 = {
                    Value: interceptorTypes
                };
                var $res = this.get_Storage().TryGetValue(commandHandlerType, $1);
                interceptorTypes = $1.Value;
                return $res;
            }).call(this))
                this.get_Storage().set_Item$$TKey(commandHandlerType, interceptorTypes = new System.Collections.Generic.List$1.ctor(System.Func$2.ctor));
            interceptorTypes.Add(factory);
            return this;
        },
        GetInterceptors: function (commandHandler, command, commandHandlerMethod){
            Neptuo.Guard.NotNull$$Object$$String(commandHandler, "commandHandler");
            var commandHandlerType = commandHandler.GetType();
            var interceptorFactories;
            if (!(function (){
                var $1 = {
                    Value: interceptorFactories
                };
                var $res = this.get_Storage().TryGetValue(commandHandlerType, $1);
                interceptorFactories = $1.Value;
                return $res;
            }).call(this))
                interceptorFactories = new System.Collections.Generic.List$1.ctor(System.Func$2.ctor);
            var result = new System.Collections.Generic.List$1.ctor(Neptuo.Commands.Interception.IDecoratedInvoke.ctor);
            var $it2 = interceptorFactories.GetEnumerator();
            while ($it2.MoveNext()){
                var interceptorFactory = $it2.get_Current();
                result.Add(interceptorFactory(this.dependencyProvider));
            }
            return result;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.IDependencyProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Commands$Interception$ManualInterceptorProvider);
var Neptuo$Commands$VersionInfo = {
    fullname: "Neptuo.Commands.VersionInfo",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.Commands.VersionInfo.Version = "0.1.0";
        },
        GetVersion: function (){
            return new System.Version.ctor$$String("0.1.0");
        }
    },
    assemblyName: "Neptuo.Commands",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Commands$VersionInfo);

