/* Generated by SharpKit 5 v5.4.4 */
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}

function $CombineDelegates(del1,del2)
{
    if(del1 == null)
        return del2;
    if(del2 == null)
        return del1;
    var del=$CreateMulticastDelegateFunction();
    del.delegates = [];
    if(del1.isMulticastDelegate)
    {
        for(var i=0;i < del1.delegates.length;i++)
            del.delegates.push(del1.delegates[i]);
    }
    else
    {
        del.delegates.push(del1);
    }
    if(del2.isMulticastDelegate)
    {
        for(var i=0;i < del2.delegates.length;i++)
            del.delegates.push(del2.delegates[i]);
    }
    else
    {
        del.delegates.push(del2);
    }
    return del;
};

function $CreateMulticastDelegateFunction()
{
    var del2 = null;
    
    var del=function()
    {
        var x=undefined;
        for(var i=0;i < del2.delegates.length;i++)
        {
            var del3=del2.delegates[i];
            x = del3.apply(null,arguments);
        }
        return x;
    };
    del.isMulticastDelegate = true;
    del2 = del;   
    
    return del;
};

function $RemoveDelegate(delOriginal,delToRemove)
{
    if(delToRemove == null || delOriginal == null)
        return delOriginal;
    if(delOriginal.isMulticastDelegate)
    {
        if(delToRemove.isMulticastDelegate)
            throw new Error("Multicast to multicast delegate removal is not implemented yet");
        var del=$CreateMulticastDelegateFunction();
        for(var i=0;i < delOriginal.delegates.length;i++)
        {
            var del2=delOriginal.delegates[i];
            if(del2 != delToRemove)
            {
                if(del.delegates == null)
                    del.delegates = [];
                del.delegates.push(del2);
            }
        }
        if(del.delegates == null)
            return null;
        if(del.delegates.length == 1)
            return del.delegates[0];
        return del;
    }
    else
    {
        if(delToRemove.isMulticastDelegate)
            throw new Error("single to multicast delegate removal is not supported");
        if(delOriginal == delToRemove)
            return null;
        return delOriginal;
    }
};

if (typeof($CreateDelegate)=='undefined'){
    if(typeof($iKey)=='undefined') var $iKey = 0;
    if(typeof($pKey)=='undefined') var $pKey = String.fromCharCode(1);
    var $CreateDelegate = function(target, func){
        if (target == null || func == null) 
            return func;
        if(func.target==target && func.func==func)
            return func;
        if (target.$delegateCache == null)
            target.$delegateCache = {};
        if (func.$key == null)
            func.$key = $pKey + String(++$iKey);
        var delegate;
        if(target.$delegateCache!=null)
            delegate = target.$delegateCache[func.$key];
        if (delegate == null){
            delegate = function(){
                return func.apply(target, arguments);
            };
            delegate.func = func;
            delegate.target = target;
            delegate.isDelegate = true;
            if(target.$delegateCache!=null)
                target.$delegateCache[func.$key] = delegate;
        }
        return delegate;
    }
}

if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}


if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var Neptuo$CodeDom$Compiler$CompilerService = {
    fullname: "Neptuo.CodeDom.Compiler.CompilerService",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (compiler){
            this.compiler = null;
            System.Object.ctor.call(this);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.CodeDom.Compiler.ICodeDomCompiler"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$CodeDom$Compiler$CompilerService);
var Neptuo$CodeDom$Compiler$ICodeDomCompiler = {
    fullname: "Neptuo.CodeDom.Compiler.ICodeDomCompiler",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$CodeDom$Compiler$ICodeDomCompiler);
var Neptuo$Collections$Generic$DictionaryExtensions = {
    fullname: "Neptuo.Collections.Generic.DictionaryExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        AddRange$2: function (TKey, TValue, target, source){
            var $it1 = source.GetEnumerator();
            while ($it1.MoveNext()){
                var item = $it1.get_Current();
                target.set_Item$$TKey(item.get_Key(), item.get_Value());
            }
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Collections$Generic$DictionaryExtensions);
var Neptuo$Collections$ObjectModel$IITemsSource = {
    fullname: "Neptuo.Collections.ObjectModel.IITemsSource",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["System.Collections.IEnumerable"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Collections$ObjectModel$IITemsSource);
var Neptuo$Collections$ObjectModel$DictionaryStringValueProvider = {
    fullname: "Neptuo.Collections.ObjectModel.DictionaryStringValueProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.IStringValueProvider$1"],
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        GetValue: function (model, key){
            if (model.ContainsKey(key))
                return model.get_Item$$TKey(key);
            return null;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Collections$ObjectModel$DictionaryStringValueProvider);
var Neptuo$Collections$Specialized$IKeyValueCollection = {
    fullname: "Neptuo.Collections.Specialized.IKeyValueCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Collections.Specialized.IReadOnlyKeyValueCollection"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Collections$Specialized$IKeyValueCollection);
var Neptuo$Collections$Specialized$IReadOnlyKeyValueCollection = {
    fullname: "Neptuo.Collections.Specialized.IReadOnlyKeyValueCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Collections$Specialized$IReadOnlyKeyValueCollection);
var Neptuo$Collections$Specialized$KeyValueCollection = {
    fullname: "Neptuo.Collections.Specialized.KeyValueCollection",
    baseTypeName: "System.Collections.Generic.Dictionary$2",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Collections.Specialized.IKeyValueCollection"],
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Collections.Generic.Dictionary$2.ctor.call(this, System.String.ctor, System.Object.ctor);
        },
        ctor$$Int32: function (capacity){
            System.Collections.Generic.Dictionary$2.ctor$$Int32.call(this, System.String.ctor, System.Object.ctor, capacity);
        },
        ctor$$IEqualityComparer$1$String: function (comparer){
            System.Collections.Generic.Dictionary$2.ctor$$IEqualityComparer$1.call(this, System.String.ctor, System.Object.ctor, comparer);
        },
        ctor$$IDictionary$2$String$Object: function (source){
            System.Collections.Generic.Dictionary$2.ctor$$IDictionary$2.call(this, System.String.ctor, System.Object.ctor, source);
        },
        Set: function (key, value){
            Neptuo.Guard.NotNull$$Object$$String(key, "key");
            this.set_Item$$TKey(key, value);
            return this;
        },
        TryGet$1: function (T, key, value){
            Neptuo.Guard.NotNull$$Object$$String(key, "key");
            var sourceValue;
            if ((function (){
                var $1 = {
                    Value: sourceValue
                };
                var $res = this.TryGetValue(key, $1);
                sourceValue = $1.Value;
                return $res;
            }).call(this) && sourceValue != null){
                if (Is(sourceValue, T)){
                    value.Value = Cast(sourceValue, T);
                    return true;
                }
                var targetValue;
                if ((function (){
                    var $1 = {
                        Value: targetValue
                    };
                    var $res = Neptuo.Converts.Try$$Type$$Type$$Object$$Object(sourceValue.GetType(), Typeof(T), sourceValue, $1);
                    targetValue = $1.Value;
                    return $res;
                }).call(this)){
                    value.Value = Cast(targetValue, T);
                    return true;
                }
            }
            value.Value = Default(T);
            return false;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }, {
        name: "ctor$$Int32",
        parameters: ["System.Int32"]
    }, {
        name: "ctor$$IEqualityComparer",
        parameters: ["System.Collections.Generic.IEqualityComparer"]
    }, {
        name: "ctor$$IDictionary",
        parameters: ["System.Collections.Generic.IDictionary"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Collections$Specialized$KeyValueCollection);
var Neptuo$Collections$Specialized$NameValueDictionary = {
    fullname: "Neptuo.Collections.Specialized.NameValueDictionary",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["System.Collections.Generic.IDictionary$2"],
    Kind: "Class",
    definition: {
        ctor: function (source){
            this.source = null;
            this.allValues = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(source, "source");
            this.source = source;
        },
        Add$$String$$String: function (key, value){
            Neptuo.Guard.NotNull$$Object$$String(key, "key");
            if (this.ContainsKey(key))
                throw $CreateException(Neptuo._GuardArgumentExtensions.Argument(Neptuo.Guard.Exception, "key", "Collection already contains it with key \'{0}\'.", key), new Error());
            this.source.set_Item$$String(key, value);
        },
        ContainsKey: function (key){
            Neptuo.Guard.NotNull$$Object$$String(key, "key");
            return System.Linq.Enumerable.Contains$1$$IEnumerable$1$$TSource(System.String.ctor, this.source.get_AllKeys(), key);
        },
        Keys$$: "System.Collections.Generic.ICollection`1[[System.String]]",
        get_Keys: function (){
            return this.source.get_AllKeys();
        },
        Remove$$String: function (key){
            Neptuo.Guard.NotNull$$Object$$String(key, "key");
            if (this.ContainsKey(key)){
                this.source.Remove(key);
                return true;
            }
            return false;
        },
        TryGetValue: function (key, value){
            if (this.ContainsKey(key)){
                value.Value = this.source.get_Item$$String(key);
                return true;
            }
            value.Value = null;
            return false;
        },
        Values$$: "System.Collections.Generic.ICollection`1[[System.String]]",
        get_Values: function (){
            if (this.allValues == null){
                this.allValues = new System.Collections.Generic.List$1.ctor(System.String.ctor);
                var $it2 = this.source.get_AllKeys().GetEnumerator();
                while ($it2.MoveNext()){
                    var key = $it2.get_Current();
                    this.allValues.Add(this.source.get_Item$$String(key));
                }
            }
            return this.allValues;
        },
        Item$$: "System.String",
        get_Item$$String: function (key){
            Neptuo.Guard.NotNullOrEmpty(key, "key");
            return this.source.get_Item$$String(key);
        },
        set_Item$$String: function (key, value){
            Neptuo.Guard.NotNull$$Object$$String(key, "key");
            this.source.set_Item$$String(key, value);
        },
        Add$$KeyValuePair$2$String$String: function (item){
            Neptuo.Guard.NotNull$$Object$$String(item, "item");
            this.Add$$String$$String(item.get_Key(), item.get_Value());
        },
        Clear: function (){
            this.source.Clear();
        },
        Contains: function (item){
            Neptuo.Guard.NotNull$$Object$$String(item, "item");
            var value;
            if ((function (){
                var $1 = {
                    Value: value
                };
                var $res = this.TryGetValue(item.get_Key(), $1);
                value = $1.Value;
                return $res;
            }).call(this))
                return value == item.get_Value();
            return false;
        },
        CopyTo: function (array, arrayIndex){
            throw $CreateException(Neptuo._GuardSystemExtensions.NotImplemented(Neptuo.Guard.Exception, null), new Error());
        },
        Count$$: "System.Int32",
        get_Count: function (){
            return this.source.get_Count();
        },
        IsReadOnly$$: "System.Boolean",
        get_IsReadOnly: function (){
            return false;
        },
        Remove$$KeyValuePair$2$String$String: function (item){
            var value;
            if ((function (){
                var $1 = {
                    Value: value
                };
                var $res = this.TryGetValue(item.get_Key(), $1);
                value = $1.Value;
                return $res;
            }).call(this) && value == item.get_Value()){
                this.source.Remove(item.get_Key());
                return true;
            }
            return false;
        },
        GetEnumerator: function (){
            return new Neptuo.Collections.Specialized.NameValueEnumerator.ctor(this.source);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Collections.Specialized.NameValueCollection"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Collections$Specialized$NameValueDictionary);
var Neptuo$Collections$Specialized$NameValueEnumerator = {
    fullname: "Neptuo.Collections.Specialized.NameValueEnumerator",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["System.Collections.Generic.IEnumerator$1"],
    Kind: "Class",
    definition: {
        ctor: function (source){
            this.source = null;
            this.keyEnumerator = null;
            this.currrent = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(source, "source");
            this.source = source;
            this.keyEnumerator = source.get_AllKeys().GetEnumerator();
        },
        GetCurrentKey: function (){
            return Cast(this.keyEnumerator.get_Current(), System.String.ctor);
        },
        Current$$: "System.Collections.Generic.KeyValuePair`2[[System.String],[System.String]]",
        get_Current: function (){
            if (this.currrent == null){
                if (this.keyEnumerator.get_Current() != null)
                    this.currrent = new System.Collections.Generic.KeyValuePair$2.ctor$$TKey$$TValue(System.String.ctor, System.String.ctor, this.GetCurrentKey(), this.source.get_Item$$String(this.GetCurrentKey()));
            }
            return this.currrent.get_Value();
        },
        Dispose: function (){
        },
        MoveNext: function (){
            this.currrent = null;
            return this.keyEnumerator.MoveNext();
        },
        Reset: function (){
            this.currrent = null;
            this.keyEnumerator.Reset();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Collections.Specialized.NameValueCollection"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Collections$Specialized$NameValueEnumerator);
var Neptuo$Collections$Specialized$NameValueReadOnlyDictionary = {
    fullname: "Neptuo.Collections.Specialized.NameValueReadOnlyDictionary",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["System.Collections.Generic.IReadOnlyDictionary$2"],
    Kind: "Class",
    definition: {
        ctor: function (source){
            this.source = null;
            this.allValues = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(source, "source");
            this.source = source;
        },
        ContainsKey: function (key){
            Neptuo.Guard.NotNull$$Object$$String(key, "key");
            return System.Linq.Enumerable.Contains$1$$IEnumerable$1$$TSource(System.String.ctor, this.source.get_AllKeys(), key);
        },
        Keys$$: "System.Collections.Generic.IEnumerable`1[[System.String]]",
        get_Keys: function (){
            return this.source.get_AllKeys();
        },
        TryGetValue: function (key, value){
            if (this.ContainsKey(key)){
                value.Value = this.source.get_Item$$String(key);
                return true;
            }
            value.Value = null;
            return false;
        },
        Values$$: "System.Collections.Generic.IEnumerable`1[[System.String]]",
        get_Values: function (){
            if (this.allValues == null){
                this.allValues = new System.Collections.Generic.List$1.ctor(System.String.ctor);
                var $it3 = this.source.get_AllKeys().GetEnumerator();
                while ($it3.MoveNext()){
                    var key = $it3.get_Current();
                    this.allValues.Add(this.source.get_Item$$String(key));
                }
            }
            return this.allValues;
        },
        Item$$: "System.String",
        get_Item$$String: function (key){
            Neptuo.Guard.NotNullOrEmpty(key, "key");
            return this.source.get_Item$$String(key);
        },
        Count$$: "System.Int32",
        get_Count: function (){
            return this.source.get_Count();
        },
        GetEnumerator: function (){
            return new Neptuo.Collections.Specialized.NameValueEnumerator.ctor(this.source);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Collections.Specialized.NameValueCollection"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Collections$Specialized$NameValueReadOnlyDictionary);
var Neptuo$Collections$Specialized$ProviderKeyValueCollection = {
    fullname: "Neptuo.Collections.Specialized.ProviderKeyValueCollection",
    baseTypeName: "Neptuo.Collections.Specialized.KeyValueCollection",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._IsReadOnly = false;
            Neptuo.Collections.Specialized.KeyValueCollection.ctor.call(this);
        },
        IsReadOnly$$: "System.Boolean",
        get_IsReadOnly: function (){
            return this._IsReadOnly;
        },
        set_IsReadOnly: function (value){
            this._IsReadOnly = value;
        },
        Set: function (key, value){
            if (this.get_IsReadOnly())
                throw $CreateException(Neptuo._GuardSystemExtensions.InvalidOperation(Neptuo.Guard.Exception, "Collection is in read-only mode."), new Error());
            throw $CreateException(Neptuo._GuardSystemExtensions.NotImplemented(Neptuo.Guard.Exception, null), new Error());
        },
        TryGet$1: function (T, key, value){
            throw $CreateException(Neptuo._GuardSystemExtensions.NotImplemented(Neptuo.Guard.Exception, null), new Error());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Collections$Specialized$ProviderKeyValueCollection);
var Neptuo$Collections$Specialized$ReadOnlyKeyValueCollectionExtensions = {
    fullname: "Neptuo.Collections.Specialized.ReadOnlyKeyValueCollectionExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        Get$1$$IReadOnlyKeyValueCollection$$String: function (T, collection, key){
            Neptuo.Guard.NotNull$$Object$$String(collection, "collection");
            var value;
            if ((function (){
                var $1 = {
                    Value: value
                };
                var $res = collection.TryGet$1(T, key, $1);
                value = $1.Value;
                return $res;
            })())
                return value;
            throw $CreateException(Neptuo._GuardSystemExtensions.InvalidOperation(Neptuo.Guard.Exception, "Collection doesn\'t contain value of type \'{0}\' with key \'{1}\'.", Typeof(T), key), new Error());
        },
        Get$$IReadOnlyKeyValueCollection$$String$$Nullable$1$Int32: function (collection, key, defaultValue){
            Neptuo.Guard.NotNull$$Object$$String(collection, "collection");
            var intValue;
            if ((function (){
                var $1 = {
                    Value: intValue
                };
                var $res = collection.TryGet$1(System.Int32.ctor, key, $1);
                intValue = $1.Value;
                return $res;
            })())
                return intValue;
            if (defaultValue != null)
                return defaultValue.get_Value();
            throw $CreateException(Neptuo._GuardSystemExtensions.InvalidOperation(Neptuo.Guard.Exception, "Collection doesn\'t contain value of type int with key \'{0}\'.", key), new Error());
        },
        Get$$IReadOnlyKeyValueCollection$$String$$String: function (collection, key, defaultValue){
            Neptuo.Guard.NotNull$$Object$$String(collection, "collection");
            var stringValue;
            if ((function (){
                var $1 = {
                    Value: stringValue
                };
                var $res = collection.TryGet$1(System.String.ctor, key, $1);
                stringValue = $1.Value;
                return $res;
            })())
                return stringValue;
            if (defaultValue != null)
                return defaultValue;
            throw $CreateException(Neptuo._GuardSystemExtensions.InvalidOperation(Neptuo.Guard.Exception, "Collection doesn\'t contain value of type string with key \'{0}\'.", key), new Error());
        },
        Get$$IReadOnlyKeyValueCollection$$String$$Nullable$1$Boolean: function (collection, key, defaultValue){
            Neptuo.Guard.NotNull$$Object$$String(collection, "collection");
            var boolValue;
            if ((function (){
                var $1 = {
                    Value: boolValue
                };
                var $res = collection.TryGet$1(System.Boolean.ctor, key, $1);
                boolValue = $1.Value;
                return $res;
            })())
                return boolValue;
            if (defaultValue != null)
                return defaultValue.get_Value();
            throw $CreateException(Neptuo._GuardSystemExtensions.InvalidOperation(Neptuo.Guard.Exception, "Collection doesn\'t contain value of type bool with key \'{0}\'.", key), new Error());
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Collections$Specialized$ReadOnlyKeyValueCollectionExtensions);
var Neptuo$ComponentModel$Converters$ConverterBase$2 = {
    fullname: "Neptuo.ComponentModel.Converters.ConverterBase$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.ComponentModel.Converters.IConverter$2"],
    Kind: "Class",
    definition: {
        ctor: function (TSource, TTarget){
            this.TSource = TSource;
            this.TTarget = TTarget;
            this._Converter = null;
            System.Object.ctor.call(this);
        },
        Converter$$: "Neptuo.OutFunc`3[[`0],[`1],[System.Boolean]]",
        get_Converter: function (){
            return this._Converter;
        },
        set_Converter: function (value){
            this._Converter = value;
        },
        ctor$$OutFunc$3: function (TSource, TTarget, converter){
            this.TSource = TSource;
            this.TTarget = TTarget;
            this._Converter = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(converter, "converter");
            this.set_Converter(converter);
        },
        TryConvert: function (sourceValue, targetValue){
            if (System.MulticastDelegate.op_Inequality$$MulticastDelegate$$MulticastDelegate(this.get_Converter(), null))
                return this.get_Converter()(sourceValue, targetValue);
            throw $CreateException(Neptuo._GuardSystemExtensions.InvalidOperation(Neptuo.Guard.Exception, "Override TryConvert method or provider Converter function."), new Error());
        },
        TryConvertGeneral: function (sourceType, targetType, sourceValue, targetValue){
            var target;
            if ((function (){
                var $1 = {
                    Value: target
                };
                var $res = this.TryConvert(Cast(sourceValue, this.TSource), $1);
                target = $1.Value;
                return $res;
            }).call(this)){
                targetValue.Value = target;
                return true;
            }
            targetValue.Value = null;
            return false;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }, {
        name: "ctor$$OutFunc",
        parameters: ["Neptuo.OutFunc"]
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$ComponentModel$Converters$ConverterBase$2);
var Neptuo$ComponentModel$Converters$ConverterRepository = {
    fullname: "Neptuo.ComponentModel.Converters.ConverterRepository",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.ComponentModel.Converters.IConverterRepository"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.OnSearchConverter = null;
            this._Storage = null;
            Neptuo.ComponentModel.Converters.ConverterRepository.ctor$$Dictionary$2.call(this, new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, System.Collections.Generic.Dictionary$2.ctor));
        },
        Storage$$: "System.Collections.Generic.Dictionary`2[[System.Type],[System.Collections.Generic.Dictionary`2[[System.Type],[Neptuo.ComponentModel.Converters.IConverter]]]]",
        get_Storage: function (){
            return this._Storage;
        },
        set_Storage: function (value){
            this._Storage = value;
        },
        ctor$$Dictionary$2: function (storage){
            this.OnSearchConverter = null;
            this._Storage = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(storage, "storage");
            this.set_Storage(storage);
        },
        Add: function (sourceType, targetType, converter){
            Neptuo.Guard.NotNull$$Object$$String(sourceType, "sourceType");
            Neptuo.Guard.NotNull$$Object$$String(targetType, "targetType");
            Neptuo.Guard.NotNull$$Object$$String(converter, "converter");
            var storage;
            if (!(function (){
                var $1 = {
                    Value: storage
                };
                var $res = this.get_Storage().TryGetValue(sourceType, $1);
                storage = $1.Value;
                return $res;
            }).call(this))
                storage = (function ($p1){
                    this.get_Storage().set_Item$$TKey(sourceType, $p1);
                    return $p1;
                }).call(this, new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, Neptuo.ComponentModel.Converters.IConverter.ctor));
            storage.set_Item$$TKey(targetType, converter);
            return this;
        },
        add_OnSearchConverter: function (value){
            this.OnSearchConverter = $CombineDelegates(this.OnSearchConverter, value);
        },
        remove_OnSearchConverter: function (value){
            this.OnSearchConverter = $RemoveDelegate(this.OnSearchConverter, value);
        },
        TryConvert$2$$TSource$$TTarget: function (TSource, TTarget, sourceValue, targetValue){
            var sourceType = Typeof(TSource);
            var targetType = Typeof(TTarget);
            var converter = null;
            var storage;
            if (!(function (){
                var $1 = {
                    Value: storage
                };
                var $res = this.get_Storage().TryGetValue(sourceType, $1);
                storage = $1.Value;
                return $res;
            }).call(this) || !(function (){
                var $1 = {
                    Value: converter
                };
                var $res = storage.TryGetValue(targetType, $1);
                converter = $1.Value;
                return $res;
            }).call(this)){
                if (System.MulticastDelegate.op_Inequality$$MulticastDelegate$$MulticastDelegate(this.OnSearchConverter, null))
                    converter = this.OnSearchConverter(sourceType, targetType);
            }
            if (converter == null){
                targetValue.Value = Default(TTarget);
                return false;
            }
            var genericConverter = As(converter, Neptuo.ComponentModel.Converters.IConverter$2.ctor);
            if (genericConverter != null)
                return genericConverter.TryConvert(sourceValue, targetValue);
            var targetObject;
            if ((function (){
                var $1 = {
                    Value: targetObject
                };
                var $res = converter.TryConvertGeneral(sourceType, targetType, sourceValue, $1);
                targetObject = $1.Value;
                return $res;
            }).call(this)){
                if (Is(targetObject, TTarget)){
                    targetValue.Value = Cast(targetObject, TTarget);
                    return true;
                }
            }
            targetValue.Value = Default(TTarget);
            return false;
        },
        TryConvert$$Type$$Type$$Object$$Object: function (sourceType, targetType, sourceValue, targetValue){
            var converter = null;
            var storage;
            if (!(function (){
                var $1 = {
                    Value: storage
                };
                var $res = this.get_Storage().TryGetValue(sourceType, $1);
                storage = $1.Value;
                return $res;
            }).call(this) || !(function (){
                var $1 = {
                    Value: converter
                };
                var $res = storage.TryGetValue(targetType, $1);
                converter = $1.Value;
                return $res;
            }).call(this)){
                if (System.MulticastDelegate.op_Inequality$$MulticastDelegate$$MulticastDelegate(this.OnSearchConverter, null))
                    converter = this.OnSearchConverter(sourceType, targetType);
            }
            if (converter == null){
                targetValue.Value = null;
                return false;
            }
            return converter.TryConvertGeneral(sourceType, targetType, sourceValue, targetValue);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }, {
        name: "ctor$$Dictionary",
        parameters: ["System.Collections.Generic.Dictionary"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$Converters$ConverterRepository);
var Neptuo$ComponentModel$Converters$ConverterSearchDelegate = {
    fullname: "Neptuo.ComponentModel.Converters.ConverterSearchDelegate",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Object", "System.IntPtr"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$Converters$ConverterSearchDelegate);
var Neptuo$ComponentModel$Converters$IConverter = {
    fullname: "Neptuo.ComponentModel.Converters.IConverter",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$ComponentModel$Converters$IConverter);
var Neptuo$ComponentModel$Converters$IConverter$2 = {
    fullname: "Neptuo.ComponentModel.Converters.IConverter$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.ComponentModel.Converters.IConverter"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$ComponentModel$Converters$IConverter$2);
var Neptuo$ComponentModel$Converters$IConverterRepository = {
    fullname: "Neptuo.ComponentModel.Converters.IConverterRepository",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$ComponentModel$Converters$IConverterRepository);
var Neptuo$ComponentModel$Disposable$1 = {
    fullname: "Neptuo.ComponentModel.Disposable$1",
    baseTypeName: "Neptuo.ComponentModel.DisposableBase",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (T, target){
            this.T = T;
            this.reference = null;
            Neptuo.ComponentModel.DisposableBase.ctor.call(this);
            this.reference = new System.WeakReference$1.ctor$$T(this.T, target);
        },
        DisposeManagedResources: function (){
            Neptuo.ComponentModel.DisposableBase.commonPrototype.DisposeManagedResources.call(this);
            var target;
            if ((function (){
                var $1 = {
                    Value: target
                };
                var $res = this.reference.TryGetTarget($1);
                target = $1.Value;
                return $res;
            }).call(this))
                target.Dispose();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["T"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$Disposable$1);
var Neptuo$ComponentModel$DisposableBase = {
    fullname: "Neptuo.ComponentModel.DisposableBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.IDisposable"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._IsDisposed = false;
            System.Object.ctor.call(this);
        },
        IsDisposed$$: "System.Boolean",
        get_IsDisposed: function (){
            return this._IsDisposed;
        },
        set_IsDisposed: function (value){
            this._IsDisposed = value;
        },
        Dispose: function (){
            this.Dispose$$Boolean(true);
            System.GC.SuppressFinalize(this);
        },
        Dispose$$Boolean: function (disposing){
            if (this.get_IsDisposed())
                return;
            if (disposing)
                this.DisposeManagedResources();
            this.DisposeUnmanagedResources();
            this.set_IsDisposed(true);
        },
        DisposeManagedResources: function (){
        },
        DisposeUnmanagedResources: function (){
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$ComponentModel$DisposableBase);
var Neptuo$ComponentModel$Envelope = {
    fullname: "Neptuo.ComponentModel.Envelope",
    baseTypeName: "System.Object",
    staticDefinition: {
        Create$1: function (T, body){
            return new Neptuo.ComponentModel.Envelope$1.ctor$$T(T, body);
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$ComponentModel$Envelope);
var Neptuo$ComponentModel$Envelope$1 = {
    fullname: "Neptuo.ComponentModel.Envelope$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor$$T$$TimeSpan$$TimeSpan$$Guid: function (T, body, delay, timeToLive, sourceID){
            this.T = T;
            this._Body = null;
            this._Delay = new System.TimeSpan.ctor();
            this._TimeToLive = new System.TimeSpan.ctor();
            this._SourceID = null;
            Neptuo.ComponentModel.Envelope$1.ctor$$T$$TimeSpan$$TimeSpan.call(this, this.T, body, delay, timeToLive);
            this.set_SourceID(sourceID);
        },
        Body$$: "`0",
        get_Body: function (){
            return this._Body;
        },
        set_Body: function (value){
            this._Body = value;
        },
        Delay$$: "System.TimeSpan",
        get_Delay: function (){
            return this._Delay;
        },
        set_Delay: function (value){
            this._Delay = value;
        },
        TimeToLive$$: "System.TimeSpan",
        get_TimeToLive: function (){
            return this._TimeToLive;
        },
        set_TimeToLive: function (value){
            this._TimeToLive = value;
        },
        SourceID$$: "System.Nullable`1[[System.Guid]]",
        get_SourceID: function (){
            return this._SourceID;
        },
        set_SourceID: function (value){
            this._SourceID = value;
        },
        ctor$$T$$TimeSpan$$TimeSpan: function (T, body, delay, timeToLive){
            this.T = T;
            this._Body = null;
            this._Delay = new System.TimeSpan.ctor();
            this._TimeToLive = new System.TimeSpan.ctor();
            this._SourceID = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(body, "body");
            Neptuo.Guard.NotNull$$Object$$String(delay, "delay");
            Neptuo.Guard.NotNull$$Object$$String(timeToLive, "timeToLive");
            this.set_Body(body);
            this.set_Delay(delay);
            this.set_TimeToLive(timeToLive);
            this.set_SourceID(null);
        },
        ctor$$T$$Guid: function (T, body, sourceID){
            this.T = T;
            this._Body = null;
            this._Delay = new System.TimeSpan.ctor();
            this._TimeToLive = new System.TimeSpan.ctor();
            this._SourceID = null;
            Neptuo.ComponentModel.Envelope$1.ctor$$T$$TimeSpan$$TimeSpan$$Guid.call(this, this.T, body, System.TimeSpan.Zero, System.TimeSpan.Zero, sourceID);
        },
        ctor$$T: function (T, body){
            this.T = T;
            this._Body = null;
            this._Delay = new System.TimeSpan.ctor();
            this._TimeToLive = new System.TimeSpan.ctor();
            this._SourceID = null;
            Neptuo.ComponentModel.Envelope$1.ctor$$T$$TimeSpan$$TimeSpan.call(this, this.T, body, System.TimeSpan.Zero, System.TimeSpan.Zero);
        }
    },
    ctors: [{
        name: "ctor$$T$$TimeSpan$$TimeSpan$$Guid",
        parameters: ["T", "System.TimeSpan", "System.TimeSpan", "System.Guid"]
    }, {
        name: "ctor$$T$$TimeSpan$$TimeSpan",
        parameters: ["T", "System.TimeSpan", "System.TimeSpan"]
    }, {
        name: "ctor$$T$$Guid",
        parameters: ["T", "System.Guid"]
    }, {
        name: "ctor$$T",
        parameters: ["T"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$Envelope$1);
var Neptuo$ComponentModel$ObservableObject = {
    fullname: "Neptuo.ComponentModel.ObservableObject",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["System.ComponentModel.INotifyPropertyChanged"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.PropertyChanged = null;
            System.Object.ctor.call(this);
        },
        add_PropertyChanged: function (value){
            this.PropertyChanged = $CombineDelegates(this.PropertyChanged, value);
        },
        remove_PropertyChanged: function (value){
            this.PropertyChanged = $RemoveDelegate(this.PropertyChanged, value);
        },
        RaisePropertyChanged: function (propertyName){
            Neptuo.Guard.NotNull$$Object$$String(propertyName, "propertyName");
            if (System.MulticastDelegate.op_Inequality$$MulticastDelegate$$MulticastDelegate(this.PropertyChanged, null))
                this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs.ctor(propertyName));
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$ObservableObject);
var Neptuo$ComponentModel$ReturnTypeAttribute = {
    fullname: "Neptuo.ComponentModel.ReturnTypeAttribute",
    baseTypeName: "System.Attribute",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (type){
            this._Type = null;
            System.Attribute.ctor.call(this);
            this.set_Type(type);
        },
        Type$$: "System.Type",
        get_Type: function (){
            return this._Type;
        },
        set_Type: function (value){
            this._Type = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Type"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$ReturnTypeAttribute);
var Neptuo$Converts = {
    fullname: "Neptuo.Converts",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.Converts.lockRepository = new System.Object.ctor();
            Neptuo.Converts.repository = null;
        },
        Repository$$: "Neptuo.ComponentModel.Converters.IConverterRepository",
        get_Repository: function (){
            if (Neptuo.Converts.repository == null){
                if (Neptuo.Converts.repository == null)
                    Neptuo.Converts.repository = new Neptuo.ComponentModel.Converters.ConverterRepository.ctor();
            }
            return Neptuo.Converts.repository;
        },
        Try$2$$TSource$$TTarget: function (TSource, TTarget, sourceValue, targetValue){
            return Neptuo.Converts.get_Repository().TryConvert$2$$TSource$$TTarget(TSource, TTarget, sourceValue, targetValue);
        },
        Try$$Type$$Type$$Object$$Object: function (sourceType, targetType, sourceValue, targetValue){
            return Neptuo.Converts.get_Repository().TryConvert$$Type$$Type$$Object$$Object(sourceType, targetType, sourceValue, targetValue);
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Converts);
var Neptuo$DependencyActivator$1 = {
    fullname: "Neptuo.DependencyActivator$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.IActivator$1"],
    Kind: "Class",
    definition: {
        ctor: function (T, dependencyProvider){
            this.T = T;
            this.dependencyProvider = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(dependencyProvider, "dependencyProvider");
            this.dependencyProvider = dependencyProvider;
        },
        Create: function (){
            return Neptuo.DependencyProviderExtensions.Resolve$1$$IDependencyProvider(this.T, this.dependencyProvider);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.IDependencyProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$DependencyActivator$1);
var Neptuo$DependencyNamedActivator$1 = {
    fullname: "Neptuo.DependencyNamedActivator$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.INamedActivator$1"],
    Kind: "Class",
    definition: {
        ctor: function (T, dependencyProvider){
            this.T = T;
            this.dependencyProvider = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(dependencyProvider, "dependencyProvider");
            this.dependencyProvider = dependencyProvider;
        },
        Create: function (name){
            return Neptuo.DependencyProviderExtensions.Resolve$1$$IDependencyProvider$$String(this.T, this.dependencyProvider, name);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.IDependencyProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$DependencyNamedActivator$1);
var Neptuo$DependencyProviderExtensions = {
    fullname: "Neptuo.DependencyProviderExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        Resolve$1$$IDependencyProvider: function (T, provider){
            return Cast(provider.Resolve(Typeof(T), null), T);
        },
        Resolve$1$$IDependencyProvider$$String: function (T, provider, name){
            Neptuo.Guard.NotNullOrEmpty(name, "name");
            return Cast(provider.Resolve(Typeof(T), name), T);
        },
        ResolveAll$1: function (T, provider){
            return Cast(provider.ResolveAll(Typeof(T)), System.Collections.Generic.IEnumerable$1.ctor);
        },
        Resolve$$IDependencyProvider$$Type: function (provider, type){
            return provider.Resolve(type, null);
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$DependencyProviderExtensions);
var Neptuo$DependencyContainerExtensions = {
    fullname: "Neptuo.DependencyContainerExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        RegisterInstance$1: function (T, container, instance){
            return container.RegisterInstance(Typeof(T), null, instance);
        },
        RegisterType$2$$IDependencyContainer: function (TFrom, TTo, container){
            return container.RegisterType(Typeof(TFrom), Typeof(TTo), null, null);
        },
        RegisterType$$IDependencyContainer$$Type$$Type$$String: function (container, from, to, name){
            return container.RegisterType(from, to, name, null);
        },
        RegisterType$$IDependencyContainer$$Type$$Object: function (container, from, lifetime){
            return container.RegisterType(from, from, null, lifetime);
        },
        RegisterType$1$$IDependencyContainer$$Object: function (TFrom, container, lifetime){
            return container.RegisterType(Typeof(TFrom), Typeof(TFrom), null, lifetime);
        },
        RegisterType$2$$IDependencyContainer$$Object: function (TFrom, TTo, container, lifetime){
            return container.RegisterType(Typeof(TFrom), Typeof(TTo), null, lifetime);
        },
        RegisterActivator$1$$IDependencyContainer: function (T, container){
            return Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer(Neptuo.IActivator$1.ctor, Neptuo.DependencyActivator$1.ctor, container);
        },
        RegisterActivator$1$$IDependencyContainer$$Object: function (T, container, lifetime){
            return Neptuo.DependencyContainerExtensions.RegisterType$2$$IDependencyContainer$$Object(Neptuo.IActivator$1.ctor, Neptuo.DependencyActivator$1.ctor, container, lifetime);
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$DependencyContainerExtensions);
var Neptuo$Diagnostics$DebugBase = {
    fullname: "Neptuo.Diagnostics.DebugBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor$$DebugMessageWriter: function (innerWriter){
            this.innerWriter = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(innerWriter, "innerWriter");
            this.set_InnerWriter(innerWriter);
        },
        InnerWriter$$: "Neptuo.Diagnostics.DebugBase+DebugMessageWriter",
        get_InnerWriter: function (){
            return this.innerWriter;
        },
        set_InnerWriter: function (value){
            if (System.MulticastDelegate.op_Inequality$$MulticastDelegate$$MulticastDelegate(value, null))
                this.innerWriter = value;
        },
        ctor$$TextWriter: function (innerWriter){
            this.innerWriter = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(innerWriter, "innerWriter");
            this.set_InnerWriter($CreateDelegate(innerWriter, innerWriter.WriteLine$$String$$Object$Array));
        },
        Debug$$String$$Action: function (title, action){
            Neptuo.Guard.NotNull$$Object$$String(title, "title");
            Neptuo.Guard.NotNull$$Object$$String(action, "action");
            var sw = new System.Diagnostics.Stopwatch.ctor();
            sw.Start();
            action();
            sw.Stop();
            this.get_InnerWriter()("{0}: {1}ms", title, sw.get_ElapsedMilliseconds());
        },
        DebugIteration$$String$$Int32$$Action: function (title, count, action){
            Neptuo.Guard.NotNull$$Object$$String(title, "title");
            Neptuo.Guard.PositiveOrZero(count, "count");
            Neptuo.Guard.NotNull$$Object$$String(action, "action");
            this.Debug$$String$$Action(title, $CreateAnonymousDelegate(this, function (){
                for (var i = 0; i < count; i++)
                    action();
            }));
        },
        Debug$1$$String$$Func$1: function (T, title, action){
            Neptuo.Guard.NotNull$$Object$$String(title, "title");
            Neptuo.Guard.NotNull$$Object$$String(action, "action");
            var sw = new System.Diagnostics.Stopwatch.ctor();
            sw.Start();
            var result = action();
            sw.Stop();
            this.get_InnerWriter()("{0}: {1}ms", title, sw.get_ElapsedMilliseconds());
            return result;
        },
        DebugIteration$1$$String$$Int32$$Func$1: function (T, title, count, action){
            Neptuo.Guard.NotNull$$Object$$String(title, "title");
            Neptuo.Guard.PositiveOrZero(count, "count");
            Neptuo.Guard.NotNull$$Object$$String(action, "action");
            return this.Debug$1$$String$$Func$1(System.Collections.Generic.List$1.ctor, title, $CreateAnonymousDelegate(this, function (){
                var result = new System.Collections.Generic.List$1.ctor(T);
                for (var i = 0; i < count; i++)
                    action();
                return result;
            }));
        }
    },
    ctors: [{
        name: "ctor$$DebugMessageWriter",
        parameters: ["Neptuo.Diagnostics.DebugBase.DebugMessageWriter"]
    }, {
        name: "ctor$$TextWriter",
        parameters: ["System.IO.TextWriter"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Diagnostics$DebugBase);
var Neptuo$Diagnostics$DebugBase$DebugMessageWriter = {
    fullname: "Neptuo.Diagnostics.DebugBase.DebugMessageWriter",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Object", "System.IntPtr"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Diagnostics$DebugBase$DebugMessageWriter);
var Neptuo$Diagnostics$DebugHelper = {
    fullname: "Neptuo.Diagnostics.DebugHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.Diagnostics.DebugHelper.debugLock = new System.Object.ctor();
            Neptuo.Diagnostics.DebugHelper.debug = null;
        },
        EnsureDebug: function (){
            if (Neptuo.Diagnostics.DebugHelper.debug == null){
                if (Neptuo.Diagnostics.DebugHelper.debug == null)
                    Neptuo.Diagnostics.DebugHelper.debug = new Neptuo.Diagnostics.DebugBase.ctor$$TextWriter(System.Console.get_Out());
            }
        },
        Debug$$String$$Action: function (title, action){
            Neptuo.Diagnostics.DebugHelper.EnsureDebug();
            Neptuo.Diagnostics.DebugHelper.debug.Debug$$String$$Action(title, action);
        },
        DebugIteration$$String$$Int32$$Action: function (title, count, action){
            Neptuo.Diagnostics.DebugHelper.EnsureDebug();
            Neptuo.Diagnostics.DebugHelper.debug.DebugIteration$$String$$Int32$$Action(title, count, action);
        },
        Debug$1$$String$$Func$1: function (T, title, action){
            Neptuo.Diagnostics.DebugHelper.EnsureDebug();
            return Neptuo.Diagnostics.DebugHelper.debug.Debug$1$$String$$Func$1(T, title, action);
        },
        DebugIteration$1$$String$$Int32$$Func$1: function (T, title, count, action){
            Neptuo.Diagnostics.DebugHelper.EnsureDebug();
            return Neptuo.Diagnostics.DebugHelper.debug.DebugIteration$1$$String$$Int32$$Func$1(T, title, count, action);
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Diagnostics$DebugHelper);
var Neptuo$Engine = {
    fullname: "Neptuo.Engine",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.Engine.environmentLock = new System.Object.ctor();
            Neptuo.Engine.environment = null;
        },
        RootContainer$$: "Neptuo.IDependencyContainer",
        get_RootContainer: function (){
            return Neptuo.Engine.get_Environment().With$1(Neptuo.IDependencyContainer.ctor, null);
        },
        Environment$$: "Neptuo.EngineEnvironment",
        get_Environment: function (){
            if (Neptuo.Engine.environment == null){
                if (Neptuo.Engine.environment == null)
                    Neptuo.Engine.environment = new Neptuo.EngineEnvironment.ctor();
            }
            return Neptuo.Engine.environment;
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Engine);
var Neptuo$EngineEnvironment = {
    fullname: "Neptuo.EngineEnvironment",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.storage = new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, System.Collections.Generic.Dictionary$2.ctor);
            System.Object.ctor.call(this);
        },
        Use$1: function (T, service, name){
            Neptuo.Guard.NotNull$$Object$$String(service, "instance");
            if (name == null)
                name = System.String.Empty;
            var serviceType = Typeof(T);
            var innerStorage;
            if (!(function (){
                var $1 = {
                    Value: innerStorage
                };
                var $res = this.storage.TryGetValue(serviceType, $1);
                innerStorage = $1.Value;
                return $res;
            }).call(this))
                innerStorage = (function ($p2){
                    this.storage.set_Item$$TKey(serviceType, $p2);
                    return $p2;
                }).call(this, new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Object.ctor));
            innerStorage.set_Item$$TKey(name, service);
            return this;
        },
        With$1: function (T, name){
            if (name == null)
                name = System.String.Empty;
            var serviceType = Typeof(T);
            var innerStorage;
            if (!(function (){
                var $1 = {
                    Value: innerStorage
                };
                var $res = this.storage.TryGetValue(serviceType, $1);
                innerStorage = $1.Value;
                return $res;
            }).call(this))
                throw $CreateException(Neptuo._GuardSystemExtensions.InvalidOperation(Neptuo.Guard.Exception, "Service of type \'{0}\' is not registered.", serviceType.get_FullName()), new Error());
            var service;
            if (!(function (){
                var $1 = {
                    Value: service
                };
                var $res = innerStorage.TryGetValue(name, $1);
                service = $1.Value;
                return $res;
            }).call(this))
                throw $CreateException(Neptuo._GuardSystemExtensions.InvalidOperation(Neptuo.Guard.Exception, "Service of type \'{0}\' is not registered under name \'{1}\'.", serviceType.get_FullName(), name), new Error());
            return Cast(service, T);
        },
        Is$1: function (T, name){
            if (name == null)
                name = System.String.Empty;
            var serviceType = Typeof(T);
            var innerStorage;
            if (!(function (){
                var $1 = {
                    Value: innerStorage
                };
                var $res = this.storage.TryGetValue(serviceType, $1);
                innerStorage = $1.Value;
                return $res;
            }).call(this))
                return false;
            var service;
            if (!(function (){
                var $1 = {
                    Value: service
                };
                var $res = innerStorage.TryGetValue(name, $1);
                service = $1.Value;
                return $res;
            }).call(this))
                return false;
            return true;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$EngineEnvironment);
var Neptuo$_GuardArgumentExtensions = {
    fullname: "Neptuo._GuardArgumentExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        Argument: function (guard, argumentName, format, formatParameters){
            Neptuo.Guard.NotNull$$Object$$String(guard, "guard");
            Neptuo.Guard.NotNullOrEmpty(argumentName, "argumentName");
            Neptuo.Guard.NotNullOrEmpty(format, "format");
            return new System.ArgumentException.ctor$$String$$String(argumentName, System.String.Format$$String$$Object$Array(format, formatParameters));
        },
        ArgumentNull: function (guard, argumentName, format, formatParameters){
            Neptuo.Guard.NotNull$$Object$$String(guard, "guard");
            Neptuo.Guard.NotNullOrEmpty(argumentName, "argumentName");
            Neptuo.Guard.NotNullOrEmpty(format, "format");
            return new System.ArgumentNullException.ctor$$String$$String(argumentName, System.String.Format$$String$$Object$Array(format, formatParameters));
        },
        ArgumentOutOfRange: function (guard, argumentName, format, formatParameters){
            Neptuo.Guard.NotNull$$Object$$String(guard, "guard");
            Neptuo.Guard.NotNullOrEmpty(argumentName, "argumentName");
            Neptuo.Guard.NotNullOrEmpty(format, "format");
            return new System.ArgumentOutOfRangeException.ctor$$String$$String(argumentName, System.String.Format$$String$$Object$Array(format, formatParameters));
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$_GuardArgumentExtensions);
var Neptuo$Events$EventManager = {
    fullname: "Neptuo.Events.EventManager",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Events.IEventManager", "Neptuo.Events.IEventDispatcher", "Neptuo.Events.IEventRegistry"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._Registry = null;
            System.Object.ctor.call(this);
            this.set_Registry(new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, System.Collections.Generic.List$1.ctor));
        },
        Registry$$: "System.Collections.Generic.Dictionary`2[[System.Type],[System.Collections.Generic.List`1[[System.Object]]]]",
        get_Registry: function (){
            return this._Registry;
        },
        set_Registry: function (value){
            this._Registry = value;
        },
        Publish$1: function (TEvent, eventData){
            Neptuo.Guard.NotNull$$Object$$String(eventData, "eventData");
            var eventType = Typeof(TEvent);
            var handlerFactories;
            if ((function (){
                var $1 = {
                    Value: handlerFactories
                };
                var $res = this.get_Registry().TryGetValue(eventType, $1);
                handlerFactories = $1.Value;
                return $res;
            }).call(this)){
                var $it4 = System.Linq.Enumerable.ToList$1(System.Object.ctor, handlerFactories).GetEnumerator();
                while ($it4.MoveNext()){
                    var handlerFactory = $it4.get_Current();
                    var handler = handlerFactory.CreateHandler(eventData, this);
                    if (handler != null)
                        handler.Handle(eventData);
                }
            }
        },
        SubscribeInternal: function (eventDataType, factory){
            var handlers;
            if (!(function (){
                var $1 = {
                    Value: handlers
                };
                var $res = this.get_Registry().TryGetValue(eventDataType, $1);
                handlers = $1.Value;
                return $res;
            }).call(this)){
                handlers = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
                this.get_Registry().Add(eventDataType, handlers);
            }
            handlers.Add(factory);
        },
        Subscribe$1$$IEventHandlerFactory$1: function (TEvent, factory){
            Neptuo.Guard.NotNull$$Object$$String(factory, "factory");
            var eventDataType = Typeof(TEvent);
            this.SubscribeInternal(eventDataType, factory);
        },
        Subscribe$$Type$$IEventHandlerFactory: function (eventDataType, factory){
            Neptuo.Guard.NotNull$$Object$$String(eventDataType, "eventDataType");
            Neptuo.Guard.NotNull$$Object$$String(factory, "factory");
            if (!Typeof(Neptuo.Events.Handlers.IEventHandlerFactory$1.ctor).MakeGenericType(eventDataType).IsAssignableFrom(factory.GetType()))
                throw $CreateException(Neptuo._GuardArgumentExtensions.Argument(Neptuo.Guard.Exception, "factory", "Factory doesn\'t implement IEventHandlerFactory<{0}>", eventDataType.get_FullName()), new Error());
            this.SubscribeInternal(eventDataType, factory);
        },
        UnSubscribeInternal: function (eventDataType, factory){
            var handlers;
            if ((function (){
                var $1 = {
                    Value: handlers
                };
                var $res = this.get_Registry().TryGetValue(eventDataType, $1);
                handlers = $1.Value;
                return $res;
            }).call(this))
                handlers.Remove(factory);
        },
        UnSubscribe$1$$IEventHandlerFactory$1: function (TEvent, factory){
            Neptuo.Guard.NotNull$$Object$$String(factory, "factory");
            var eventDataType = Typeof(TEvent);
            this.UnSubscribeInternal(eventDataType, factory);
        },
        UnSubscribe$$Type$$IEventHandlerFactory: function (eventDataType, factory){
            Neptuo.Guard.NotNull$$Object$$String(eventDataType, "eventDataType");
            Neptuo.Guard.NotNull$$Object$$String(factory, "factory");
            this.UnSubscribeInternal(eventDataType, factory);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Events$EventManager);
var Neptuo$Events$EventDispatcherExtensions = {
    fullname: "Neptuo.Events.EventDispatcherExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        SubscribeDependency$2: function (TEvent, TEventHandler, eventRegistry, dependencyProvider){
            Neptuo.Guard.NotNull$$Object$$String(eventRegistry, "eventRegistry");
            Neptuo.Guard.NotNull$$Object$$String(dependencyProvider, "dependencyProvider");
            var factory = new Neptuo.Events.Handlers.DependencyEventHandlerFactory$2.ctor(TEvent, TEventHandler, dependencyProvider);
            eventRegistry.Subscribe$1$$IEventHandlerFactory$1(TEvent, factory);
            return factory;
        },
        Using$1: function (TEvent, eventRegistry, eventHandler){
            return new Neptuo.Events.UsignEventHandlerSubscriber$1.ctor(TEvent, eventRegistry, eventHandler);
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Events$EventDispatcherExtensions);
var Neptuo$Events$UsignEventHandlerSubscriber$1 = {
    fullname: "Neptuo.Events.UsignEventHandlerSubscriber$1",
    baseTypeName: "Neptuo.ComponentModel.DisposableBase",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (TEvent, eventRegistry, eventHandler){
            this.TEvent = TEvent;
            this.eventRegistry = null;
            this.eventHandlerFactory = null;
            Neptuo.ComponentModel.DisposableBase.ctor.call(this);
            this.eventRegistry = eventRegistry;
            this.eventHandlerFactory = new Neptuo.Events.Handlers.SingletonEventHandlerFactory$1.ctor(this.TEvent, eventHandler);
            eventRegistry.Subscribe$1$$IEventHandlerFactory$1(this.TEvent, this.eventHandlerFactory);
        },
        DisposeManagedResources: function (){
            Neptuo.ComponentModel.DisposableBase.commonPrototype.DisposeManagedResources.call(this);
            this.eventRegistry.UnSubscribe$1$$IEventHandlerFactory$1(this.TEvent, this.eventHandlerFactory);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Events.IEventRegistry", "Neptuo.Events.Handlers.IEventHandler"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Events$UsignEventHandlerSubscriber$1);
var Neptuo$Events$Handlers$ActionEventHandler$1 = {
    fullname: "Neptuo.Events.Handlers.ActionEventHandler$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Events.Handlers.IEventHandler$1"],
    Kind: "Class",
    definition: {
        ctor: function (TEvent, action){
            this.TEvent = TEvent;
            this._Action = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(action, "action");
            this.set_Action(action);
        },
        Action$$: "System.Action`1[[`0]]",
        get_Action: function (){
            return this._Action;
        },
        set_Action: function (value){
            this._Action = value;
        },
        Handle: function (eventData){
            this.get_Action()(eventData);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Action"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Events$Handlers$ActionEventHandler$1);
var Neptuo$Events$Handlers$DependencyEventHandlerFactory$2 = {
    fullname: "Neptuo.Events.Handlers.DependencyEventHandlerFactory$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Events.Handlers.IEventHandlerFactory$1"],
    Kind: "Class",
    definition: {
        ctor: function (TEvent, TEventHandler, dependencyProvider){
            this.TEvent = TEvent;
            this.TEventHandler = TEventHandler;
            this.dependencyProvider = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(dependencyProvider, "dependencyProvider");
            this.dependencyProvider = dependencyProvider;
        },
        CreateHandler: function (eventData, currentManager){
            return Neptuo.DependencyProviderExtensions.Resolve$1$$IDependencyProvider(this.TEventHandler, this.dependencyProvider);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.IDependencyProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Events$Handlers$DependencyEventHandlerFactory$2);
var Neptuo$Events$Handlers$GetterEventHandlerFactory$1 = {
    fullname: "Neptuo.Events.Handlers.GetterEventHandlerFactory$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Events.Handlers.IEventHandlerFactory$1"],
    Kind: "Class",
    definition: {
        ctor: function (TEvent, getter){
            this.TEvent = TEvent;
            this._Getter = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(getter, "getter");
            this.set_Getter(getter);
        },
        Getter$$: "System.Func`1[[Neptuo.Events.Handlers.IEventHandler`1[[`0]]]]",
        get_Getter: function (){
            return this._Getter;
        },
        set_Getter: function (value){
            this._Getter = value;
        },
        CreateHandler: function (eventData, currentManager){
            return this.get_Getter()();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Func"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Events$Handlers$GetterEventHandlerFactory$1);
var Neptuo$Events$Handlers$IEventHandler$1 = {
    fullname: "Neptuo.Events.Handlers.IEventHandler$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Events$Handlers$IEventHandler$1);
var Neptuo$Events$Handlers$IEventHandlerFactory = {
    fullname: "Neptuo.Events.Handlers.IEventHandlerFactory",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Events$Handlers$IEventHandlerFactory);
var Neptuo$Events$Handlers$IEventHandlerFactory$1 = {
    fullname: "Neptuo.Events.Handlers.IEventHandlerFactory$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Events.Handlers.IEventHandlerFactory"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Events$Handlers$IEventHandlerFactory$1);
var Neptuo$Events$Handlers$SingletonEventHandlerFactory$1 = {
    fullname: "Neptuo.Events.Handlers.SingletonEventHandlerFactory$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Events.Handlers.IEventHandlerFactory$1"],
    Kind: "Class",
    definition: {
        ctor: function (TEvent, handler){
            this.TEvent = TEvent;
            this._Handler = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(handler, "handler");
            this.set_Handler(handler);
        },
        Handler$$: "Neptuo.Events.Handlers.IEventHandler`1[[`0]]",
        get_Handler: function (){
            return this._Handler;
        },
        set_Handler: function (value){
            this._Handler = value;
        },
        CreateHandler: function (eventData, currentManager){
            return this.get_Handler();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Events.Handlers.IEventHandler"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Events$Handlers$SingletonEventHandlerFactory$1);
var Neptuo$Events$IEventDispatcher = {
    fullname: "Neptuo.Events.IEventDispatcher",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Events$IEventDispatcher);
var Neptuo$Events$IEventManager = {
    fullname: "Neptuo.Events.IEventManager",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Events.IEventDispatcher", "Neptuo.Events.IEventRegistry"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Events$IEventManager);
var Neptuo$Events$IEventRegistry = {
    fullname: "Neptuo.Events.IEventRegistry",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Events$IEventRegistry);
var Neptuo$Exceptions$Helpers$GuardExceptionHelper = {
    fullname: "Neptuo.Exceptions.Helpers.GuardExceptionHelper",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Exceptions$Helpers$GuardExceptionHelper);
var Neptuo$_GuardSystemExtensions = {
    fullname: "Neptuo._GuardSystemExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        NotImplemented: function (guard, format, formatParameters){
            Neptuo.Guard.NotNull$$Object$$String(guard, "guard");
            if (System.String.IsNullOrEmpty(format))
                return new System.NotImplementedException.ctor();
            return new System.NotImplementedException.ctor$$String(System.String.Format$$String$$Object$Array(format, formatParameters));
        },
        NotSupported: function (guard, format, formatParameters){
            Neptuo.Guard.NotNull$$Object$$String(guard, "guard");
            if (System.String.IsNullOrEmpty(format))
                return new System.NotSupportedException.ctor();
            return new System.NotSupportedException.ctor$$String(System.String.Format$$String$$Object$Array(format, formatParameters));
        },
        InvalidOperation: function (guard, format, formatParameters){
            Neptuo.Guard.NotNull$$Object$$String(guard, "guard");
            Neptuo.Guard.NotNullOrEmpty(format, "format");
            return new System.InvalidOperationException.ctor$$String(System.String.Format$$String$$Object$Array(format, formatParameters));
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$_GuardSystemExtensions);
var Neptuo$FileSystems$FileContentExtensions = {
    fullname: "Neptuo.FileSystems.FileContentExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        GetContent: function (file){
            Neptuo.Guard.NotNull$$Object$$String(file, "file");
            return file.GetContentAsync().get_Result();
        },
        GetContentAsByteArray: function (file){
            Neptuo.Guard.NotNull$$Object$$String(file, "file");
            return file.GetContentAsByteArrayAsync().get_Result();
        },
        GetContentAsStream: function (file){
            Neptuo.Guard.NotNull$$Object$$String(file, "file");
            return file.GetContentAsStreamAsync().get_Result();
        },
        SetContent: function (file, fileContent){
            file.SetContentAsync(fileContent).Wait();
        },
        SetContentFromByteArray: function (file, fileContent){
            file.SetContentFromByteArrayAsync(fileContent).Wait();
        },
        SetContentFromStream: function (file, fileContent){
            file.SetContentFromStreamAsync(fileContent).Wait();
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$FileSystems$FileContentExtensions);
var Neptuo$FileSystems$FileSystemException = {
    fullname: "Neptuo.FileSystems.FileSystemException",
    baseTypeName: "System.Exception",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor$$String: function (message){
            System.Exception.ctor$$String.call(this, message);
        },
        ctor$$String$$Exception: function (message, innerExceptio){
            System.Exception.ctor$$String$$Exception.call(this, message, innerExceptio);
        },
        ctor$$SerializationInfo$$StreamingContext: function (info, context){
            System.Exception.ctor$$SerializationInfo$$StreamingContext.call(this, info, context);
        }
    },
    ctors: [{
        name: "ctor$$String",
        parameters: ["System.String"]
    }, {
        name: "ctor$$String$$Exception",
        parameters: ["System.String", "System.Exception"]
    }, {
        name: "ctor$$SerializationInfo$$StreamingContext",
        parameters: ["System.Runtime.Serialization.SerializationInfo", "System.Runtime.Serialization.StreamingContext"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$FileSystems$FileSystemException);
var Neptuo$FileSystems$IReadOnlyDirectory = {
    fullname: "Neptuo.FileSystems.IReadOnlyDirectory",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$FileSystems$IReadOnlyDirectory);
var Neptuo$FileSystems$IReadOnlyFile = {
    fullname: "Neptuo.FileSystems.IReadOnlyFile",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$FileSystems$IReadOnlyFile);
var Neptuo$FileSystems$LocalDirectory = {
    fullname: "Neptuo.FileSystems.LocalDirectory",
    baseTypeName: "System.Object",
    staticDefinition: {
        GetParentDirectoryFromFullPath: function (fullPath){
            return new Neptuo.FileSystems.LocalDirectory.ctor$$String(System.IO.Path.GetDirectoryName(fullPath));
        }
    },
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.FileSystems.IDirectory"],
    Kind: "Class",
    definition: {
        ctor$$String: function (fullPath){
            this.parent = null;
            this._Name = null;
            this._FullPath = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNullOrEmpty(fullPath, "fullPath");
            this.SetDirectoryRelatedProperties(fullPath);
        },
        Name$$: "System.String",
        get_Name: function (){
            return this._Name;
        },
        set_Name: function (value){
            this._Name = value;
        },
        FullPath$$: "System.String",
        get_FullPath: function (){
            return this._FullPath;
        },
        set_FullPath: function (value){
            this._FullPath = value;
        },
        Parent$$: "Neptuo.FileSystems.IDirectory",
        get_Parent: function (){
            if (this.parent == null)
                this.parent = Neptuo.FileSystems.LocalDirectory.GetParentDirectoryFromFullPath(this.get_FullPath());
            return this.parent;
        },
        set_Parent: function (value){
            this.parent = value;
        },
        ctor$$IDirectory$$String: function (parent, fullPath){
            this.parent = null;
            this._Name = null;
            this._FullPath = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(parent, "parent");
            Neptuo.Guard.NotNullOrEmpty(fullPath, "fullPath");
            this.set_Parent(parent);
            this.SetDirectoryRelatedProperties(fullPath);
        },
        SetDirectoryRelatedProperties: function (fullPath){
            if (!System.IO.Directory.Exists(fullPath))
                throw $CreateException(Neptuo._GuardArgumentExtensions.Argument(Neptuo.Guard.Exception, "fullPath", "Provided path must be existing directory."), new Error());
            this.set_Name(System.IO.Path.GetFileName(fullPath));
            this.set_FullPath(fullPath);
        },
        EnumerateChildDirectories: function (paths){
            var $yield = [];
            var $it5 = paths.GetEnumerator();
            while ($it5.MoveNext()){
                var path = $it5.get_Current();
                $yield.push(new Neptuo.FileSystems.LocalDirectory.ctor$$IDirectory$$String(this, path));
            }
            return $yield;
        },
        EnumerateAllDirectories: function (paths){
            var $yield = [];
            var $it6 = paths.GetEnumerator();
            while ($it6.MoveNext()){
                var path = $it6.get_Current();
                $yield.push(new Neptuo.FileSystems.LocalDirectory.ctor$$String(path));
            }
            return $yield;
        },
        GetSearchOption: function (inAllDescendants){
            var searchOption = 0;
            if (inAllDescendants)
                searchOption = 1;
            return searchOption;
        },
        EnumerateDirectories: function (){
            return this.EnumerateChildDirectories(System.IO.Directory.GetDirectories$$String(this.get_FullPath()));
        },
        FindDirectories: function (searchPattern, inAllDescendants){
            Neptuo.Guard.NotNullOrEmpty(searchPattern, "searchPattern");
            var paths = System.IO.Directory.GetDirectories$$String$$String$$SearchOption(this.get_FullPath(), searchPattern, this.GetSearchOption(inAllDescendants));
            if (!inAllDescendants)
                return this.EnumerateChildDirectories(paths);
            return this.EnumerateAllDirectories(paths);
        },
        EnumerateFiles: function (){
            var $yield = [];
            var $it7 = System.IO.Directory.GetFiles$$String(this.get_FullPath()).GetEnumerator();
            while ($it7.MoveNext()){
                var path = $it7.get_Current();
                $yield.push(new Neptuo.FileSystems.LocalFile.ctor$$IDirectory$$String(this, path));
            }
            return $yield;
        },
        FindFiles: function (searchPattern, inAllDescendants){
            var $yield = [];
            Neptuo.Guard.NotNullOrEmpty(searchPattern, "searchPattern");
            var paths = System.IO.Directory.GetFiles$$String$$String$$SearchOption(this.get_FullPath(), searchPattern, this.GetSearchOption(inAllDescendants));
            if (!inAllDescendants){
                var $it8 = paths.GetEnumerator();
                while ($it8.MoveNext()){
                    var path = $it8.get_Current();
                    $yield.push(new Neptuo.FileSystems.LocalFile.ctor$$IDirectory$$String(this, path));
                }
            }
            else {
                var $it9 = paths.GetEnumerator();
                while ($it9.MoveNext()){
                    var path = $it9.get_Current();
                    $yield.push(new Neptuo.FileSystems.LocalFile.ctor$$String(path));
                }
            }
            return $yield;
        },
        ContainsDirectoryName: function (directoryName){
            Neptuo.Guard.NotNullOrEmpty(directoryName, "directoryName");
            return System.IO.Directory.Exists(System.IO.Path.Combine$$String$$String(this.get_FullPath(), directoryName));
        },
        ContainsFileName: function (fileName){
            Neptuo.Guard.NotNullOrEmpty(fileName, "fileName");
            return System.IO.File.Exists(System.IO.Path.Combine$$String$$String(this.get_FullPath(), fileName));
        },
        CreateDirectory: function (directoryName){
            Neptuo.Guard.NotNullOrEmpty(directoryName, "directoryName");
            var newDirectory = System.IO.Directory.CreateDirectory$$String(System.IO.Path.Combine$$String$$String(this.get_FullPath(), directoryName));
            return System.Threading.Tasks.Task.FromResult$1(Neptuo.FileSystems.IDirectory.ctor, new Neptuo.FileSystems.LocalDirectory.ctor$$IDirectory$$String(this, newDirectory.get_FullName()));
        },
        CreateFile: function (fileName){
            Neptuo.Guard.NotNullOrEmpty(fileName, "fileName");
            var filePath = System.IO.Path.Combine$$String$$String(this.get_FullPath(), fileName);
            System.IO.File.Create$$String(filePath).Dispose();
            return System.Threading.Tasks.Task.FromResult$1(Neptuo.FileSystems.IFile.ctor, new Neptuo.FileSystems.LocalFile.ctor$$IDirectory$$String(this, filePath));
        }
    },
    ctors: [{
        name: "ctor$$String",
        parameters: ["System.String"]
    }, {
        name: "ctor$$IDirectory$$String",
        parameters: ["Neptuo.FileSystems.IDirectory", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$FileSystems$LocalDirectory);
var Neptuo$FileSystems$LocalFile = {
    fullname: "Neptuo.FileSystems.LocalFile",
    baseTypeName: "System.Object",
    staticDefinition: {
        GetFileSize: function (fullPath){
            return new System.IO.FileInfo.ctor(fullPath).get_Length();
        },
        GetParentDirectoryFromFullPath: function (fullPath){
            return new Neptuo.FileSystems.LocalDirectory.ctor$$String(System.IO.Path.GetDirectoryName(fullPath));
        }
    },
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.FileSystems.IFile"],
    Kind: "Class",
    definition: {
        ctor$$String: function (fullPath){
            this.parent = null;
            this.fileSize = null;
            this._Name = null;
            this._Extension = null;
            this._FullPath = null;
            System.Object.ctor.call(this);
            this.SetFileRelatedProperties(fullPath);
        },
        Name$$: "System.String",
        get_Name: function (){
            return this._Name;
        },
        set_Name: function (value){
            this._Name = value;
        },
        Extension$$: "System.String",
        get_Extension: function (){
            return this._Extension;
        },
        set_Extension: function (value){
            this._Extension = value;
        },
        FullPath$$: "System.String",
        get_FullPath: function (){
            return this._FullPath;
        },
        set_FullPath: function (value){
            this._FullPath = value;
        },
        Parent$$: "Neptuo.FileSystems.IDirectory",
        get_Parent: function (){
            if (this.parent == null)
                this.parent = Neptuo.FileSystems.LocalFile.GetParentDirectoryFromFullPath(this.get_FullPath());
            return this.parent;
        },
        set_Parent: function (value){
            this.parent = value;
        },
        FileSize$$: "System.Int64",
        get_FileSize: function (){
            if (this.fileSize == null)
                this.fileSize = Neptuo.FileSystems.LocalFile.GetFileSize(this.get_FullPath());
            return this.fileSize.get_Value();
        },
        ctor$$IDirectory$$String: function (parent, fullPath){
            this.parent = null;
            this.fileSize = null;
            this._Name = null;
            this._Extension = null;
            this._FullPath = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(parent, "parent");
            Neptuo.Guard.NotNullOrEmpty(fullPath, "fullPath");
            this.set_Parent(parent);
            this.SetFileRelatedProperties(fullPath);
        },
        SetFileRelatedProperties: function (fullPath){
            if (!System.IO.File.Exists(fullPath))
                throw $CreateException(Neptuo._GuardArgumentExtensions.Argument(Neptuo.Guard.Exception, "fullPath", "Provided path must be existing file."), new Error());
            this.set_FullPath(fullPath);
            this.set_Name(System.IO.Path.GetFileNameWithoutExtension(fullPath));
            this.set_Extension(System.IO.Path.GetExtension(fullPath));
        },
        GetContentAsync: function (){
            return System.Threading.Tasks.Task.FromResult$1(System.String.ctor, System.IO.File.ReadAllText$$String(this.get_FullPath()));
        },
        GetContentAsByteArrayAsync: function (){
            return System.Threading.Tasks.Task.FromResult$1(Uint8Array.ctor, System.IO.File.ReadAllBytes(this.get_FullPath()));
        },
        GetContentAsStreamAsync: function (){
            return System.Threading.Tasks.Task.FromResult$1(System.IO.Stream.ctor, new System.IO.FileStream.ctor$$String$$FileMode(this.get_FullPath(), 3));
        },
        SetContentAsync: function (fileContent){
            System.IO.File.WriteAllText$$String$$String(this.get_FullPath(), fileContent);
            return System.Threading.Tasks.Task.FromResult$1(System.Boolean.ctor, true);
        },
        SetContentFromByteArrayAsync: function (fileContent){
            var fileStream = new System.IO.FileStream.ctor$$String$$FileMode(this.get_FullPath(), 4);
            try{
                return fileStream.WriteAsync$$Byte$Array$$Int32$$Int32(fileContent, 0, fileContent.get_Length());
            }
            finally{
                fileStream.Dispose();
            }
        },
        SetContentFromStreamAsync: function (fileContent){
            var fileStream = new System.IO.FileStream.ctor$$String$$FileMode(this.get_FullPath(), 4);
            try{
                return fileContent.CopyToAsync$$Stream(fileStream);
            }
            finally{
                fileStream.Dispose();
            }
        }
    },
    ctors: [{
        name: "ctor$$String",
        parameters: ["System.String"]
    }, {
        name: "ctor$$IDirectory$$String",
        parameters: ["Neptuo.FileSystems.IDirectory", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$FileSystems$LocalFile);
var Neptuo$FileSystems$IDirectory = {
    fullname: "Neptuo.FileSystems.IDirectory",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.FileSystems.IReadOnlyDirectory"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$FileSystems$IDirectory);
var Neptuo$FileSystems$IFile = {
    fullname: "Neptuo.FileSystems.IFile",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.FileSystems.IReadOnlyFile"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$FileSystems$IFile);
var Neptuo$FileSystems$IFileSystem = {
    fullname: "Neptuo.FileSystems.IFileSystem",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$FileSystems$IFileSystem);
var Neptuo$FileSystems$LocalFileSystem = {
    fullname: "Neptuo.FileSystems.LocalFileSystem",
    baseTypeName: "System.Object",
    staticDefinition: {
        FromFilePath: function (filePath){
            Neptuo.Guard.NotNullOrEmpty(filePath, "filePath");
            if (!System.IO.File.Exists(filePath))
                throw $CreateException(Neptuo.FileSystems._GuardExtensions.FileSystem(Neptuo.Guard.Exception, "Can\'t create static file for path \'{0}\', because is doesn\'t point to existing file.", filePath), new Error());
            return new Neptuo.FileSystems.LocalFile.ctor$$String(filePath);
        },
        FromDirectoryPath: function (directoryPath){
            Neptuo.Guard.NotNullOrEmpty(directoryPath, "directoryPath");
            if (!System.IO.Directory.Exists(directoryPath))
                throw $CreateException(Neptuo.FileSystems._GuardExtensions.FileSystem(Neptuo.Guard.Exception, "Can\'t create static directory for path \'{0}\', because is doesn\'t point to existing directory.", directoryPath), new Error());
            return new Neptuo.FileSystems.LocalDirectory.ctor$$String(directoryPath);
        }
    },
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.FileSystems.IFileSystem"],
    Kind: "Class",
    definition: {
        ctor: function (rootPath, isReadOnly){
            this._RootDirectory = null;
            this._IsReadOnly = false;
            System.Object.ctor.call(this);
            if (!System.IO.Path.IsPathRooted(rootPath))
                throw $CreateException(Neptuo._GuardArgumentExtensions.Argument(Neptuo.Guard.Exception, "rootPath", "Path to file system must be rooted."), new Error());
            this.set_RootDirectory(new Neptuo.FileSystems.LocalDirectory.ctor$$String(rootPath));
            this.set_IsReadOnly(isReadOnly);
        },
        RootDirectory$$: "Neptuo.FileSystems.IReadOnlyDirectory",
        get_RootDirectory: function (){
            return this._RootDirectory;
        },
        set_RootDirectory: function (value){
            this._RootDirectory = value;
        },
        IsReadOnly$$: "System.Boolean",
        get_IsReadOnly: function (){
            return this._IsReadOnly;
        },
        set_IsReadOnly: function (value){
            this._IsReadOnly = value;
        },
        IsWriteable: function (directory){
            return this.get_IsReadOnly();
        },
        AsWriteable: function (directory){
            Neptuo.Guard.NotNull$$Object$$String(directory, "directory");
            if (!this.get_IsReadOnly())
                throw $CreateException(Neptuo.FileSystems._GuardExtensions.FileSystem(Neptuo.Guard.Exception, "File system rooted by \'{0}\' is read only.", this.get_RootDirectory().get_FullPath()), new Error());
            var staticDirectory = As(directory, Neptuo.FileSystems.LocalDirectory.ctor);
            if (staticDirectory == null){
                throw $CreateException(Neptuo.FileSystems._GuardExtensions.FileSystem(Neptuo.Guard.Exception, "Passed instance of \'{0}\' into static file system. Static file system operates only on directories of type \'{1}\'.", directory.GetType().get_FullName(), Typeof(Neptuo.FileSystems.LocalDirectory.ctor).get_FullName()), new Error());
            }
            return staticDirectory;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.Boolean"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$FileSystems$LocalFileSystem);
var Neptuo$FileSystems$_GuardExtensions = {
    fullname: "Neptuo.FileSystems._GuardExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        FileSystem: function (guard, format, formatParameters){
            Neptuo.Guard.NotNull$$Object$$String(guard, "guard");
            Neptuo.Guard.NotNullOrEmpty(format, "format");
            return new Neptuo.FileSystems.FileSystemException.ctor$$String(System.String.Format$$String$$Object$Array(format, formatParameters));
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$FileSystems$_GuardExtensions);
var Neptuo$Guard = {
    fullname: "Neptuo.Guard",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.Guard.Exception = new Neptuo.Exceptions.Helpers.GuardExceptionHelper.ctor();
        },
        NotNull$$Object$$String: function (argument, argumentName){
            if (argument == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String(argumentName), new Error());
        },
        NotNull$$Object$$String$$String: function (argument, argumentName, message){
            if (argument == null)
                throw $CreateException(Neptuo._GuardArgumentExtensions.Argument(Neptuo.Guard.Exception, message, argumentName), new Error());
        },
        NotNullOrEmpty: function (argument, argumentName){
            if (argument == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String(argumentName), new Error());
            if (System.String.IsNullOrEmpty(argument))
                throw $CreateException(Neptuo._GuardArgumentExtensions.Argument(Neptuo.Guard.Exception, "Passed argument can\'t be empty string.", argumentName), new Error());
        },
        Positive: function (argument, argumentName){
            if (argument <= 0)
                throw $CreateException(Neptuo._GuardArgumentExtensions.ArgumentOutOfRange(Neptuo.Guard.Exception, argumentName, "Argument must be positive (> 0)."), new Error());
        },
        PositiveOrZero: function (argument, argumentName){
            if (argument < 0)
                throw $CreateException(Neptuo._GuardArgumentExtensions.ArgumentOutOfRange(Neptuo.Guard.Exception, argumentName, "Argument must be positive or zero (>= 0)."), new Error());
        },
        Negative: function (argument, argumentName){
            if (argument >= 0)
                throw $CreateException(Neptuo._GuardArgumentExtensions.ArgumentOutOfRange(Neptuo.Guard.Exception, argumentName, "Argument must be negative (< 0)."), new Error());
        },
        NegativeOrZero: function (argument, argumentName){
            if (argument > 0)
                throw $CreateException(Neptuo._GuardArgumentExtensions.ArgumentOutOfRange(Neptuo.Guard.Exception, argumentName, "Argument must be negative or zero (<= 0)."), new Error());
        },
        NotDisposed: function (argument, argumentName){
            if (argument.get_IsDisposed())
                throw $CreateException(new System.ObjectDisposedException.ctor$$String(argumentName), new Error());
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Guard);
var Neptuo$IDisposable = {
    fullname: "Neptuo.IDisposable",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["System.IDisposable"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$IDisposable);
var Neptuo$ComponentModel$IGuidProvider = {
    fullname: "Neptuo.ComponentModel.IGuidProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$ComponentModel$IGuidProvider);
var Neptuo$INamedActivator$1 = {
    fullname: "Neptuo.INamedActivator$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$INamedActivator$1);
var Neptuo$IParametrizedActivator$1 = {
    fullname: "Neptuo.IParametrizedActivator$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$IParametrizedActivator$1);
var Neptuo$Lifetimes$HierarchicalLifetime$1 = {
    fullname: "Neptuo.Lifetimes.HierarchicalLifetime$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (T){
            this.T = T;
            this._Initialize = null;
            System.Object.ctor.call(this);
        },
        Initialize$$: "System.Action`1[[`0]]",
        get_Initialize: function (){
            return this._Initialize;
        },
        set_Initialize: function (value){
            this._Initialize = value;
        },
        ctor$$Action$1: function (T, initialize){
            this.T = T;
            this._Initialize = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(initialize, "initialize");
            this.set_Initialize(initialize);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }, {
        name: "ctor$$Action",
        parameters: ["System.Action"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Lifetimes$HierarchicalLifetime$1);
var Neptuo$Lifetimes$HierarchicalLifetime = {
    fullname: "Neptuo.Lifetimes.HierarchicalLifetime",
    baseTypeName: "Neptuo.Lifetimes.HierarchicalLifetime$1",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            Neptuo.Lifetimes.HierarchicalLifetime$1.ctor.call(this, System.Object.ctor);
        },
        ctor$$Action$1$Object: function (initialize){
            Neptuo.Lifetimes.HierarchicalLifetime$1.ctor$$Action$1.call(this, System.Object.ctor, initialize);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }, {
        name: "ctor$$Action",
        parameters: ["System.Action"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Lifetimes$HierarchicalLifetime);
var Neptuo$Lifetimes$Mapping$ILifetimeMapping$1 = {
    fullname: "Neptuo.Lifetimes.Mapping.ILifetimeMapping$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Lifetimes$Mapping$ILifetimeMapping$1);
var Neptuo$Lifetimes$SingletonLifetime$1 = {
    fullname: "Neptuo.Lifetimes.SingletonLifetime$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (T){
            this.T = T;
            this._Instance = null;
            this._Initialize = null;
            System.Object.ctor.call(this);
        },
        Instance$$: "`0",
        get_Instance: function (){
            return this._Instance;
        },
        set_Instance: function (value){
            this._Instance = value;
        },
        Initialize$$: "System.Action`1[[`0]]",
        get_Initialize: function (){
            return this._Initialize;
        },
        set_Initialize: function (value){
            this._Initialize = value;
        },
        ctor$$T: function (T, instance){
            this.T = T;
            this._Instance = null;
            this._Initialize = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(instance, "instance");
            this.set_Instance(instance);
        },
        ctor$$Action$1: function (T, initialize){
            this.T = T;
            this._Instance = null;
            this._Initialize = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(initialize, "initialize");
            this.set_Initialize(initialize);
        },
        ctor$$T$$Action$1: function (T, instance, initialize){
            this.T = T;
            this._Instance = null;
            this._Initialize = null;
            Neptuo.Lifetimes.SingletonLifetime$1.ctor$$T.call(this, this.T, instance);
            Neptuo.Guard.NotNull$$Object$$String(instance, "instance");
            Neptuo.Guard.NotNull$$Object$$String(initialize, "initialize");
            this.set_Initialize(initialize);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }, {
        name: "ctor$$T",
        parameters: ["T"]
    }, {
        name: "ctor$$Action",
        parameters: ["System.Action"]
    }, {
        name: "ctor$$T$$Action",
        parameters: ["T", "System.Action"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Lifetimes$SingletonLifetime$1);
var Neptuo$Lifetimes$SingletonLifetime = {
    fullname: "Neptuo.Lifetimes.SingletonLifetime",
    baseTypeName: "Neptuo.Lifetimes.SingletonLifetime$1",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            Neptuo.Lifetimes.SingletonLifetime$1.ctor.call(this, System.Object.ctor);
        },
        ctor$$Object: function (instance){
            Neptuo.Lifetimes.SingletonLifetime$1.ctor$$T.call(this, System.Object.ctor, instance);
        },
        ctor$$Action$1$Object: function (initialize){
            Neptuo.Lifetimes.SingletonLifetime$1.ctor$$Action$1.call(this, System.Object.ctor, initialize);
        },
        ctor$$Object$$Action$1$Object: function (instance, initialize){
            Neptuo.Lifetimes.SingletonLifetime$1.ctor$$T$$Action$1.call(this, System.Object.ctor, instance, initialize);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }, {
        name: "ctor$$Object",
        parameters: ["System.Object"]
    }, {
        name: "ctor$$Action",
        parameters: ["System.Action"]
    }, {
        name: "ctor$$Object$$Action",
        parameters: ["System.Object", "System.Action"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Lifetimes$SingletonLifetime);
var Neptuo$Globalization$CultureInfoExtensions = {
    fullname: "Neptuo.Globalization.CultureInfoExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        TryParse: function (value, cultureInfo){
            if (System.String.IsNullOrEmpty(value) || (value.get_Length() != 5 && value.get_Length() != 2)){
                cultureInfo.Value = null;
                return false;
            }
            var $it10 = System.Globalization.CultureInfo.GetCultures(7).GetEnumerator();
            while ($it10.MoveNext()){
                var item = $it10.get_Current();
                if ((value.get_Length() == 5 && item.get_Name().ToLowerInvariant() == value.ToLowerInvariant()) || (value.get_Length() == 2 && item.get_TwoLetterISOLanguageName().ToLowerInvariant() == value.ToLowerInvariant())){
                    cultureInfo.Value = item;
                    return true;
                }
            }
            cultureInfo.Value = null;
            return false;
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Globalization$CultureInfoExtensions);
var Neptuo$IActivator$1 = {
    fullname: "Neptuo.IActivator$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$IActivator$1);
var Neptuo$IDependencyContainer = {
    fullname: "Neptuo.IDependencyContainer",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.IDependencyProvider"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$IDependencyContainer);
var Neptuo$IDependencyProvider = {
    fullname: "Neptuo.IDependencyProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$IDependencyProvider);
var Neptuo$Lifetimes$GetterLifetime = {
    fullname: "Neptuo.Lifetimes.GetterLifetime",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (factory){
            this._Factory = null;
            System.Object.ctor.call(this);
            this.set_Factory(factory);
        },
        Factory$$: "System.Func`1[[System.Object]]",
        get_Factory: function (){
            return this._Factory;
        },
        set_Factory: function (value){
            this._Factory = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Func"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Lifetimes$GetterLifetime);
var Neptuo$Lifetimes$Mapping$ILifetimeMapper$1 = {
    fullname: "Neptuo.Lifetimes.Mapping.ILifetimeMapper$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Lifetimes$Mapping$ILifetimeMapper$1);
var Neptuo$Lifetimes$Mapping$LifetimeMapperBase$2 = {
    fullname: "Neptuo.Lifetimes.Mapping.LifetimeMapperBase$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Lifetimes.Mapping.ILifetimeMapper$1"],
    Kind: "Class",
    definition: {
        ctor: function (TBaseLifetimeManager, TLifetime){
            this.TBaseLifetimeManager = TBaseLifetimeManager;
            this.TLifetime = TLifetime;
            System.Object.ctor.call(this);
        },
        Map$$Object: function (lifetime){
            return this.Map$$TLifetime(Cast(lifetime, this.TLifetime));
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$Lifetimes$Mapping$LifetimeMapperBase$2);
var Neptuo$Lifetimes$Mapping$LifetimeMapping$1 = {
    fullname: "Neptuo.Lifetimes.Mapping.LifetimeMapping$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (TBaseLifetimeManager){
            this.TBaseLifetimeManager = TBaseLifetimeManager;
            this._Registry = null;
            System.Object.ctor.call(this);
            this.set_Registry(new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, Neptuo.Lifetimes.Mapping.ILifetimeMapper$1.ctor));
        },
        Registry$$: "System.Collections.Generic.Dictionary`2[[System.Type],[Neptuo.Lifetimes.Mapping.ILifetimeMapper`1[[`0]]]]",
        get_Registry: function (){
            return this._Registry;
        },
        set_Registry: function (value){
            this._Registry = value;
        },
        ctor$$Dictionary$2: function (TBaseLifetimeManager, registry){
            this.TBaseLifetimeManager = TBaseLifetimeManager;
            this._Registry = null;
            System.Object.ctor.call(this);
            this.set_Registry(new System.Collections.Generic.Dictionary$2.ctor$$IDictionary$2(System.Type.ctor, Neptuo.Lifetimes.Mapping.ILifetimeMapper$1.ctor, registry));
        },
        Map: function (lifetimeType, mapper){
            Neptuo.Guard.NotNull$$Object$$String(lifetimeType, "lifetimeType");
            Neptuo.Guard.NotNull$$Object$$String(mapper, "mapper");
            this.get_Registry().set_Item$$TKey(lifetimeType, mapper);
            return this;
        },
        Resolve: function (lifetime){
            Neptuo.Guard.NotNull$$Object$$String(lifetime, "lifetime");
            var lifetimeType = lifetime.GetType();
            var mapper;
            if (!(function (){
                var $1 = {
                    Value: mapper
                };
                var $res = this.get_Registry().TryGetValue(lifetimeType, $1);
                mapper = $1.Value;
                return $res;
            }).call(this))
                throw $CreateException(Neptuo._GuardArgumentExtensions.ArgumentOutOfRange(Neptuo.Guard.Exception, "lifetime", "Unregistered lifetime \'{0}\'.", lifetimeType.get_FullName()), new Error());
            return mapper.Map(lifetime);
        },
        CreateChildMapping: function (){
            return new Neptuo.Lifetimes.Mapping.LifetimeMapping$1.ctor$$Dictionary$2(this.TBaseLifetimeManager, this.get_Registry());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }, {
        name: "ctor$$Dictionary",
        parameters: ["System.Collections.Generic.Dictionary"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Lifetimes$Mapping$LifetimeMapping$1);
var Neptuo$Linq$Expressions$CompiledExpression = {
    fullname: "Neptuo.Linq.Expressions.CompiledExpression",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        BoxedGet$$: "System.Linq.Expressions.LambdaExpression"
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$Linq$Expressions$CompiledExpression);
var Neptuo$Linq$Expressions$CompiledExpression$2 = {
    fullname: "Neptuo.Linq.Expressions.CompiledExpression$2",
    baseTypeName: "Neptuo.Linq.Expressions.CompiledExpression",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (T, TResult){
            this.T = T;
            this.TResult = TResult;
            this.expression = null;
            this.function = null;
            Neptuo.Linq.Expressions.CompiledExpression.ctor.call(this);
        },
        ctor$$Expression$1: function (T, TResult, expression){
            this.T = T;
            this.TResult = TResult;
            this.expression = null;
            this.function = null;
            Neptuo.Linq.Expressions.CompiledExpression.ctor.call(this);
            this.expression = expression;
            this.function = expression.Compile();
        },
        Evaluate: function (instance){
            return this.function(instance);
        },
        BoxedGet$$: "System.Linq.Expressions.LambdaExpression",
        get_BoxedGet: function (){
            return this.expression;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }, {
        name: "ctor$$Expression",
        parameters: ["System.Linq.Expressions.Expression"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Linq$Expressions$CompiledExpression$2);
var Neptuo$Linq$Expressions$DefaultTranslationOf$1 = {
    fullname: "Neptuo.Linq.Expressions.DefaultTranslationOf$1",
    baseTypeName: "System.Object",
    staticDefinition: {
        Property$1$$Expression$1$$Expression$1: function (TResult, property, expression){
            return Neptuo.Linq.Expressions.TranslationMap.defaultMap.Add$2$$Expression$1$$Expression$1(this.T, TResult, property, expression);
        },
        Property$1$$Expression$1: function (TResult, property){
            return new Neptuo.Linq.Expressions.DefaultTranslationOf.IncompletePropertyTranslation$2.ctor(this.T, TResult, property);
        },
        Evaluate$1: function (TResult, instance, method){
            var compiledExpression = Neptuo.Linq.Expressions.TranslationMap.defaultMap.Get$2(this.T, TResult, method);
            return compiledExpression.Evaluate(instance);
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (T){
            this.T = T;
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Linq$Expressions$DefaultTranslationOf$1);
var Neptuo$Linq$Expressions$DefaultTranslationOf$IncompletePropertyTranslation$2 = {
    fullname: "Neptuo.Linq.Expressions.DefaultTranslationOf.IncompletePropertyTranslation$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (T, TResult, property){
            this.T = T;
            this.TResult = TResult;
            this.property = null;
            System.Object.ctor.call(this);
            this.property = property;
        },
        Is: function (expression){
            return Neptuo.Linq.Expressions.DefaultTranslationOf$1.Property$1$$Expression$1$$Expression$1(this.TResult, this.property, expression);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Linq.Expressions.Expression"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Linq$Expressions$DefaultTranslationOf$IncompletePropertyTranslation$2);
var Neptuo$Linq$Expressions$TranslationMap = {
    fullname: "Neptuo.Linq.Expressions.TranslationMap",
    baseTypeName: "System.Collections.Generic.Dictionary$2",
    staticDefinition: {
        cctor: function (){
            Neptuo.Linq.Expressions.TranslationMap.defaultMap = new Neptuo.Linq.Expressions.TranslationMap.ctor();
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Collections.Generic.Dictionary$2.ctor.call(this, System.Reflection.MemberInfo.ctor, Neptuo.Linq.Expressions.CompiledExpression.ctor);
        },
        Get$2: function (T, TResult, method){
            var propertyInfo = method.get_DeclaringType().GetProperty$$String(method.get_Name().Replace$$String$$String("get_", System.String.Empty));
            return As(this.get_Item$$TKey(propertyInfo), Neptuo.Linq.Expressions.CompiledExpression$2.ctor);
        },
        Add$2$$Expression$1$$CompiledExpression$2: function (T, TResult, property, compiledExpression){
            System.Collections.Generic.Dictionary$2.commonPrototype.Add.call(this, (Cast(property.get_Body(), System.Linq.Expressions.MemberExpression.ctor)).get_Member(), compiledExpression);
        },
        Add$2$$Expression$1$$Expression$1: function (T, TResult, property, expression){
            var compiledExpression = new Neptuo.Linq.Expressions.CompiledExpression$2.ctor$$Expression$1(T, TResult, expression);
            this.Add$2$$Expression$1$$CompiledExpression$2(T, TResult, property, compiledExpression);
            return compiledExpression;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Linq$Expressions$TranslationMap);
var Neptuo$OutFunc$3 = {
    fullname: "Neptuo.OutFunc$3",
    Kind: "Delegate",
    definition: {
        ctor: function (T, TOutput, TReturn, obj, func){
            this.T = T;
            this.TOutput = TOutput;
            this.TReturn = TReturn;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Object", "System.IntPtr"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$OutFunc$3);
var Neptuo$VersionInfo = {
    fullname: "Neptuo.VersionInfo",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.VersionInfo.Version = "3.5.4";
        },
        GetVersion: function (){
            return new System.Version.ctor$$String("3.5.4");
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$VersionInfo);
var Neptuo$Reflection$ReflectionHelper = {
    fullname: "Neptuo.Reflection.ReflectionHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        GetAttribute$1: function (T, member){
            var attrs = Cast(member.GetCustomAttributes$$Type$$Boolean(Typeof(T), true), Array.ctor);
            if (attrs.get_Length() == 1)
                return attrs[0];
            else
                return null;
        },
        GetTypesInNamespace: function (newNamespace){
            var targetAssembly = System.Reflection.Assembly.GetExecutingAssembly();
            var parts = newNamespace.Split$$Char$Array(",");
            if (parts.get_Length() == 2)
                targetAssembly = System.Reflection.Assembly.Load$$String(parts[1]);
            return System.Linq.Enumerable.ToList$1(System.Type.ctor, System.Linq.Enumerable.Where$1$$IEnumerable$1$$Func$2(System.Type.ctor, targetAssembly.GetTypes(), function (t){
                return t.get_Namespace() == parts[0];
            }));
        },
        GetAnnotatedProperties$1: function (T, type){
            var result = new System.Collections.Generic.List$1.ctor(System.Reflection.PropertyInfo.ctor);
            var $it11 = type.GetProperties().GetEnumerator();
            while ($it11.MoveNext()){
                var prop = $it11.get_Current();
                if (prop.GetCustomAttributes$$Type$$Boolean(Typeof(T), true).get_Length() == 1)
                    result.Add(prop);
            }
            return result;
        },
        IsGenericType$2$$Type: function (TAssignable, TArgument, testedType){
            return Neptuo.Reflection.ReflectionHelper.IsGenericType$$Type$$Type$$Type(testedType, Typeof(TAssignable), Typeof(TArgument));
        },
        IsGenericType$1$$Type: function (TAssignable, testedType){
            return Neptuo.Reflection.ReflectionHelper.IsGenericType$$Type$$Type(testedType, Typeof(TAssignable));
        },
        IsGenericType$$Type$$Type$$Type: function (testedType, assignableType, argumentType){
            if (System.Type.op_Equality$$Type$$Type(argumentType, null))
                return false;
            return assignableType.IsAssignableFrom(testedType) && testedType.get_IsGenericType() && (testedType.GetGenericArguments()[0].IsAssignableFrom(argumentType) || argumentType.IsAssignableFrom(testedType.GetGenericArguments()[0]));
        },
        IsGenericType$$Type$$Type: function (testedType, assignableType){
            return assignableType.IsAssignableFrom(testedType) && testedType.get_IsGenericType();
        },
        GetGenericArgument: function (type, index){
            if (!type.get_IsGenericType())
                return null;
            return type.GetGenericArguments()[index];
        },
        CanBeUsedInMarkup: function (type, requireDefaultCtor){
            if (type.get_IsInterface())
                return false;
            if (type.get_IsAbstract())
                return false;
            if (requireDefaultCtor){
                if (System.Reflection.ConstructorInfo.op_Equality$$ConstructorInfo$$ConstructorInfo(type.GetConstructor$$Type$Array(new Array(0)), null))
                    return false;
            }
            return true;
        },
        PropertyName$$Expression$1: function (propertyGetter){
            return (As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) != null ? As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) : As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MemberExpression.ctor)).get_Member().get_Name();
        },
        PropertyName$1$$Expression$1: function (T, propertyGetter){
            return (As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) != null ? As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) : As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MemberExpression.ctor)).get_Member().get_Name();
        },
        PropertyName$2$$Expression$1: function (T, TResult, propertyGetter){
            return (As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) != null ? As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) : As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MemberExpression.ctor)).get_Member().get_Name();
        },
        MethodName$2$$Expression$1: function (T, TParam1, propertyGetter){
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Arguments().get_Item$$Int32(2), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$3$$Expression$1: function (T, TParam1, TParam2, propertyGetter){
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Arguments().get_Item$$Int32(2), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$4$$Expression$1: function (T, TParam1, TParam2, TParam3, propertyGetter){
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Arguments().get_Item$$Int32(2), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$1$$Expression$1: function (T, propertyGetter){
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Arguments().get_Item$$Int32(2), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$5$$Expression$1: function (T, TParam1, TParam2, TParam3, TParam4, propertyGetter){
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Arguments().get_Item$$Int32(2), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Reflection$ReflectionHelper);
var Neptuo$Security$Cryptography$HashHelper = {
    fullname: "Neptuo.Security.Cryptography.HashHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        Sha1: function (text){
            var hasher = System.Security.Cryptography.SHA1.Create();
            var hash = hasher.ComputeHash$$Byte$Array(System.Text.Encoding.get_UTF8().GetBytes$$String(text));
            var result = new System.Text.StringBuilder.ctor();
            var $it12 = hash.GetEnumerator();
            while ($it12.MoveNext()){
                var hashPart = $it12.get_Current();
                result.Append$$String(hashPart.ToString$$String("X2"));
            }
            return result.ToString();
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Security$Cryptography$HashHelper);
var Neptuo$Linq$Expressions$TypeHelper = {
    fullname: "Neptuo.Linq.Expressions.TypeHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        PropertyName$1$$Expression$1: function (T, propertyGetter){
            return (As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) != null ? As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) : As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MemberExpression.ctor)).get_Member().get_Name();
        },
        PropertyName$2$$Expression$1: function (T, TResult, propertyGetter){
            return (As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) != null ? As(propertyGetter.get_Body(), System.Linq.Expressions.MemberExpression.ctor) : As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MemberExpression.ctor)).get_Member().get_Name();
        },
        MethodName$2$$Expression$1: function (T, TParam1, propertyGetter){
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Object(), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$3$$Expression$1: function (T, TParam1, TParam2, propertyGetter){
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Object(), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$4$$Expression$1: function (T, TParam1, TParam2, TParam3, propertyGetter){
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Object(), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$5$$Expression$1: function (T, TParam1, TParam2, TParam3, TParam4, propertyGetter){
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Object(), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$6$$Expression$1: function (T, TParam1, TParam2, TParam3, TParam4, TResult, propertyGetter){
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Object(), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        },
        MethodName$1$$Expression$1: function (T, propertyGetter){
            return (As((As((As((Cast(propertyGetter.get_Body(), System.Linq.Expressions.UnaryExpression.ctor)).get_Operand(), System.Linq.Expressions.MethodCallExpression.ctor)).get_Object(), System.Linq.Expressions.ConstantExpression.ctor)).get_Value(), System.Reflection.MethodInfo.ctor)).get_Name();
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Linq$Expressions$TypeHelper);
var Neptuo$ComponentModel$SequenceGuidProvider = {
    fullname: "Neptuo.ComponentModel.SequenceGuidProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.ComponentModel.IGuidProvider"],
    Kind: "Class",
    definition: {
        ctor: function (prefix, offset){
            this.prefix = null;
            this.offset = 0;
            System.Object.ctor.call(this);
            Neptuo.Guard.PositiveOrZero(offset, "offset");
            this.prefix = prefix;
            this.offset = offset;
        },
        Next: function (){
            return this.prefix + (++this.offset);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.Int32"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$ComponentModel$SequenceGuidProvider);
var Neptuo$Security$Cryptography$HashFunc = {
    fullname: "Neptuo.Security.Cryptography.HashFunc",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Object", "System.IntPtr"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Security$Cryptography$HashFunc);
var Neptuo$Security$Cryptography$HashProvider = {
    fullname: "Neptuo.Security.Cryptography.HashProvider",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.Security.Cryptography.HashProvider.sha1 = null;
            Neptuo.Security.Cryptography.HashProvider.sha1Lock = new System.Object.ctor();
            Neptuo.Security.Cryptography.HashProvider.sha256 = null;
            Neptuo.Security.Cryptography.HashProvider.sha256Lock = new System.Object.ctor();
        },
        Sha1$$: "Neptuo.Security.Cryptography.HashFunc",
        get_Sha1: function (){
            if (System.MulticastDelegate.op_Equality$$MulticastDelegate$$MulticastDelegate(Neptuo.Security.Cryptography.HashProvider.sha1, null)){
                if (System.MulticastDelegate.op_Equality$$MulticastDelegate$$MulticastDelegate(Neptuo.Security.Cryptography.HashProvider.sha1, null))
                    Neptuo.Security.Cryptography.HashProvider.sha1 = Neptuo.Security.Cryptography.HashProvider.CreateSha1();
            }
            return Neptuo.Security.Cryptography.HashProvider.sha1;
        },
        Sha256$$: "Neptuo.Security.Cryptography.HashFunc",
        get_Sha256: function (){
            if (System.MulticastDelegate.op_Equality$$MulticastDelegate$$MulticastDelegate(Neptuo.Security.Cryptography.HashProvider.sha256, null)){
                if (System.MulticastDelegate.op_Equality$$MulticastDelegate$$MulticastDelegate(Neptuo.Security.Cryptography.HashProvider.sha256, null))
                    Neptuo.Security.Cryptography.HashProvider.sha256 = Neptuo.Security.Cryptography.HashProvider.CreateSha256();
            }
            return Neptuo.Security.Cryptography.HashProvider.sha256;
        },
        CreateProvider: function (algorithm){
            Neptuo.Guard.NotNull$$Object$$String(algorithm, "algorithm");
            return function (source){
                var hash = algorithm.ComputeHash$$Byte$Array(System.Text.Encoding.get_UTF8().GetBytes$$String(source));
                var result = new System.Text.StringBuilder.ctor();
                var $it13 = hash.GetEnumerator();
                while ($it13.MoveNext()){
                    var hashPart = $it13.get_Current();
                    result.Append$$String(hashPart.ToString$$String("X2"));
                }
                return result.ToString();
            };
        },
        CreateSha1: function (){
            return Neptuo.Security.Cryptography.HashProvider.CreateProvider(System.Security.Cryptography.SHA1.Create());
        },
        CreateSha256: function (){
            return Neptuo.Security.Cryptography.HashProvider.CreateProvider(System.Security.Cryptography.SHA256.Create());
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Security$Cryptography$HashProvider);
var Neptuo$StateMachines$IStateMachineState$2 = {
    fullname: "Neptuo.StateMachines.IStateMachineState$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$StateMachines$IStateMachineState$2);
var Neptuo$StateMachines$IStringState$1 = {
    fullname: "Neptuo.StateMachines.IStringState$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.StateMachines.IStateMachineState$2"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$StateMachines$IStringState$1);
var Neptuo$StateMachines$StateMachine$2 = {
    fullname: "Neptuo.StateMachines.StateMachine$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (TItem, TState, initialState){
            this.TItem = TItem;
            this.TState = TState;
            this.OnEnterState = null;
            this.OnLeaveState = null;
            this._InitialState = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(initialState, "initialState");
            this.set_InitialState(initialState);
        },
        InitialState$$: "`1",
        get_InitialState: function (){
            return this._InitialState;
        },
        set_InitialState: function (value){
            this._InitialState = value;
        },
        add_OnEnterState: function (value){
            this.OnEnterState = $CombineDelegates(this.OnEnterState, value);
        },
        remove_OnEnterState: function (value){
            this.OnEnterState = $RemoveDelegate(this.OnEnterState, value);
        },
        add_OnLeaveState: function (value){
            this.OnLeaveState = $CombineDelegates(this.OnLeaveState, value);
        },
        remove_OnLeaveState: function (value){
            this.OnLeaveState = $RemoveDelegate(this.OnLeaveState, value);
        },
        OnEnterConcreteState$1: function (TConcreteState, handler){
            Neptuo.Guard.NotNull$$Object$$String(handler, "handler");
            this.add_OnEnterState($CreateAnonymousDelegate(this, function (sender, e){
                if (System.Type.op_Equality$$Type$$Type(e.get_State().GetType(), Typeof(TConcreteState)))
                    handler(this, new Neptuo.StateMachines.StateMachineEventArgs$1.ctor(TConcreteState, Cast(e.get_State(), TConcreteState)));
            }));
        },
        OnLeaveConcreteState$1: function (TConcreteState, handler){
            Neptuo.Guard.NotNull$$Object$$String(handler, "handler");
            this.add_OnLeaveState($CreateAnonymousDelegate(this, function (sender, e){
                if (System.Type.op_Equality$$Type$$Type(e.get_State().GetType(), Typeof(TConcreteState)))
                    handler(this, new Neptuo.StateMachines.StateMachineEventArgs$1.ctor(TConcreteState, Cast(e.get_State(), TConcreteState)));
            }));
        },
        Process: function (items){
            Neptuo.Guard.NotNull$$Object$$String(items, "items");
            var currentState = this.get_InitialState();
            var index = 0;
            var $it14 = items.GetEnumerator();
            while ($it14.MoveNext()){
                var item = $it14.get_Current();
                var newState = currentState.Accept(item, index);
                if (newState == null)
                    throw $CreateException(Neptuo._GuardSystemExtensions.InvalidOperation(Neptuo.Guard.Exception, "StateMachine in invalid state, got null new state."), new Error());
                if (newState != currentState){
                    if (System.MulticastDelegate.op_Inequality$$MulticastDelegate$$MulticastDelegate(this.OnLeaveState, null))
                        this.OnLeaveState(this, new Neptuo.StateMachines.StateMachineEventArgs$1.ctor(this.TState, currentState));
                    if (System.MulticastDelegate.op_Inequality$$MulticastDelegate$$MulticastDelegate(this.OnEnterState, null))
                        this.OnEnterState(this, new Neptuo.StateMachines.StateMachineEventArgs$1.ctor(this.TState, newState));
                }
                currentState = newState;
                index++;
            }
            return currentState;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["TState"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$StateMachines$StateMachine$2);
var Neptuo$StateMachines$StateMachineEventArgs$1 = {
    fullname: "Neptuo.StateMachines.StateMachineEventArgs$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (TState, state){
            this.TState = TState;
            this._State = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(state, "state");
            this.set_State(state);
        },
        State$$: "`0",
        get_State: function (){
            return this._State;
        },
        set_State: function (value){
            this._State = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["TState"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$StateMachines$StateMachineEventArgs$1);
var Neptuo$StateMachines$StringState$2 = {
    fullname: "Neptuo.StateMachines.StringState$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.StateMachines.IStringState$1"],
    Kind: "Class",
    definition: {
        ctor: function (TContext, TState){
            this.TContext = TContext;
            this.TState = TState;
            this._Text = null;
            this._Context = null;
            System.Object.ctor.call(this);
            this.set_Text(new System.Text.StringBuilder.ctor());
        },
        Text$$: "System.Text.StringBuilder",
        get_Text: function (){
            return this._Text;
        },
        set_Text: function (value){
            this._Text = value;
        },
        Context$$: "`0",
        get_Context: function (){
            return this._Context;
        },
        set_Context: function (value){
            this._Context = value;
        },
        Move$1: function (TNewState){
            var newState = new TNewState();
            newState.set_Context(this.GetContextForNewState());
            return newState;
        },
        GetContextForNewState: function (){
            return this.get_Context();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$StateMachines$StringState$2);
var Neptuo$StringConvertBase = {
    fullname: "Neptuo.StringConvertBase",
    baseTypeName: "System.Object",
    staticDefinition: {
        Convert$1: function (TType, value, func, defaultValue){
            var converted = defaultValue;
            if ((function (){
                var $1 = {
                    Value: converted
                };
                var $res = func(value, $1);
                converted = $1.Value;
                return $res;
            })())
                return converted;
            return defaultValue;
        },
        ConvertNull$1: function (TType, value, func){
            var converted = Default(TType);
            if ((function (){
                var $1 = {
                    Value: converted
                };
                var $res = func(value, $1);
                converted = $1.Value;
                return $res;
            })())
                return converted;
            return null;
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$StringConvertBase);
var Neptuo$StringConvert$1 = {
    fullname: "Neptuo.StringConvert$1",
    baseTypeName: "Neptuo.StringConvertBase",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (T, provider){
            this.T = T;
            this.provider = null;
            Neptuo.StringConvertBase.ctor.call(this);
            this.provider = provider;
        },
        Value: function (model, name, defaultValue){
            return (this.provider.GetValue(model, name) != null ? this.provider.GetValue(model, name) : defaultValue);
        },
        Bool: function (model, name, defaultValue){
            return (this.BoolNull(model, name) != null ? this.BoolNull(model, name) : defaultValue);
        },
        BoolNull: function (model, name){
            return Neptuo.StringConvertBase.ConvertNull$1(System.Boolean.ctor, this.provider.GetValue(model, name), System.Boolean.TryParse);
        },
        Int: function (model, name, defaultValue){
            return (this.IntNull(model, name) != null ? this.IntNull(model, name) : defaultValue);
        },
        IntNull: function (model, name){
            return Neptuo.StringConvertBase.ConvertNull$1(System.Int32.ctor, this.provider.GetValue(model, name), System.Int32.TryParse$$String$$Int32);
        },
        Long: function (model, name, defaultValue){
            return (this.LongNull(model, name) != null ? this.LongNull(model, name) : defaultValue);
        },
        LongNull: function (model, name){
            return Neptuo.StringConvertBase.ConvertNull$1(System.Int64.ctor, this.provider.GetValue(model, name), System.Int64.TryParse$$String$$Int64);
        },
        Decimal: function (model, name, defaultValue){
            return (this.DecimalNull(model, name) != null ? this.DecimalNull(model, name) : defaultValue);
        },
        DecimalNull: function (model, name){
            return Neptuo.StringConvertBase.ConvertNull$1(System.Decimal.ctor, this.provider.GetValue(model, name), System.Decimal.TryParse$$String$$Decimal);
        },
        Double: function (model, name, defaultValue){
            return (this.DoubleNull(model, name) != null ? this.DoubleNull(model, name) : defaultValue);
        },
        DoubleNull: function (model, name){
            return Neptuo.StringConvertBase.ConvertNull$1(System.Double.ctor, this.provider.GetValue(model, name), System.Double.TryParse$$String$$Double);
        },
        DateTime: function (model, key, defaultValue){
            return (this.DateTimeNull(model, key) != null ? this.DateTimeNull(model, key) : (defaultValue != null ? defaultValue : System.DateTime.get_Now()));
        },
        DateTimeNull: function (model, key){
            var value = this.provider.GetValue(model, key);
            if (value == null)
                return null;
            var dateTime;
            if ((function (){
                var $1 = {
                    Value: dateTime
                };
                var $res = System.DateTime.TryParse$$String$$DateTime(value, $1);
                dateTime = $1.Value;
                return $res;
            }).call(this))
                return dateTime;
            var ticks;
            if ((function (){
                var $1 = {
                    Value: ticks
                };
                var $res = System.Int64.TryParse$$String$$Int64(value, $1);
                ticks = $1.Value;
                return $res;
            }).call(this))
                return new System.DateTime.ctor$$Int64(ticks);
            return null;
        },
        Culture: function (model, key, defaultValue){
            return (this.CultureNull(model, key) != null ? this.CultureNull(model, key) : defaultValue);
        },
        CultureNull: function (model, key){
            var value = this.provider.GetValue(model, key);
            if (value == null)
                return null;
            return System.Globalization.CultureInfo.GetCultureInfo$$String(value);
        },
        Enum$1: function (TEnum, model, name, defaultValue){
            return (this.EnumNull$1(TEnum, model, name) != null ? this.EnumNull$1(TEnum, model, name) : defaultValue);
        },
        EnumNull$1: function (TEnum, model, name){
            var attr = this.provider.GetValue(model, name);
            if (attr != null){
                var val;
                if ((function (){
                    var $1 = {
                        Value: val
                    };
                    var $res = System.Enum.TryParse$1$$String$$TEnum(TEnum, attr, $1);
                    val = $1.Value;
                    return $res;
                }).call(this))
                    return val;
            }
            return null;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.IStringValueProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$StringConvert$1);
var Neptuo$IStringConvert = {
    fullname: "Neptuo.IStringConvert",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$IStringConvert);
var Neptuo$StringStringConvert$1 = {
    fullname: "Neptuo.StringStringConvert$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.IStringConvert"],
    Kind: "Class",
    definition: {
        ctor: function (T, provider, model){
            this.T = T;
            this.convert = null;
            this.model = null;
            System.Object.ctor.call(this);
            this.convert = new Neptuo.StringConvert$1.ctor(this.T, provider);
            this.model = model;
        },
        Bool: function (name, defaultValue){
            return this.convert.Bool(this.model, name, defaultValue);
        },
        BoolNull: function (name){
            return this.convert.BoolNull(this.model, name);
        },
        Culture: function (key, defaultValue){
            return this.convert.Culture(this.model, key, defaultValue);
        },
        CultureNull: function (key){
            return this.convert.CultureNull(this.model, key);
        },
        DateTime: function (key, defaultValue){
            return this.convert.DateTime(this.model, key, defaultValue);
        },
        DateTimeNull: function (key){
            return this.convert.DateTimeNull(this.model, key);
        },
        Decimal: function (name, defaultValue){
            return this.convert.Decimal(this.model, name, defaultValue);
        },
        DecimalNull: function (name){
            return this.convert.DecimalNull(this.model, name);
        },
        Double: function (name, defaultValue){
            return this.convert.Double(this.model, name, defaultValue);
        },
        DoubleNull: function (name){
            return this.convert.DoubleNull(this.model, name);
        },
        Enum$1: function (TEnum, name, defaultValue){
            return this.convert.Enum$1(TEnum, this.model, name, defaultValue);
        },
        EnumNull$1: function (TEnum, name){
            return this.convert.EnumNull$1(TEnum, this.model, name);
        },
        Int: function (key, defaultValue){
            return this.convert.Int(this.model, key, defaultValue);
        },
        IntNull: function (name){
            return this.convert.IntNull(this.model, name);
        },
        Long: function (name, defaultValue){
            return this.convert.Long(this.model, name, defaultValue);
        },
        LongNull: function (name){
            return this.convert.LongNull(this.model, name);
        },
        Value: function (name, defaultValue){
            return this.convert.Value(this.model, name, defaultValue);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.IStringValueProvider", "T"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$StringStringConvert$1);
var Neptuo$IStringValueProvider$1 = {
    fullname: "Neptuo.IStringValueProvider$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$IStringValueProvider$1);
var Neptuo$StateMachines$StringStateMachine$1 = {
    fullname: "Neptuo.StateMachines.StringStateMachine$1",
    baseTypeName: "Neptuo.StateMachines.StateMachine$2",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (TState, initialState){
            this.TState = TState;
            Neptuo.StateMachines.StateMachine$2.ctor.call(this, System.Char.ctor, this.TState, initialState);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["TState"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$StateMachines$StringStateMachine$1);
var Neptuo$Tokens$Token = {
    fullname: "Neptuo.Tokens.Token",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._Prefix = null;
            this._Name = null;
            this._Attributes = null;
            this._DefaultAttributes = null;
            System.Object.ctor.call(this);
            this.set_Attributes(new System.Collections.Generic.List$1.ctor(Neptuo.Tokens.TokenAttribute.ctor));
            this.set_DefaultAttributes(new System.Collections.Generic.List$1.ctor(System.String.ctor));
        },
        Prefix$$: "System.String",
        get_Prefix: function (){
            return this._Prefix;
        },
        set_Prefix: function (value){
            this._Prefix = value;
        },
        Name$$: "System.String",
        get_Name: function (){
            return this._Name;
        },
        set_Name: function (value){
            this._Name = value;
        },
        Fullname$$: "System.String",
        get_Fullname: function (){
            if (System.String.IsNullOrEmpty(this.get_Prefix()))
                return this.get_Name();
            return this.get_Prefix() + ":" + this.get_Name();
        },
        set_Fullname: function (value){
            var index = value.IndexOf$$Char(":");
            if (index != -1){
                this.set_Prefix(value.Substring$$Int32$$Int32(0, index));
                this.set_Name(value.Substring$$Int32(index + 1));
            }
            else {
                this.set_Name(value);
            }
        },
        Attributes$$: "System.Collections.Generic.List`1[[Neptuo.Tokens.TokenAttribute]]",
        get_Attributes: function (){
            return this._Attributes;
        },
        set_Attributes: function (value){
            this._Attributes = value;
        },
        DefaultAttributes$$: "System.Collections.Generic.List`1[[System.String]]",
        get_DefaultAttributes: function (){
            return this._DefaultAttributes;
        },
        set_DefaultAttributes: function (value){
            this._DefaultAttributes = value;
        },
        ToString: function (){
            var result = new System.Text.StringBuilder.ctor$$String("{" + this.get_Fullname());
            var isFirstAttribute = true;
            var $it15 = this.get_DefaultAttributes().GetEnumerator();
            while ($it15.MoveNext()){
                var defaultAttribute = $it15.get_Current();
                if (isFirstAttribute){
                    isFirstAttribute = false;
                    result.Append$$String(" ");
                }
                else {
                    result.Append$$String(", ");
                }
                result.AppendFormat$$String$$Object$Array(defaultAttribute);
            }
            var $it16 = this.get_Attributes().GetEnumerator();
            while ($it16.MoveNext()){
                var attribute = $it16.get_Current();
                if (isFirstAttribute){
                    isFirstAttribute = false;
                    result.Append$$String(" ");
                }
                else {
                    result.Append$$String(", ");
                }
                result.AppendFormat$$String$$Object$$Object("{0}={1}", attribute.get_Name(), attribute.get_Value());
            }
            result.Append$$String("}");
            return result.ToString();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$Token);
var Neptuo$Tokens$TokenAttribute = {
    fullname: "Neptuo.Tokens.TokenAttribute",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (name, value){
            this._Name = null;
            this._Value = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNullOrEmpty(name, "name");
            this.set_Name(name);
            this.set_Value(value);
        },
        Name$$: "System.String",
        get_Name: function (){
            return this._Name;
        },
        set_Name: function (value){
            this._Name = value;
        },
        Value$$: "System.String",
        get_Value: function (){
            return this._Value;
        },
        set_Value: function (value){
            this._Value = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenAttribute);
var Neptuo$Tokens$TokenEventArgs = {
    fullname: "Neptuo.Tokens.TokenEventArgs",
    baseTypeName: "System.EventArgs",
    staticDefinition: {
        cctor: function (){
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (originalContent, token, startPosition, endPosition){
            this._OriginalContent = null;
            this._Token = null;
            this._StartPosition = 0;
            this._EndPosition = 0;
            System.EventArgs.ctor.call(this);
            Neptuo.Guard.NotNullOrEmpty(originalContent, "originalContent");
            Neptuo.Guard.NotNull$$Object$$String(token, "token");
            Neptuo.Guard.PositiveOrZero(startPosition, "startPosition");
            Neptuo.Guard.Positive(endPosition, "endPosition");
            if (endPosition <= startPosition)
                Neptuo._GuardArgumentExtensions.ArgumentOutOfRange(Neptuo.Guard.Exception, "endPosition", "End position index must be greater that start position index");
            this.set_OriginalContent(originalContent);
            this.set_Token(token);
            this.set_StartPosition(startPosition);
            this.set_EndPosition(endPosition);
        },
        OriginalContent$$: "System.String",
        get_OriginalContent: function (){
            return this._OriginalContent;
        },
        set_OriginalContent: function (value){
            this._OriginalContent = value;
        },
        Token$$: "Neptuo.Tokens.Token",
        get_Token: function (){
            return this._Token;
        },
        set_Token: function (value){
            this._Token = value;
        },
        StartPosition$$: "System.Int32",
        get_StartPosition: function (){
            return this._StartPosition;
        },
        set_StartPosition: function (value){
            this._StartPosition = value;
        },
        EndPosition$$: "System.Int32",
        get_EndPosition: function (){
            return this._EndPosition;
        },
        set_EndPosition: function (value){
            this._EndPosition = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "Neptuo.Tokens.Token", "System.Int32", "System.Int32"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenEventArgs);
var Neptuo$Tokens$TokenParser = {
    fullname: "Neptuo.Tokens.TokenParser",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.OnParsedToken = null;
            this._Configuration = null;
            System.Object.ctor.call(this);
            this.set_Configuration(new Neptuo.Tokens.TokenParserConfiguration.ctor());
        },
        Configuration$$: "Neptuo.Tokens.TokenParserConfiguration",
        get_Configuration: function (){
            return this._Configuration;
        },
        set_Configuration: function (value){
            this._Configuration = value;
        },
        add_OnParsedToken: function (value){
            this.OnParsedToken = $CombineDelegates(this.OnParsedToken, value);
        },
        remove_OnParsedToken: function (value){
            this.OnParsedToken = $RemoveDelegate(this.OnParsedToken, value);
        },
        Parse: function (content){
            if (System.MulticastDelegate.op_Equality$$MulticastDelegate$$MulticastDelegate(this.OnParsedToken, null))
                throw $CreateException(Neptuo._GuardSystemExtensions.InvalidOperation(Neptuo.Guard.Exception, "OnParsedItem event is null, so there isn\'t callback for parsed tokens."), new Error());
            var results = new System.Collections.Generic.List$1.ctor(Neptuo.Tokens.TokenStateMachine.Result.ctor);
            var stateMachine = new Neptuo.Tokens.TokenStateMachine.ctor(this.GetStateMachineConfiguration());
            stateMachine.OnEnterConcreteState$1(Neptuo.Tokens.TokenDoneState.ctor, $CreateAnonymousDelegate(this, function (sender, e){
                results.Add(e.get_State().GetResult());
            }));
            var finalState = stateMachine.Process(content);
            if (this.IsSuccessState(finalState)){
                var $it17 = results.GetEnumerator();
                while ($it17.MoveNext()){
                    var result = $it17.get_Current();
                    this.OnParsedToken(this, new Neptuo.Tokens.TokenEventArgs.ctor(content, result.get_Token(), result.get_StartIndex(), result.get_LastIndex() + 1));
                }
                return true;
            }
            return false;
        },
        IsSuccessState: function (finalState){
            if (System.Type.op_Equality$$Type$$Type(finalState.GetType(), Typeof(Neptuo.Tokens.TokenDoneState.ctor)))
                return true;
            if (this.get_Configuration().get_AllowTextContent() && System.Type.op_Equality$$Type$$Type(finalState.GetType(), Typeof(Neptuo.Tokens.TokenStartState.ctor)))
                return true;
            return false;
        },
        GetStateMachineConfiguration: function (){
            return (function (){
                var $v1 = new Neptuo.Tokens.TokenStateMachine.Configuration.ctor();
                $v1.set_AllowAttributes(this.get_Configuration().get_AllowAttributes());
                $v1.set_AllowEscapeSequence(this.get_Configuration().get_AllowEscapeSequence());
                $v1.set_AllowDefaultAttributes(this.get_Configuration().get_AllowDefaultAttributes());
                $v1.set_AllowMultipleTokens(this.get_Configuration().get_AllowMultipleTokens());
                $v1.set_AllowTextContent(this.get_Configuration().get_AllowTextContent());
                return $v1;
            }).call(this);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenParser);
var Neptuo$Tokens$TokenParserConfiguration = {
    fullname: "Neptuo.Tokens.TokenParserConfiguration",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._AllowTextContent = false;
            this._AllowEscapeSequence = false;
            this._AllowMultipleTokens = false;
            this._AllowDefaultAttributes = false;
            this._AllowAttributes = false;
            System.Object.ctor.call(this);
        },
        AllowTextContent$$: "System.Boolean",
        get_AllowTextContent: function (){
            return this._AllowTextContent;
        },
        set_AllowTextContent: function (value){
            this._AllowTextContent = value;
        },
        AllowEscapeSequence$$: "System.Boolean",
        get_AllowEscapeSequence: function (){
            return this._AllowEscapeSequence;
        },
        set_AllowEscapeSequence: function (value){
            this._AllowEscapeSequence = value;
        },
        AllowMultipleTokens$$: "System.Boolean",
        get_AllowMultipleTokens: function (){
            return this._AllowMultipleTokens;
        },
        set_AllowMultipleTokens: function (value){
            this._AllowMultipleTokens = value;
        },
        AllowDefaultAttributes$$: "System.Boolean",
        get_AllowDefaultAttributes: function (){
            return this._AllowDefaultAttributes;
        },
        set_AllowDefaultAttributes: function (value){
            this._AllowDefaultAttributes = value;
        },
        AllowAttributes$$: "System.Boolean",
        get_AllowAttributes: function (){
            return this._AllowAttributes;
        },
        set_AllowAttributes: function (value){
            this._AllowAttributes = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenParserConfiguration);
var Neptuo$Tokens$TokenStateMachine = {
    fullname: "Neptuo.Tokens.TokenStateMachine",
    baseTypeName: "Neptuo.StateMachines.StringStateMachine$1",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (configuration){
            Neptuo.StateMachines.StringStateMachine$1.ctor.call(this, Neptuo.Tokens.TokenState.ctor, new Neptuo.Tokens.TokenStartState.ctor$$Configuration(configuration));
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Tokens.TokenStateMachine.Configuration"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenStateMachine);
var Neptuo$Tokens$TokenStateMachine$Configuration = {
    fullname: "Neptuo.Tokens.TokenStateMachine.Configuration",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._AllowTextContent = false;
            this._AllowMultipleTokens = false;
            this._AllowAttributes = false;
            this._AllowDefaultAttributes = false;
            this._AllowEscapeSequence = false;
            System.Object.ctor.call(this);
        },
        AllowTextContent$$: "System.Boolean",
        get_AllowTextContent: function (){
            return this._AllowTextContent;
        },
        set_AllowTextContent: function (value){
            this._AllowTextContent = value;
        },
        AllowMultipleTokens$$: "System.Boolean",
        get_AllowMultipleTokens: function (){
            return this._AllowMultipleTokens;
        },
        set_AllowMultipleTokens: function (value){
            this._AllowMultipleTokens = value;
        },
        AllowAttributes$$: "System.Boolean",
        get_AllowAttributes: function (){
            return this._AllowAttributes;
        },
        set_AllowAttributes: function (value){
            this._AllowAttributes = value;
        },
        AllowDefaultAttributes$$: "System.Boolean",
        get_AllowDefaultAttributes: function (){
            return this._AllowDefaultAttributes;
        },
        set_AllowDefaultAttributes: function (value){
            this._AllowDefaultAttributes = value;
        },
        AllowEscapeSequence$$: "System.Boolean",
        get_AllowEscapeSequence: function (){
            return this._AllowEscapeSequence;
        },
        set_AllowEscapeSequence: function (value){
            this._AllowEscapeSequence = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenStateMachine$Configuration);
var Neptuo$Tokens$TokenStateMachine$Result = {
    fullname: "Neptuo.Tokens.TokenStateMachine.Result",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._Token = null;
            this._StartIndex = 0;
            this._LastIndex = 0;
            System.Object.ctor.call(this);
            this.set_Token(new Neptuo.Tokens.Token.ctor());
        },
        Token$$: "Neptuo.Tokens.Token",
        get_Token: function (){
            return this._Token;
        },
        set_Token: function (value){
            this._Token = value;
        },
        StartIndex$$: "System.Int32",
        get_StartIndex: function (){
            return this._StartIndex;
        },
        set_StartIndex: function (value){
            this._StartIndex = value;
        },
        LastIndex$$: "System.Int32",
        get_LastIndex: function (){
            return this._LastIndex;
        },
        set_LastIndex: function (value){
            this._LastIndex = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenStateMachine$Result);
var Neptuo$Tokens$TokenState = {
    fullname: "Neptuo.Tokens.TokenState",
    baseTypeName: "Neptuo.StateMachines.StringState$2",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._Configuration = null;
            this._HasToken = false;
            Neptuo.StateMachines.StringState$2.ctor.call(this, Neptuo.Tokens.TokenStateMachine.Result.ctor, Neptuo.Tokens.TokenState.ctor);
        },
        Configuration$$: "Neptuo.Tokens.TokenStateMachine+Configuration",
        get_Configuration: function (){
            return this._Configuration;
        },
        set_Configuration: function (value){
            this._Configuration = value;
        },
        HasToken$$: "System.Boolean",
        get_HasToken: function (){
            return this._HasToken;
        },
        set_HasToken: function (value){
            this._HasToken = value;
        },
        Move$1: function (TNewState){
            var newState = Neptuo.StateMachines.StringState$2.commonPrototype.Move$1.call(TNewState, this);
            newState.set_Configuration(this.get_Configuration());
            newState.set_HasToken(this.get_HasToken());
            return newState;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$Tokens$TokenState);
var Neptuo$Tokens$TokenStartState = {
    fullname: "Neptuo.Tokens.TokenStartState",
    baseTypeName: "Neptuo.Tokens.TokenState",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            Neptuo.Tokens.TokenState.ctor.call(this);
        },
        ctor$$Configuration: function (configuration){
            Neptuo.Tokens.TokenState.ctor.call(this);
            this.set_Context(new Neptuo.Tokens.TokenStateMachine.Result.ctor());
            this.set_Configuration(configuration);
        },
        Accept: function (input, position){
            if (input == "{")
                return this.Move$1(Neptuo.Tokens.TokenFullnameState.ctor);
            if (!this.get_Configuration().get_AllowTextContent())
                return this.Move$1(Neptuo.Tokens.TokenErrorState.ctor);
            this.get_Text().Append$$Char(input);
            return this;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }, {
        name: "ctor$$Configuration",
        parameters: ["Neptuo.Tokens.TokenStateMachine.Configuration"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenStartState);
var Neptuo$Tokens$TokenEscapeState = {
    fullname: "Neptuo.Tokens.TokenEscapeState",
    baseTypeName: "Neptuo.Tokens.TokenState",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.hasFirstEscape = false;
            Neptuo.Tokens.TokenState.ctor.call(this);
        },
        Accept: function (input, position){
            if (input == "}"){
                if (this.hasFirstEscape)
                    return this.Move$1(Neptuo.Tokens.TokenStartState.ctor);
                this.hasFirstEscape = true;
            }
            return this;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenEscapeState);
var Neptuo$Tokens$TokenFullnameState = {
    fullname: "Neptuo.Tokens.TokenFullnameState",
    baseTypeName: "Neptuo.Tokens.TokenState",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            Neptuo.Tokens.TokenState.ctor.call(this);
        },
        Accept: function (input, position){
            if (input == "{"){
                if (this.get_Text().get_Length() == 0){
                    if (this.get_Configuration().get_AllowEscapeSequence())
                        return this.Move$1(Neptuo.Tokens.TokenEscapeState.ctor);
                }
                return this.Move$1(Neptuo.Tokens.TokenErrorState.ctor);
            }
            if (this.get_HasToken() && !this.get_Configuration().get_AllowMultipleTokens())
                return this.Move$1(Neptuo.Tokens.TokenErrorState.ctor);
            if (input == " "){
                if (!this.get_Configuration().get_AllowAttributes())
                    return this.Move$1(Neptuo.Tokens.TokenErrorState.ctor);
                this.get_Context().get_Token().set_Fullname(this.get_Text().ToString());
                return this.Move$1(Neptuo.Tokens.TokenDefaultAttributesState.ctor);
            }
            if (input == "}"){
                this.get_Context().set_LastIndex(position);
                this.get_Context().get_Token().set_Fullname(this.get_Text().ToString());
                return this.Move$1(Neptuo.Tokens.TokenDoneState.ctor);
            }
            if (this.get_Text().get_Length() == 0)
                this.get_Context().set_StartIndex(position - 1);
            this.get_Text().Append$$Char(input);
            return this;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenFullnameState);
var Neptuo$Tokens$TokenDefaultAttributesState = {
    fullname: "Neptuo.Tokens.TokenDefaultAttributesState",
    baseTypeName: "Neptuo.Tokens.TokenState",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.innerExtensions = 0;
            Neptuo.Tokens.TokenState.ctor.call(this);
        },
        Accept: function (input, position){
            if (input == " " && this.get_Text().get_Length() == 0)
                return this;
            if (this.innerExtensions == 0){
                if (input == ","){
                    if (!this.get_Configuration().get_AllowDefaultAttributes())
                        return this.Move$1(Neptuo.Tokens.TokenErrorState.ctor);
                    this.get_Context().get_Token().get_DefaultAttributes().Add(this.get_Text().ToString());
                    return this.Move$1(Neptuo.Tokens.TokenDefaultAttributesState.ctor);
                }
                if (input == "="){
                    this.get_Context().get_Token().get_Attributes().Add(new Neptuo.Tokens.TokenAttribute.ctor(this.get_Text().ToString(), null));
                    return this.Move$1(Neptuo.Tokens.TokenAttributeValueState.ctor);
                }
            }
            if (input == "}"){
                if (!this.get_Configuration().get_AllowDefaultAttributes())
                    return this.Move$1(Neptuo.Tokens.TokenErrorState.ctor);
                if (this.innerExtensions == 0){
                    this.get_Context().set_LastIndex(position);
                    this.get_Context().get_Token().get_DefaultAttributes().Add(this.get_Text().ToString());
                    return this.Move$1(Neptuo.Tokens.TokenDoneState.ctor);
                }
                else {
                    this.innerExtensions--;
                }
            }
            if (input == "{")
                this.innerExtensions++;
            this.get_Text().Append$$Char(input);
            return this;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenDefaultAttributesState);
var Neptuo$Tokens$TokenAttributeNameState = {
    fullname: "Neptuo.Tokens.TokenAttributeNameState",
    baseTypeName: "Neptuo.Tokens.TokenState",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            Neptuo.Tokens.TokenState.ctor.call(this);
        },
        Accept: function (input, position){
            if (input == "="){
                this.get_Context().get_Token().get_Attributes().Add(new Neptuo.Tokens.TokenAttribute.ctor(this.get_Text().ToString(), null));
                return this.Move$1(Neptuo.Tokens.TokenAttributeValueState.ctor);
            }
            if (input == " " && this.get_Text().get_Length() == 0)
                return this;
            if (input == "{" || input == "}" || input == "," || input == " ")
                return this.Move$1(Neptuo.Tokens.TokenErrorState.ctor);
            this.get_Text().Append$$Char(input);
            return this;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenAttributeNameState);
var Neptuo$Tokens$TokenAttributeValueState = {
    fullname: "Neptuo.Tokens.TokenAttributeValueState",
    baseTypeName: "Neptuo.Tokens.TokenState",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.innerExtensions = 0;
            Neptuo.Tokens.TokenState.ctor.call(this);
        },
        Accept: function (input, position){
            if (this.innerExtensions == 0){
                if (input == ","){
                    System.Linq.Enumerable.LastOrDefault$1$$IEnumerable$1(Neptuo.Tokens.TokenAttribute.ctor, this.get_Context().get_Token().get_Attributes()).set_Value(this.get_Text().ToString());
                    return this.Move$1(Neptuo.Tokens.TokenAttributeNameState.ctor);
                }
            }
            if (input == "}"){
                if (this.innerExtensions == 0){
                    this.get_Context().set_LastIndex(position);
                    System.Linq.Enumerable.LastOrDefault$1$$IEnumerable$1(Neptuo.Tokens.TokenAttribute.ctor, this.get_Context().get_Token().get_Attributes()).set_Value(this.get_Text().ToString());
                    return this.Move$1(Neptuo.Tokens.TokenDoneState.ctor);
                }
                else {
                    this.innerExtensions--;
                }
            }
            if (input == "{")
                this.innerExtensions++;
            this.get_Text().Append$$Char(input);
            return this;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenAttributeValueState);
var Neptuo$Tokens$TokenDoneState = {
    fullname: "Neptuo.Tokens.TokenDoneState",
    baseTypeName: "Neptuo.Tokens.TokenStartState",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            Neptuo.Tokens.TokenStartState.ctor.call(this);
        },
        GetContextForNewState: function (){
            return new Neptuo.Tokens.TokenStateMachine.Result.ctor();
        },
        Accept: function (input, position){
            this.set_HasToken(true);
            var newState = Neptuo.Tokens.TokenStartState.commonPrototype.Accept.call(this, input, position);
            return newState;
        },
        GetResult: function (){
            return this.get_Context();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenDoneState);
var Neptuo$Tokens$TokenErrorState = {
    fullname: "Neptuo.Tokens.TokenErrorState",
    baseTypeName: "Neptuo.Tokens.TokenState",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            Neptuo.Tokens.TokenState.ctor.call(this);
        },
        Accept: function (input, position){
            this.get_Text().Append$$Char(input);
            return this;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenErrorState);
var Neptuo$Tokens$TokenWriter = {
    fullname: "Neptuo.Tokens.TokenWriter",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (format){
            this.items = new System.Collections.Generic.List$1.ctor(Neptuo.Tokens.TokenWriterItem.ctor);
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNullOrEmpty(format, "format");
            Neptuo.Tokens.TokenFormatHelper.Parse(format, this.items);
        },
        Format$$Func$2$String$String: function (tokenMapper){
            var result = new System.Text.StringBuilder.ctor();
            var $it18 = this.items.GetEnumerator();
            while ($it18.MoveNext()){
                var item = $it18.get_Current();
                if (item.get_IsToken())
                    result.Append$$String(tokenMapper(item.get_Value()));
                else
                    result.Append$$String(item.get_Value());
            }
            return result.ToString();
        },
        Format$$IReadOnlyKeyValueCollection: function (tokenMapper){
            var result = new System.Text.StringBuilder.ctor();
            var $it19 = this.items.GetEnumerator();
            while ($it19.MoveNext()){
                var item = $it19.get_Current();
                if (item.get_IsToken())
                    result.Append$$String(Neptuo.Collections.Specialized.ReadOnlyKeyValueCollectionExtensions.Get$$IReadOnlyKeyValueCollection$$String$$String(tokenMapper, item.get_Value(), ""));
                else
                    result.Append$$String(item.get_Value());
            }
            return result.ToString();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenWriter);
var Neptuo$Tokens$TokenFormatHelper = {
    fullname: "Neptuo.Tokens.TokenFormatHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        Parse: function (format, items){
            var lastTokenEndIndex = 0;
            var parser = new Neptuo.Tokens.TokenParser.ctor();
            parser.get_Configuration().set_AllowTextContent(true);
            parser.get_Configuration().set_AllowEscapeSequence(true);
            parser.get_Configuration().set_AllowMultipleTokens(true);
            parser.add_OnParsedToken(function (sender, e){
                if (e.get_StartPosition() > 0){
                    var startIndex = System.Linq.Enumerable.Any$1$$IEnumerable$1(Neptuo.Tokens.TokenWriterItem.ctor, items) ? lastTokenEndIndex : 0;
                    if (startIndex < e.get_StartPosition())
                        items.Add(new Neptuo.Tokens.TokenWriterItem.ctor(false, format.Substring$$Int32$$Int32(startIndex, e.get_StartPosition() - startIndex)));
                }
                items.Add(new Neptuo.Tokens.TokenWriterItem.ctor(true, e.get_Token().get_Fullname()));
                lastTokenEndIndex = e.get_EndPosition();
            });
            if (!parser.Parse(format))
                throw $CreateException(Neptuo._GuardArgumentExtensions.ArgumentOutOfRange(Neptuo.Guard.Exception, "format", "Format string \'{0}\' doesn\'t contain valid token format string.", format), new Error());
            if (lastTokenEndIndex < format.get_Length())
                items.Add(new Neptuo.Tokens.TokenWriterItem.ctor(false, format.Substring$$Int32(lastTokenEndIndex)));
        }
    },
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenFormatHelper);
var Neptuo$Tokens$TokenWriterItem = {
    fullname: "Neptuo.Tokens.TokenWriterItem",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (isToken, value){
            this._IsToken = false;
            this._Value = null;
            System.Object.ctor.call(this);
            this.set_IsToken(isToken);
            this.set_Value(value);
        },
        IsToken$$: "System.Boolean",
        get_IsToken: function (){
            return this._IsToken;
        },
        set_IsToken: function (value){
            this._IsToken = value;
        },
        Value$$: "System.String",
        get_Value: function (){
            return this._Value;
        },
        set_Value: function (value){
            this._Value = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Boolean", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Tokens$TokenWriterItem);
var Neptuo$Validators$DependencyValidationDispatcher = {
    fullname: "Neptuo.Validators.DependencyValidationDispatcher",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.Validators.DependencyValidationDispatcher.ValidateMethodName = "Validate";
        }
    },
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Validators.IValidationDispatcher"],
    Kind: "Class",
    definition: {
        ctor: function (dependencyProvider){
            this.dependencyProvider = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(dependencyProvider, "dependencyProvider");
            this.dependencyProvider = dependencyProvider;
        },
        Validate$1$$TModel: function (TModel, model){
            var validator = Neptuo.DependencyProviderExtensions.Resolve$1$$IDependencyProvider(Neptuo.Validators.IValidationHandler$1.ctor, this.dependencyProvider);
            return validator.Validate(model);
        },
        Validate$$Object: function (model){
            Neptuo.Guard.NotNull$$Object$$String(model, "model");
            var modelType = model.GetType();
            var validatorType = Typeof(Neptuo.Validators.IValidationHandler$1.ctor).MakeGenericType(modelType);
            var validateMethod = validatorType.GetMethod$$String(Neptuo.Validators.DependencyValidationDispatcher.ValidateMethodName);
            var validator = Neptuo.DependencyProviderExtensions.Resolve$$IDependencyProvider$$Type(this.dependencyProvider, validatorType);
            var validationResult = validateMethod.Invoke$$Object$$Object$Array(validator, [model]);
            return Cast(validationResult, Neptuo.Validators.IValidationResult.ctor);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.IDependencyProvider"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Validators$DependencyValidationDispatcher);
var Neptuo$Validators$IValidationResult = {
    fullname: "Neptuo.Validators.IValidationResult",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Validators$IValidationResult);
var Neptuo$Validators$IValidationMessage = {
    fullname: "Neptuo.Validators.IValidationMessage",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Validators$IValidationMessage);
var Neptuo$Validators$IValidationHandler$1 = {
    fullname: "Neptuo.Validators.IValidationHandler$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Validators$IValidationHandler$1);
var Neptuo$Validators$IValidationDispatcher = {
    fullname: "Neptuo.Validators.IValidationDispatcher",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$Validators$IValidationDispatcher);
var Neptuo$Validators$PropertyEqualMessage = {
    fullname: "Neptuo.Validators.PropertyEqualMessage",
    baseTypeName: "Neptuo.Validators.PropertyValidationMessageBase",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (key, otherProperty, propertyName){
            this._OtherProperty = null;
            Neptuo.Validators.PropertyValidationMessageBase.ctor.call(this, key, propertyName);
            this.set_OtherProperty(otherProperty);
        },
        OtherProperty$$: "System.String",
        get_OtherProperty: function (){
            return this._OtherProperty;
        },
        set_OtherProperty: function (value){
            this._OtherProperty = value;
        },
        GetTextMessage: function (){
            return System.String.Format$$String$$Object$$Object("{0} must match {1}.", this.get_PropertyName(), this.get_OtherProperty());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.String", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Validators$PropertyEqualMessage);
var Neptuo$Validators$PropertyValidationMessageBase = {
    fullname: "Neptuo.Validators.PropertyValidationMessageBase",
    baseTypeName: "Neptuo.Validators.ValidationMessageBase",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (key, propertyName){
            this.propertyName = null;
            Neptuo.Validators.ValidationMessageBase.ctor.call(this, key, null);
            this.propertyName = propertyName;
        },
        PropertyName$$: "System.String",
        get_PropertyName: function (){
            return (this.propertyName != null ? this.propertyName : this.get_Key());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Validators$PropertyValidationMessageBase);
var Neptuo$Validators$StringLengthMessage = {
    fullname: "Neptuo.Validators.StringLengthMessage",
    baseTypeName: "Neptuo.Validators.PropertyValidationMessageBase",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (key, minLength, maxLength, propertyName){
            this._MinLength = null;
            this._MaxLength = null;
            Neptuo.Validators.PropertyValidationMessageBase.ctor.call(this, key, propertyName);
            this.set_MinLength(minLength);
            this.set_MaxLength(maxLength);
        },
        MinLength$$: "System.Nullable`1[[System.Int32]]",
        get_MinLength: function (){
            return this._MinLength;
        },
        set_MinLength: function (value){
            this._MinLength = value;
        },
        MaxLength$$: "System.Nullable`1[[System.Int32]]",
        get_MaxLength: function (){
            return this._MaxLength;
        },
        set_MaxLength: function (value){
            this._MaxLength = value;
        },
        GetTextMessage: function (){
            if (this.get_MinLength() == null)
                return System.String.Format$$String$$Object$$Object("{0} must be shorter or equal to {1} characters.", this.get_PropertyName(), this.get_MaxLength());
            if (this.get_MaxLength() == null)
                return System.String.Format$$String$$Object$$Object("{0} must have length at least {1} characters.", this.get_PropertyName(), this.get_MinLength());
            return System.String.Format$$String$$Object$$Object("Length of {0} muset be between {1} and {2} characters.", this.get_MinLength(), this.get_MaxLength());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.Nullable", "System.Nullable", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Validators$StringLengthMessage);
var Neptuo$Validators$StringNullOrEmptyMessage = {
    fullname: "Neptuo.Validators.StringNullOrEmptyMessage",
    baseTypeName: "Neptuo.Validators.PropertyValidationMessageBase",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (key, propertyName){
            Neptuo.Validators.PropertyValidationMessageBase.ctor.call(this, key, propertyName);
        },
        GetTextMessage: function (){
            return System.String.Format$$String$$Object("{0} can\'t be empty.", this.get_PropertyName());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Validators$StringNullOrEmptyMessage);
var Neptuo$Validators$TextValidationMessage = {
    fullname: "Neptuo.Validators.TextValidationMessage",
    baseTypeName: "Neptuo.Validators.ValidationMessageBase",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (key, message){
            Neptuo.Validators.ValidationMessageBase.ctor.call(this, key, message);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Validators$TextValidationMessage);
var Neptuo$Validators$ValidationException = {
    fullname: "Neptuo.Validators.ValidationException",
    baseTypeName: "System.Exception",
    assemblyName: "Neptuo",
    Kind: "Class",
    definition: {
        ctor: function (result){
            this._Result = null;
            System.Exception.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(result, "result");
            this.set_Result(result);
        },
        Result$$: "Neptuo.Validators.IValidationResult",
        get_Result: function (){
            return this._Result;
        },
        set_Result: function (value){
            this._Result = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.Validators.IValidationResult"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Validators$ValidationException);
var Neptuo$Validators$ValidationMessageBase = {
    fullname: "Neptuo.Validators.ValidationMessageBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Validators.IValidationMessage"],
    Kind: "Class",
    definition: {
        ctor: function (key, message){
            this.message = null;
            this._Key = null;
            System.Object.ctor.call(this);
            this.set_Key(key);
            this.set_Message(message);
        },
        Key$$: "System.String",
        get_Key: function (){
            return this._Key;
        },
        set_Key: function (value){
            this._Key = value;
        },
        Message$$: "System.String",
        get_Message: function (){
            if (this.message == null)
                this.message = this.GetTextMessage();
            return this.message;
        },
        set_Message: function (value){
            this.message = value;
        },
        GetTextMessage: function (){
            return System.String.Empty;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.String"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Validators$ValidationMessageBase);
var Neptuo$Validators$ValidationResultBase = {
    fullname: "Neptuo.Validators.ValidationResultBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo",
    interfaceNames: ["Neptuo.Validators.IValidationResult"],
    Kind: "Class",
    definition: {
        ctor$$Boolean: function (isValid){
            this._IsValid = false;
            this._Messages = null;
            Neptuo.Validators.ValidationResultBase.ctor$$Boolean$$IEnumerable$1$IValidationMessage.call(this, isValid, new System.Collections.Generic.List$1.ctor(Neptuo.Validators.IValidationMessage.ctor));
        },
        IsValid$$: "System.Boolean",
        get_IsValid: function (){
            return this._IsValid;
        },
        set_IsValid: function (value){
            this._IsValid = value;
        },
        Messages$$: "System.Collections.Generic.IEnumerable`1[[Neptuo.Validators.IValidationMessage]]",
        get_Messages: function (){
            return this._Messages;
        },
        set_Messages: function (value){
            this._Messages = value;
        },
        ctor$$Boolean$$IEnumerable$1$IValidationMessage: function (isValid, messages){
            this._IsValid = false;
            this._Messages = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(messages, "messages");
            this.set_IsValid(isValid);
            this.set_Messages(messages);
        }
    },
    ctors: [{
        name: "ctor$$Boolean",
        parameters: ["System.Boolean"]
    }, {
        name: "ctor$$Boolean$$IEnumerable",
        parameters: ["System.Boolean", "System.Collections.Generic.IEnumerable"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$Validators$ValidationResultBase);

