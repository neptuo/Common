/* Generated by SharpKit 5 v5.4.4 */
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}

if (typeof ($CreateAnonymousDelegate) == 'undefined') {
    var $CreateAnonymousDelegate = function (target, func) {
        if (target == null || func == null)
            return func;
        var delegate = function () {
            return func.apply(target, arguments);
        };
        delegate.func = func;
        delegate.target = target;
        delegate.isDelegate = true;
        return delegate;
    }
}


if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var Neptuo$PresentationModels$Binding$BindingConverterCollection = {
    fullname: "Neptuo.PresentationModels.Binding.BindingConverterCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.Binding.IBindingConverterCollection"],
    Kind: "Class",
    definition: {
        ctor: function (previousCollection){
            this._PreviousCollection = null;
            this._Storage = null;
            System.Object.ctor.call(this);
            this.set_Storage(new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.List$1.ctor));
            this.set_PreviousCollection(previousCollection);
        },
        PreviousCollection$$: "Neptuo.PresentationModels.Binding.BindingConverterCollection",
        get_PreviousCollection: function (){
            return this._PreviousCollection;
        },
        set_PreviousCollection: function (value){
            this._PreviousCollection = value;
        },
        Storage$$: "System.Collections.Generic.Dictionary`2[[System.String],[System.Collections.Generic.List`1[[Neptuo.PresentationModels.Binding.IBindingConverter]]]]",
        get_Storage: function (){
            return this._Storage;
        },
        set_Storage: function (value){
            this._Storage = value;
        },
        Add: function (fieldType, converter){
            Neptuo.Guard.NotNull$$Object$$String(fieldType, "fieldType");
            Neptuo.Guard.NotNull$$Object$$String(converter, "converter");
            var key = this.GetKey(fieldType);
            var list;
            if (!(function (){
                var $1 = {
                    Value: list
                };
                var $res = this.get_Storage().TryGetValue(key, $1);
                list = $1.Value;
                return $res;
            }).call(this)){
                list = new System.Collections.Generic.List$1.ctor(Neptuo.PresentationModels.Binding.IBindingConverter.ctor);
                this.get_Storage().Add(key, list);
            }
            list.Add(converter);
            return this;
        },
        TryConvert: function (sourceValue, targetField, targetValue){
            var converters;
            if ((function (){
                var $1 = {
                    Value: converters
                };
                var $res = this.TryGetConverters(targetField, $1);
                converters = $1.Value;
                return $res;
            }).call(this)){
                var $it1 = converters.GetEnumerator();
                while ($it1.MoveNext()){
                    var converter = $it1.get_Current();
                    if (converter.TryConvert(sourceValue, targetField, targetValue))
                        return true;
                }
            }
            targetValue.Value = null;
            return false;
        },
        TryGetConverters: function (targetField, converters){
            var key = this.GetKey(targetField.get_FieldType());
            var storageValue;
            if ((function (){
                var $1 = {
                    Value: storageValue
                };
                var $res = this.get_Storage().TryGetValue(key, $1);
                storageValue = $1.Value;
                return $res;
            }).call(this)){
                if (this.get_PreviousCollection() != null){
                    var previousConverters;
                    if ((function (){
                        var $1 = {
                            Value: previousConverters
                        };
                        var $res = this.get_PreviousCollection().TryGetConverters(targetField, $1);
                        previousConverters = $1.Value;
                        return $res;
                    }).call(this))
                        storageValue.AddRange(previousConverters);
                }
                converters.Value = storageValue;
                return true;
            }
            if (this.get_PreviousCollection() != null)
                return this.get_PreviousCollection().TryGetConverters(targetField, converters);
            converters.Value = null;
            return false;
        },
        GetKey: function (fieldType){
            return fieldType.ToString();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.PresentationModels.Binding.BindingConverterCollection"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$Binding$BindingConverterCollection);
var Neptuo$PresentationModels$Binding$BindingModelValueGetter = {
    fullname: "Neptuo.PresentationModels.Binding.BindingModelValueGetter",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IModelValueGetter"],
    Kind: "Class",
    definition: {
        ctor: function (storage, converterCollection, modelDefinition){
            this._Storage = null;
            this._ConverterCollection = null;
            this._ModelDefinition = null;
            System.Object.ctor.call(this);
            if (storage == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("storage"), new Error());
            if (converterCollection == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("converterCollection"), new Error());
            if (modelDefinition == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("modelDefinition"), new Error());
            this.set_Storage(storage);
            this.set_ConverterCollection(converterCollection);
            this.set_ModelDefinition(modelDefinition);
        },
        Storage$$: "Neptuo.PresentationModels.Binding.IBindingModelValueStorage",
        get_Storage: function (){
            return this._Storage;
        },
        set_Storage: function (value){
            this._Storage = value;
        },
        ConverterCollection$$: "Neptuo.PresentationModels.Binding.IBindingConverterCollection",
        get_ConverterCollection: function (){
            return this._ConverterCollection;
        },
        set_ConverterCollection: function (value){
            this._ConverterCollection = value;
        },
        ModelDefinition$$: "Neptuo.PresentationModels.IModelDefinition",
        get_ModelDefinition: function (){
            return this._ModelDefinition;
        },
        set_ModelDefinition: function (value){
            this._ModelDefinition = value;
        },
        TryGetValue: function (identifier, value){
            var targetField = System.Linq.Enumerable.FirstOrDefault$1$$IEnumerable$1$$Func$2(Neptuo.PresentationModels.IFieldDefinition.ctor, this.get_ModelDefinition().get_Fields(), $CreateAnonymousDelegate(this, function (f){
                return f.get_Identifier() == identifier;
            }));
            if (targetField == null)
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String("identifier", System.String.Format$$String$$Object$$Object("Unnable to find field \'{0}\' in model \'{1}\'.", identifier, this.get_ModelDefinition().get_Identifier())), new Error());
            var sourceValue;
            if ((function (){
                var $1 = {
                    Value: sourceValue
                };
                var $res = this.get_Storage().TryGetValue(identifier, $1);
                sourceValue = $1.Value;
                return $res;
            }).call(this)){
                if (this.get_ConverterCollection().TryConvert(sourceValue, targetField, value))
                    return true;
            }
            value.Value = null;
            return false;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.PresentationModels.Binding.IBindingModelValueStorage", "Neptuo.PresentationModels.Binding.IBindingConverterCollection", "Neptuo.PresentationModels.IModelDefinition"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$Binding$BindingModelValueGetter);
var Neptuo$PresentationModels$CopyModelValueProvider = {
    fullname: "Neptuo.PresentationModels.CopyModelValueProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition: {
        ctor: function (modelDefinition){
            this._ModelDefinition = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(modelDefinition, "modelDefinition");
            this.set_ModelDefinition(modelDefinition);
        },
        ModelDefinition$$: "Neptuo.PresentationModels.IModelDefinition",
        get_ModelDefinition: function (){
            return this._ModelDefinition;
        },
        set_ModelDefinition: function (value){
            this._ModelDefinition = value;
        },
        Update: function (targetSetter, sourceGetters){
            var $it2 = this.get_ModelDefinition().get_Fields().GetEnumerator();
            while ($it2.MoveNext()){
                var field = $it2.get_Current();
                var value;
                var $it3 = sourceGetters.GetEnumerator();
                while ($it3.MoveNext()){
                    var sourceGetter = $it3.get_Current();
                    if ((function (){
                        var $1 = {
                            Value: value
                        };
                        var $res = sourceGetter.TryGetValue(field.get_Identifier(), $1);
                        value = $1.Value;
                        return $res;
                    }).call(this))
                        targetSetter.SetValue(field.get_Identifier(), value);
                }
            }
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.PresentationModels.IModelDefinition"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$CopyModelValueProvider);
var Neptuo$PresentationModels$Binding$BindingDictionaryValueStorage = {
    fullname: "Neptuo.PresentationModels.Binding.BindingDictionaryValueStorage",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.Binding.IBindingModelValueStorage"],
    Kind: "Class",
    definition: {
        ctor: function (storage){
            this._Storage = null;
            System.Object.ctor.call(this);
            if (storage == null)
                storage = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.String.ctor);
            this.set_Storage(storage);
        },
        Storage$$: "System.Collections.Generic.Dictionary`2[[System.String],[System.String]]",
        get_Storage: function (){
            return this._Storage;
        },
        set_Storage: function (value){
            this._Storage = value;
        },
        Add: function (key, value){
            this.get_Storage().Add(key, value);
            return this;
        },
        TryGetValue: function (identifier, targetValue){
            if (identifier != null)
                return this.get_Storage().TryGetValue(identifier, targetValue);
            targetValue.Value = null;
            return false;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Collections.Generic.Dictionary"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$Binding$BindingDictionaryValueStorage);
var Neptuo$PresentationModels$FieldDefinition = {
    fullname: "Neptuo.PresentationModels.FieldDefinition",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IFieldDefinition"],
    Kind: "Class",
    definition: {
        ctor: function (identifier, fieldType, metadata){
            this._Identifier = null;
            this._FieldType = null;
            this._Metadata = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(identifier, "identifier");
            Neptuo.Guard.NotNull$$Object$$String(fieldType, "fieldType");
            Neptuo.Guard.NotNull$$Object$$String(metadata, "metadata");
            this.set_Identifier(identifier);
            this.set_FieldType(fieldType);
            this.set_Metadata(metadata);
        },
        Identifier$$: "System.String",
        get_Identifier: function (){
            return this._Identifier;
        },
        set_Identifier: function (value){
            this._Identifier = value;
        },
        FieldType$$: "Neptuo.PresentationModels.IFieldType",
        get_FieldType: function (){
            return this._FieldType;
        },
        set_FieldType: function (value){
            this._FieldType = value;
        },
        Metadata$$: "Neptuo.PresentationModels.IFieldMetadataCollection",
        get_Metadata: function (){
            return this._Metadata;
        },
        set_Metadata: function (value){
            this._Metadata = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "Neptuo.PresentationModels.IFieldType", "Neptuo.PresentationModels.IFieldMetadataCollection"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$FieldDefinition);
var Neptuo$PresentationModels$FieldDefinitionBuilderBase = {
    fullname: "Neptuo.PresentationModels.FieldDefinitionBuilderBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IFieldDefinitionBuilder"],
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        Build: function (){
            return new Neptuo.PresentationModels.FieldDefinition.ctor(this.BuildFieldIdentifier(), this.BuildFieldType(), this.BuildFieldMetadata());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$FieldDefinitionBuilderBase);
var Neptuo$PresentationModels$Binding$IBindingConverter = {
    fullname: "Neptuo.PresentationModels.Binding.IBindingConverter",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$Binding$IBindingConverter);
var Neptuo$PresentationModels$Binding$IBindingConverterCollection = {
    fullname: "Neptuo.PresentationModels.Binding.IBindingConverterCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$Binding$IBindingConverterCollection);
var Neptuo$PresentationModels$Binding$IBindingModelValueStorage = {
    fullname: "Neptuo.PresentationModels.Binding.IBindingModelValueStorage",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$Binding$IBindingModelValueStorage);
var Neptuo$PresentationModels$MetadataCollectionExtensions = {
    fullname: "Neptuo.PresentationModels.MetadataCollectionExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        GetOrDefault$1$$IFieldMetadataCollection$$String$$T: function (T, metadata, key, defaultValue){
            var value;
            if (!(function (){
                var $1 = {
                    Value: value
                };
                var $res = metadata.TryGet(key, $1);
                value = $1.Value;
                return $res;
            })())
                return defaultValue;
            if (!(Is(value, T)))
                return defaultValue;
            return defaultValue;
        },
        GetOrDefault$1$$IModelMetadataCollection$$String$$T: function (T, metadata, key, defaultValue){
            var value;
            if (!(function (){
                var $1 = {
                    Value: value
                };
                var $res = metadata.TryGet(key, $1);
                value = $1.Value;
                return $res;
            })())
                return defaultValue;
            if (!(Is(value, T)))
                return defaultValue;
            return defaultValue;
        }
    },
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$MetadataCollectionExtensions);
var Neptuo$PresentationModels$IFieldDefinition = {
    fullname: "Neptuo.PresentationModels.IFieldDefinition",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$IFieldDefinition);
var Neptuo$PresentationModels$IFieldDefinitionBuilder = {
    fullname: "Neptuo.PresentationModels.IFieldDefinitionBuilder",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$IFieldDefinitionBuilder);
var Neptuo$PresentationModels$IFieldMetadataCollection = {
    fullname: "Neptuo.PresentationModels.IFieldMetadataCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$IFieldMetadataCollection);
var Neptuo$PresentationModels$IFieldType = {
    fullname: "Neptuo.PresentationModels.IFieldType",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$IFieldType);
var Neptuo$PresentationModels$IFieldView = {
    fullname: "Neptuo.PresentationModels.IFieldView",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$IFieldView);
var Neptuo$PresentationModels$IModelDefinition = {
    fullname: "Neptuo.PresentationModels.IModelDefinition",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$IModelDefinition);
var Neptuo$PresentationModels$IModelDefinitionBuilder = {
    fullname: "Neptuo.PresentationModels.IModelDefinitionBuilder",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$IModelDefinitionBuilder);
var Neptuo$PresentationModels$IModelMetadataCollection = {
    fullname: "Neptuo.PresentationModels.IModelMetadataCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$IModelMetadataCollection);
var Neptuo$PresentationModels$IModelPresenter = {
    fullname: "Neptuo.PresentationModels.IModelPresenter",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$IModelPresenter);
var Neptuo$PresentationModels$IModelValueGetter = {
    fullname: "Neptuo.PresentationModels.IModelValueGetter",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$IModelValueGetter);
var Neptuo$PresentationModels$ModelValueGetterExtensions = {
    fullname: "Neptuo.PresentationModels.ModelValueGetterExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        GetValueOrDefault$$IModelValueGetter$$String$$Object: function (getter, identifier, defaultValue){
            var value;
            if ((function (){
                var $1 = {
                    Value: value
                };
                var $res = getter.TryGetValue(identifier, $1);
                value = $1.Value;
                return $res;
            })())
                return value;
            return defaultValue;
        },
        GetValueOrDefault$$IModelValueGetter$$String$$Func$1$Object: function (getter, identifier, defaultValueGetter){
            var value;
            if ((function (){
                var $1 = {
                    Value: value
                };
                var $res = getter.TryGetValue(identifier, $1);
                value = $1.Value;
                return $res;
            })())
                return value;
            return defaultValueGetter();
        },
        GetValueOrDefault$1$$IModelValueGetter$$String$$T: function (T, getter, identifier, defaultValue){
            var value;
            if ((function (){
                var $1 = {
                    Value: value
                };
                var $res = getter.TryGetValue(identifier, $1);
                value = $1.Value;
                return $res;
            })())
                return Cast(value, T);
            return defaultValue;
        },
        GetValueOrDefault$1$$IModelValueGetter$$String$$Func$1: function (T, getter, identifier, defaultValueGetter){
            var value;
            if ((function (){
                var $1 = {
                    Value: value
                };
                var $res = getter.TryGetValue(identifier, $1);
                value = $1.Value;
                return $res;
            })())
                return Cast(value, T);
            return defaultValueGetter();
        }
    },
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$ModelValueGetterExtensions);
var Neptuo$PresentationModels$IModelValueProvider = {
    fullname: "Neptuo.PresentationModels.IModelValueProvider",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IModelValueGetter", "Neptuo.PresentationModels.IModelValueSetter"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$IModelValueProvider);
var Neptuo$PresentationModels$IModelValueSetter = {
    fullname: "Neptuo.PresentationModels.IModelValueSetter",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$IModelValueSetter);
var Neptuo$PresentationModels$IModelView = {
    fullname: "Neptuo.PresentationModels.IModelView",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$IModelView);
var Neptuo$PresentationModels$MetadataCollection = {
    fullname: "Neptuo.PresentationModels.MetadataCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IModelMetadataCollection", "Neptuo.PresentationModels.IFieldMetadataCollection"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._Values = null;
            System.Object.ctor.call(this);
            this.set_Values(new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Object.ctor));
        },
        Values$$: "System.Collections.Generic.Dictionary`2[[System.String],[System.Object]]",
        get_Values: function (){
            return this._Values;
        },
        set_Values: function (value){
            this._Values = value;
        },
        Keys$$: "System.Collections.Generic.IEnumerable`1[[System.String]]",
        get_Keys: function (){
            return this.get_Values().get_Keys();
        },
        TryGet: function (key, value){
            return this.get_Values().TryGetValue(key, value);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$MetadataCollection);
var Neptuo$PresentationModels$ModelDefinitionBuilderBase = {
    fullname: "Neptuo.PresentationModels.ModelDefinitionBuilderBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IModelDefinitionBuilder"],
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        Build: function (){
            return new Neptuo.PresentationModels.ModelDefinition.ctor(this.BuildModelIdentifier(), this.BuildFieldDefinitions(), this.BuildModelMetadata());
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$ModelDefinitionBuilderBase);
var Neptuo$PresentationModels$ModelPresenterBase = {
    fullname: "Neptuo.PresentationModels.ModelPresenterBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IModelPresenter"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._IsPreparedCalled = false;
            this._ModelDefinition = null;
            this._ModelView = null;
            this._FieldsByIdentifier = null;
            System.Object.ctor.call(this);
            this.set_FieldsByIdentifier(new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, Neptuo.PresentationModels.IFieldDefinition.ctor));
        },
        IsPreparedCalled$$: "System.Boolean",
        get_IsPreparedCalled: function (){
            return this._IsPreparedCalled;
        },
        set_IsPreparedCalled: function (value){
            this._IsPreparedCalled = value;
        },
        ModelDefinition$$: "Neptuo.PresentationModels.IModelDefinition",
        get_ModelDefinition: function (){
            return this._ModelDefinition;
        },
        set_ModelDefinition: function (value){
            this._ModelDefinition = value;
        },
        ModelView$$: "Neptuo.PresentationModels.IModelView",
        get_ModelView: function (){
            return this._ModelView;
        },
        set_ModelView: function (value){
            this._ModelView = value;
        },
        FieldsByIdentifier$$: "System.Collections.Generic.Dictionary`2[[System.String],[Neptuo.PresentationModels.IFieldDefinition]]",
        get_FieldsByIdentifier: function (){
            return this._FieldsByIdentifier;
        },
        set_FieldsByIdentifier: function (value){
            this._FieldsByIdentifier = value;
        },
        SetModel: function (modelDefinition){
            if (this.get_IsPreparedCalled())
                throw $CreateException(new System.InvalidOperationException.ctor$$String("Unable to set model definition after calling Prepare."), new Error());
            this.set_ModelDefinition(modelDefinition);
            return this;
        },
        SetView: function (modelView){
            if (this.get_IsPreparedCalled())
                throw $CreateException(new System.InvalidOperationException.ctor$$String("Unable to set model view after calling Prepare."), new Error());
            this.set_ModelView(modelView);
            return this;
        },
        Prepare: function (){
            if (this.get_IsPreparedCalled())
                throw $CreateException(new System.InvalidOperationException.ctor$$String("Unable to call Prepare multiple times."), new Error());
            var $it4 = this.get_ModelDefinition().get_Fields().GetEnumerator();
            while ($it4.MoveNext()){
                var field = $it4.get_Current();
                this.get_FieldsByIdentifier().set_Item$$TKey(field.get_Identifier(), field);
            }
            this.set_IsPreparedCalled(true);
        },
        SetData: function (getter){
            var value;
            var $it5 = this.get_ModelDefinition().get_Fields().GetEnumerator();
            while ($it5.MoveNext()){
                var field = $it5.get_Current();
                if ((function (){
                    var $1 = {
                        Value: value
                    };
                    var $res = getter.TryGetValue(field.get_Identifier(), $1);
                    value = $1.Value;
                    return $res;
                }).call(this))
                    this.get_ModelView().SetValue(field.get_Identifier(), value);
            }
        },
        GetData: function (setter){
            var $it6 = this.get_ModelDefinition().get_Fields().GetEnumerator();
            while ($it6.MoveNext()){
                var field = $it6.get_Current();
                setter.SetValue(field.get_Identifier(), this.get_ModelView().GetValue(field.get_Identifier()));
            }
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$ModelPresenterBase);
var Neptuo$PresentationModels$ModelViewBase = {
    fullname: "Neptuo.PresentationModels.ModelViewBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IModelView"],
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        SetValue: function (identifier, value){
            this.GetFieldViewByIdentifier(identifier).SetValue(value);
        },
        GetValue: function (identifier){
            var fieldView = this.GetFieldViewByIdentifier(identifier);
            if (fieldView != null)
                return fieldView.GetValue();
            return null;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$ModelViewBase);
var Neptuo$PresentationModels$VersionInfo = {
    fullname: "Neptuo.PresentationModels.VersionInfo",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            Neptuo.PresentationModels.VersionInfo.Version = "5.0.0";
        },
        GetVersion: function (){
            return new System.Version.ctor$$String("5.0.0");
        }
    },
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$VersionInfo);
var Neptuo$PresentationModels$ModelDefinition = {
    fullname: "Neptuo.PresentationModels.ModelDefinition",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IModelDefinition"],
    Kind: "Class",
    definition: {
        ctor: function (identifier, fields, metadata){
            this._Identifier = null;
            this._Fields = null;
            this._Metadata = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(identifier, "identifier");
            Neptuo.Guard.NotNull$$Object$$String(fields, "fields");
            Neptuo.Guard.NotNull$$Object$$String(metadata, "metadata");
            this.set_Identifier(identifier);
            this.set_Fields(new System.Collections.Generic.List$1.ctor$$IEnumerable$1(Neptuo.PresentationModels.IFieldDefinition.ctor, fields));
            this.set_Metadata(metadata);
        },
        Identifier$$: "System.String",
        get_Identifier: function (){
            return this._Identifier;
        },
        set_Identifier: function (value){
            this._Identifier = value;
        },
        Fields$$: "System.Collections.Generic.IEnumerable`1[[Neptuo.PresentationModels.IFieldDefinition]]",
        get_Fields: function (){
            return this._Fields;
        },
        set_Fields: function (value){
            this._Fields = value;
        },
        Metadata$$: "Neptuo.PresentationModels.IModelMetadataCollection",
        get_Metadata: function (){
            return this._Metadata;
        },
        set_Metadata: function (value){
            this._Metadata = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String", "System.Collections.Generic.IEnumerable", "Neptuo.PresentationModels.IModelMetadataCollection"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$ModelDefinition);
var Neptuo$PresentationModels$ProxyModelDefinition = {
    fullname: "Neptuo.PresentationModels.ProxyModelDefinition",
    baseTypeName: "Neptuo.PresentationModels.ProxyModelDefinitionBase",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition: {
        ctor: function (modelDefinition){
            this._ModelDefinition = null;
            Neptuo.PresentationModels.ProxyModelDefinitionBase.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(modelDefinition, "modelDefinition");
            this.set_ModelDefinition(modelDefinition);
        },
        ModelDefinition$$: "Neptuo.PresentationModels.IModelDefinition",
        get_ModelDefinition: function (){
            return this._ModelDefinition;
        },
        set_ModelDefinition: function (value){
            this._ModelDefinition = value;
        },
        RefreshIdentifier: function (){
            return this.get_ModelDefinition().get_Identifier();
        },
        RefreshFields: function (){
            return this.get_ModelDefinition().get_Fields();
        },
        RefreshMetadata: function (){
            return this.get_ModelDefinition().get_Metadata();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.PresentationModels.IModelDefinition"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$ProxyModelDefinition);
var Neptuo$PresentationModels$ProxyModelDefinitionBase = {
    fullname: "Neptuo.PresentationModels.ProxyModelDefinitionBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IModelDefinition"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.identifier = null;
            this.fields = null;
            this.metadata = null;
            this._IsRefreshRequired = false;
            System.Object.ctor.call(this);
            this.set_IsRefreshRequired(true);
        },
        IsRefreshRequired$$: "System.Boolean",
        get_IsRefreshRequired: function (){
            return this._IsRefreshRequired;
        },
        set_IsRefreshRequired: function (value){
            this._IsRefreshRequired = value;
        },
        Identifier$$: "System.String",
        get_Identifier: function (){
            if (this.get_IsRefreshRequired()){
                this.identifier = this.RefreshIdentifier();
                this.set_IsRefreshRequired(false);
            }
            return this.identifier;
        },
        Fields$$: "System.Collections.Generic.IEnumerable`1[[Neptuo.PresentationModels.IFieldDefinition]]",
        get_Fields: function (){
            if (this.get_IsRefreshRequired()){
                this.fields = this.RefreshFields();
                this.set_IsRefreshRequired(false);
            }
            return this.fields;
        },
        Metadata$$: "Neptuo.PresentationModels.IModelMetadataCollection",
        get_Metadata: function (){
            if (this.get_IsRefreshRequired()){
                this.metadata = this.RefreshMetadata();
                this.set_IsRefreshRequired(false);
            }
            return this.metadata;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$ProxyModelDefinitionBase);
var Neptuo$PresentationModels$FieldType = {
    fullname: "Neptuo.PresentationModels.FieldType",
    baseTypeName: "System.Object",
    staticDefinition: {
        FromType: function (type){
            return new Neptuo.PresentationModels.FieldType.ctor(type);
        }
    },
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.IFieldType"],
    Kind: "Class",
    definition: {
        ctor: function (type){
            this._Type = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(type, "type");
            this.set_Type(type);
        },
        Type$$: "System.Type",
        get_Type: function (){
            return this._Type;
        },
        set_Type: function (value){
            this._Type = value;
        },
        GetHashCode: function (){
            return this.get_Type().GetHashCode();
        },
        Equals$$Object: function (obj){
            if (obj == null)
                return false;
            var fieldType = As(obj, Neptuo.PresentationModels.FieldType.ctor);
            if (fieldType == null)
                return false;
            return System.Type.op_Equality$$Type$$Type(fieldType.get_Type(), this.get_Type());
        },
        ToString: function (){
            return System.String.Format$$String$$Object$$Object("(FieldType:{0}:{1})", this.get_Type().get_FullName(), this.GetGenericArgumentFullName());
        },
        GetGenericArgumentFullName: function (){
            if (this.get_Type().get_IsGenericType())
                return this.get_Type().GetGenericArguments()[0].get_FullName();
            return System.String.Empty;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Type"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$FieldType);
var Neptuo$PresentationModels$Validation$FieldMetadataValidatorBase$2 = {
    fullname: "Neptuo.PresentationModels.Validators.FieldMetadataValidatorBase$2",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.Validators.IFieldMetadataValidator"],
    Kind: "Class",
    definition: {
        ctor: function (TMetadataValue, TFieldValue, metadataKey){
            this.TMetadataValue = TMetadataValue;
            this.TFieldValue = TFieldValue;
            this._MetadataKey = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNullOrEmpty(metadataKey, "metadataKey");
            this.set_MetadataKey(metadataKey);
        },
        MetadataKey$$: "System.String",
        get_MetadataKey: function (){
            return this._MetadataKey;
        },
        set_MetadataKey: function (value){
            this._MetadataKey = value;
        },
        Validate$$IFieldDefinition$$IModelValueGetter$$IModelValidationBuilder: function (fieldDefinition, getter, resultBuilder){
            Neptuo.Guard.NotNull$$Object$$String(fieldDefinition, "fieldDefinition");
            Neptuo.Guard.NotNull$$Object$$String(getter, "getter");
            Neptuo.Guard.NotNull$$Object$$String(resultBuilder, "resultBuilder");
            var metadataValue;
            if (!(function (){
                var $1 = {
                    Value: metadataValue
                };
                var $res = fieldDefinition.get_Metadata().TryGet(this.get_MetadataKey(), $1);
                metadataValue = $1.Value;
                return $res;
            }).call(this))
                return this.MissingMetadataKey(fieldDefinition, getter, resultBuilder);
            var fieldValue = Neptuo.PresentationModels.ModelValueGetterExtensions.GetValueOrDefault$1$$IModelValueGetter$$String$$T(this.TFieldValue, getter, fieldDefinition.get_Identifier(), Default(this.TFieldValue));
            var metadata = Cast(metadataValue, this.TMetadataValue);
            return this.Validate$$TFieldValue$$TMetadataValue$$FieldMetadataValidatorContext(fieldValue, metadata, new Neptuo.PresentationModels.Validators.FieldMetadataValidatorContext.ctor(fieldDefinition, getter, resultBuilder));
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.String"]
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$Validation$FieldMetadataValidatorBase$2);
var Neptuo$PresentationModels$Validation$FieldMetadataValidatorContext = {
    fullname: "Neptuo.PresentationModels.Validators.FieldMetadataValidatorContext",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition: {
        ctor: function (fieldDefinition, getter, resultBuilder){
            this._FieldDefinition = null;
            this._Getter = null;
            this._ResultBuilder = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(fieldDefinition, "fieldDefinition");
            Neptuo.Guard.NotNull$$Object$$String(getter, "getter");
            Neptuo.Guard.NotNull$$Object$$String(resultBuilder, "resultBuilder");
            this.set_FieldDefinition(fieldDefinition);
            this.set_Getter(getter);
            this.set_ResultBuilder(resultBuilder);
        },
        FieldDefinition$$: "Neptuo.PresentationModels.IFieldDefinition",
        get_FieldDefinition: function (){
            return this._FieldDefinition;
        },
        set_FieldDefinition: function (value){
            this._FieldDefinition = value;
        },
        Getter$$: "Neptuo.PresentationModels.IModelValueGetter",
        get_Getter: function (){
            return this._Getter;
        },
        set_Getter: function (value){
            this._Getter = value;
        },
        ResultBuilder$$: "Neptuo.PresentationModels.Validators.IModelValidationBuilder",
        get_ResultBuilder: function (){
            return this._ResultBuilder;
        },
        set_ResultBuilder: function (value){
            this._ResultBuilder = value;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.PresentationModels.IFieldDefinition", "Neptuo.PresentationModels.IModelValueGetter", "Neptuo.PresentationModels.Validators.IModelValidationBuilder"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$Validation$FieldMetadataValidatorContext);
var Neptuo$PresentationModels$Validation$FuncFieldMetadataValidatorFactory$1 = {
    fullname: "Neptuo.PresentationModels.Validators.FuncFieldMetadataValidatorFactory$1",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.Validators.IFieldMetadataValidatorFactory"],
    Kind: "Class",
    definition: {
        ctor: function (TValidator, factory){
            this.TValidator = TValidator;
            this._Factory = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(factory, "factory");
            this.set_Factory(factory);
        },
        Factory$$: "System.Func`1[[`0]]",
        get_Factory: function (){
            return this._Factory;
        },
        set_Factory: function (value){
            this._Factory = value;
        },
        Create: function (){
            return this.get_Factory()();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Func"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$Validation$FuncFieldMetadataValidatorFactory$1);
var Neptuo$PresentationModels$Validation$FuncFieldMetadataValidatorFactory = {
    fullname: "Neptuo.PresentationModels.Validators.FuncFieldMetadataValidatorFactory",
    baseTypeName: "Neptuo.PresentationModels.Validators.FuncFieldMetadataValidatorFactory$1",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition: {
        ctor: function (factory){
            Neptuo.PresentationModels.Validators.FuncFieldMetadataValidatorFactory$1.ctor.call(this, Neptuo.PresentationModels.Validators.IFieldMetadataValidator.ctor, factory);
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["System.Func"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$Validation$FuncFieldMetadataValidatorFactory);
var Neptuo$PresentationModels$Validation$IFieldMetadataValidator = {
    fullname: "Neptuo.PresentationModels.Validators.IFieldMetadataValidator",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$Validation$IFieldMetadataValidator);
var Neptuo$PresentationModels$Validation$IFieldMetadataValidatorFactory = {
    fullname: "Neptuo.PresentationModels.Validators.IFieldMetadataValidatorFactory",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.IActivator$1"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$Validation$IFieldMetadataValidatorFactory);
var Neptuo$PresentationModels$Validation$IMetadataValidatorCollection = {
    fullname: "Neptuo.PresentationModels.Validators.IMetadataValidatorCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$Validation$IMetadataValidatorCollection);
var Neptuo$PresentationModels$Validation$IModelValidationBuilder = {
    fullname: "Neptuo.PresentationModels.Validators.IModelValidationBuilder",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$Validation$IModelValidationBuilder);
var Neptuo$PresentationModels$Validation$IModelValidator = {
    fullname: "Neptuo.PresentationModels.Validators.IModelValidator",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.Validators.IValidationHandler$1"],
    Kind: "Interface",
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$Validation$IModelValidator);
var Neptuo$PresentationModels$Validation$MetadataModelValidator = {
    fullname: "Neptuo.PresentationModels.Validators.MetadataModelValidator",
    baseTypeName: "Neptuo.PresentationModels.Validators.ModelValidatorBase",
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition: {
        ctor: function (modelDefinition, validators){
            this._Validators = null;
            Neptuo.PresentationModels.Validators.ModelValidatorBase.ctor.call(this, modelDefinition);
            Neptuo.Guard.NotNull$$Object$$String(validators, "validators");
            this.set_Validators(validators);
        },
        Validators$$: "Neptuo.PresentationModels.Validators.IMetadataValidatorCollection",
        get_Validators: function (){
            return this._Validators;
        },
        set_Validators: function (value){
            this._Validators = value;
        },
        ValidateField: function (fieldDefinition, getter, resultBuilder){
            var $it7 = fieldDefinition.get_Metadata().get_Keys().GetEnumerator();
            while ($it7.MoveNext()){
                var key = $it7.get_Current();
                var validator;
                if ((function (){
                    var $1 = {
                        Value: validator
                    };
                    var $res = this.get_Validators().TryGet(this.get_ModelDefinition().get_Identifier(), fieldDefinition.get_Identifier(), key, $1);
                    validator = $1.Value;
                    return $res;
                }).call(this))
                    validator.Validate(fieldDefinition, getter, resultBuilder);
            }
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.PresentationModels.IModelDefinition", "Neptuo.PresentationModels.Validators.IMetadataValidatorCollection"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$Validation$MetadataModelValidator);
var Neptuo$PresentationModels$Validation$MetadataValidatorCollection = {
    fullname: "Neptuo.PresentationModels.Validators.MetadataValidatorCollection",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.Validators.IMetadataValidatorCollection"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._Validators = null;
            System.Object.ctor.call(this);
            this.set_Validators(new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.Dictionary$2.ctor));
        },
        Validators$$: "System.Collections.Generic.Dictionary`2[[System.String],[System.Collections.Generic.Dictionary`2[[System.String],[System.Collections.Generic.Dictionary`2[[System.String],[Neptuo.PresentationModels.Validators.IFieldMetadataValidatorFactory]]]]]]",
        get_Validators: function (){
            return this._Validators;
        },
        set_Validators: function (value){
            this._Validators = value;
        },
        Add: function (modelIdentifier, fieldIdentifier, metadataKey, validatorFactory){
            if (modelIdentifier == null)
                modelIdentifier = System.String.Empty;
            if (fieldIdentifier == null)
                fieldIdentifier = System.String.Empty;
            if (!this.get_Validators().ContainsKey(modelIdentifier))
                this.get_Validators().set_Item$$TKey(modelIdentifier, new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.Dictionary$2.ctor));
            if (!this.get_Validators().get_Item$$TKey(modelIdentifier).ContainsKey(fieldIdentifier))
                this.get_Validators().get_Item$$TKey(modelIdentifier).set_Item$$TKey(fieldIdentifier, new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, Neptuo.PresentationModels.Validators.IFieldMetadataValidatorFactory.ctor));
            this.get_Validators().get_Item$$TKey(modelIdentifier).get_Item$$TKey(fieldIdentifier).set_Item$$TKey(metadataKey, validatorFactory);
            return this;
        },
        TryGet: function (modelIdentifier, fieldIdentifier, metadataKey, validator){
            var modelValidators;
            if (!(function (){
                var $1 = {
                    Value: modelValidators
                };
                var $res = this.get_Validators().TryGetValue(modelIdentifier, $1);
                modelValidators = $1.Value;
                return $res;
            }).call(this) && !(function (){
                var $1 = {
                    Value: modelValidators
                };
                var $res = this.get_Validators().TryGetValue(System.String.Empty, $1);
                modelValidators = $1.Value;
                return $res;
            }).call(this)){
                validator.Value = null;
                return false;
            }
            var fieldValidators;
            if (!(function (){
                var $1 = {
                    Value: fieldValidators
                };
                var $res = modelValidators.TryGetValue(fieldIdentifier, $1);
                fieldValidators = $1.Value;
                return $res;
            }).call(this) && !(function (){
                var $1 = {
                    Value: fieldValidators
                };
                var $res = modelValidators.TryGetValue(System.String.Empty, $1);
                fieldValidators = $1.Value;
                return $res;
            }).call(this)){
                validator.Value = null;
                return false;
            }
            var factory;
            if (!(function (){
                var $1 = {
                    Value: factory
                };
                var $res = fieldValidators.TryGetValue(metadataKey, $1);
                factory = $1.Value;
                return $res;
            }).call(this) && !(function (){
                var $1 = {
                    Value: factory
                };
                var $res = fieldValidators.TryGetValue(System.String.Empty, $1);
                factory = $1.Value;
                return $res;
            }).call(this)){
                validator.Value = null;
                return false;
            }
            validator.Value = factory.Create();
            return true;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$Validation$MetadataValidatorCollection);
var Neptuo$PresentationModels$Validation$MetadataValidatorCollectionExtensions = {
    fullname: "Neptuo.PresentationModels.Validators.MetadataValidatorCollectionExtensions",
    baseTypeName: "System.Object",
    staticDefinition: {
        Add: function (collection, modelIdentifier, fieldIdentifier, metadataKey, validator){
            return collection.Add(modelIdentifier, fieldIdentifier, metadataKey, new Neptuo.PresentationModels.Validators.SingletonFieldMetadataValidatorFactory.ctor(validator));
        }
    },
    assemblyName: "Neptuo.PresentationModels",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    },
    ctors: [],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$Validation$MetadataValidatorCollectionExtensions);
var Neptuo$PresentationModels$Validation$ModelValidationBuilder = {
    fullname: "Neptuo.PresentationModels.Validators.ModelValidationBuilder",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.Validators.IValidationResult", "Neptuo.PresentationModels.Validators.IModelValidationBuilder"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._MessageList = null;
            System.Object.ctor.call(this);
            this.set_MessageList(new System.Collections.Generic.List$1.ctor(Neptuo.Validators.IValidationMessage.ctor));
        },
        MessageList$$: "System.Collections.Generic.List`1[[Neptuo.Validators.IValidationMessage]]",
        get_MessageList: function (){
            return this._MessageList;
        },
        set_MessageList: function (value){
            this._MessageList = value;
        },
        IsValid$$: "System.Boolean",
        get_IsValid: function (){
            return this.get_MessageList().get_Count() == 0;
        },
        Messages$$: "System.Collections.Generic.IEnumerable`1[[Neptuo.Validators.IValidationMessage]]",
        get_Messages: function (){
            return this.get_MessageList();
        },
        AddMessage: function (message){
            Neptuo.Guard.NotNull$$Object$$String(message, "message");
            this.get_MessageList().Add(message);
            return this;
        },
        AddMessages: function (messages){
            Neptuo.Guard.NotNull$$Object$$String(messages, "messages");
            this.get_MessageList().AddRange(messages);
            return this;
        },
        ToResult: function (){
            return this;
        }
    },
    ctors: [{
        name: "ctor",
        parameters: []
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$Validation$ModelValidationBuilder);
var Neptuo$PresentationModels$Validation$ModelValidatorBase = {
    fullname: "Neptuo.PresentationModels.Validators.ModelValidatorBase",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.Validators.IModelValidator"],
    Kind: "Class",
    definition: {
        ctor: function (modelDefinition){
            this._ModelDefinition = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(modelDefinition, "modelDefinition");
            this.set_ModelDefinition(modelDefinition);
        },
        ModelDefinition$$: "Neptuo.PresentationModels.IModelDefinition",
        get_ModelDefinition: function (){
            return this._ModelDefinition;
        },
        set_ModelDefinition: function (value){
            this._ModelDefinition = value;
        },
        CreateResultBuilder: function (){
            return new Neptuo.PresentationModels.Validators.ModelValidationBuilder.ctor();
        },
        Validate: function (getter){
            var resultBuilder = this.CreateResultBuilder();
            var $it8 = this.get_ModelDefinition().get_Fields().GetEnumerator();
            while ($it8.MoveNext()){
                var fieldDefinition = $it8.get_Current();
                this.ValidateField(fieldDefinition, getter, resultBuilder);
            }
            return resultBuilder.ToResult();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.PresentationModels.IModelDefinition"]
    }
    ],
    IsAbstract: true
};
JsTypes.push(Neptuo$PresentationModels$Validation$ModelValidatorBase);
var Neptuo$PresentationModels$Validation$SingletonFieldMetadataValidatorFactory = {
    fullname: "Neptuo.PresentationModels.Validators.SingletonFieldMetadataValidatorFactory",
    baseTypeName: "System.Object",
    assemblyName: "Neptuo.PresentationModels",
    interfaceNames: ["Neptuo.PresentationModels.Validators.IFieldMetadataValidatorFactory"],
    Kind: "Class",
    definition: {
        ctor: function (validator){
            this._Validator = null;
            System.Object.ctor.call(this);
            Neptuo.Guard.NotNull$$Object$$String(validator, "validator");
            this.set_Validator(validator);
        },
        Validator$$: "Neptuo.PresentationModels.Validators.IFieldMetadataValidator",
        get_Validator: function (){
            return this._Validator;
        },
        set_Validator: function (value){
            this._Validator = value;
        },
        Create: function (){
            return this.get_Validator();
        }
    },
    ctors: [{
        name: "ctor",
        parameters: ["Neptuo.PresentationModels.Validators.IFieldMetadataValidator"]
    }
    ],
    IsAbstract: false
};
JsTypes.push(Neptuo$PresentationModels$Validation$SingletonFieldMetadataValidatorFactory);

